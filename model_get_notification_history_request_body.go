/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 5.2.1
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// GetNotificationHistoryRequestBody struct for GetNotificationHistoryRequestBody
type GetNotificationHistoryRequestBody struct {
	// -> \"sent\" - All the devices by player_id that were sent the specified notification_id.  Notifications targeting under 1000 recipients will not have \"sent\" events recorded, but will show \"clicked\" events. \"clicked\" - All the devices by `player_id` that clicked the specified notification_id.
	Events *string `json:"events,omitempty"`
	// The email address you would like the report sent.
	Email *string `json:"email,omitempty"`
	AppId *string `json:"app_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetNotificationHistoryRequestBody GetNotificationHistoryRequestBody

// NewGetNotificationHistoryRequestBody instantiates a new GetNotificationHistoryRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetNotificationHistoryRequestBody() *GetNotificationHistoryRequestBody {
	this := GetNotificationHistoryRequestBody{}
	return &this
}

// NewGetNotificationHistoryRequestBodyWithDefaults instantiates a new GetNotificationHistoryRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetNotificationHistoryRequestBodyWithDefaults() *GetNotificationHistoryRequestBody {
	this := GetNotificationHistoryRequestBody{}
	return &this
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *GetNotificationHistoryRequestBody) GetEvents() string {
	if o == nil || o.Events == nil {
		var ret string
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNotificationHistoryRequestBody) GetEventsOk() (*string, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *GetNotificationHistoryRequestBody) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given string and assigns it to the Events field.
func (o *GetNotificationHistoryRequestBody) SetEvents(v string) {
	o.Events = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *GetNotificationHistoryRequestBody) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNotificationHistoryRequestBody) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *GetNotificationHistoryRequestBody) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *GetNotificationHistoryRequestBody) SetEmail(v string) {
	o.Email = &v
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *GetNotificationHistoryRequestBody) GetAppId() string {
	if o == nil || o.AppId == nil {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNotificationHistoryRequestBody) GetAppIdOk() (*string, bool) {
	if o == nil || o.AppId == nil {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *GetNotificationHistoryRequestBody) HasAppId() bool {
	if o != nil && o.AppId != nil {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *GetNotificationHistoryRequestBody) SetAppId(v string) {
	o.AppId = &v
}

func (o GetNotificationHistoryRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.AppId != nil {
		toSerialize["app_id"] = o.AppId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *GetNotificationHistoryRequestBody) UnmarshalJSON(bytes []byte) (err error) {
	varGetNotificationHistoryRequestBody := _GetNotificationHistoryRequestBody{}

	if err = json.Unmarshal(bytes, &varGetNotificationHistoryRequestBody); err == nil {
		*o = GetNotificationHistoryRequestBody(varGetNotificationHistoryRequestBody)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "events")
		delete(additionalProperties, "email")
		delete(additionalProperties, "app_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetNotificationHistoryRequestBody struct {
	value *GetNotificationHistoryRequestBody
	isSet bool
}

func (v NullableGetNotificationHistoryRequestBody) Get() *GetNotificationHistoryRequestBody {
	return v.value
}

func (v *NullableGetNotificationHistoryRequestBody) Set(val *GetNotificationHistoryRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNotificationHistoryRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNotificationHistoryRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNotificationHistoryRequestBody(val *GetNotificationHistoryRequestBody) *NullableGetNotificationHistoryRequestBody {
	return &NullableGetNotificationHistoryRequestBody{value: val, isSet: true}
}

func (v NullableGetNotificationHistoryRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNotificationHistoryRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


