/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 5.3.0
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
	"time"
)

// CustomEvent struct for CustomEvent
type CustomEvent struct {
	// The identifier or name of the event. Maximum 128 characters.
	Name string `json:"name"`
	// The external ID of the user targeted for the event. Either the user's External ID or OneSignal ID is required.
	ExternalId NullableString `json:"external_id,omitempty"`
	// The OneSignal ID of the user targeted for the event. Either the user's External ID or OneSignal ID is required.
	OnesignalId NullableString `json:"onesignal_id,omitempty"`
	// Time the event occurred as an ISO8601 formatted string. Defaults to now if not included or past date provided.
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// Properties or data related to the event, like {\"geography\": \"USA\"}
	Payload map[string]interface{} `json:"payload,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CustomEvent CustomEvent

// NewCustomEvent instantiates a new CustomEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomEvent(name string) *CustomEvent {
	this := CustomEvent{}
	this.Name = name
	return &this
}

// NewCustomEventWithDefaults instantiates a new CustomEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomEventWithDefaults() *CustomEvent {
	this := CustomEvent{}
	return &this
}

// GetName returns the Name field value
func (o *CustomEvent) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CustomEvent) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CustomEvent) SetName(v string) {
	o.Name = v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomEvent) GetExternalId() string {
	if o == nil || o.ExternalId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExternalId.Get()
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomEvent) GetExternalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalId.Get(), o.ExternalId.IsSet()
}

// HasExternalId returns a boolean if a field has been set.
func (o *CustomEvent) HasExternalId() bool {
	if o != nil && o.ExternalId.IsSet() {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given NullableString and assigns it to the ExternalId field.
func (o *CustomEvent) SetExternalId(v string) {
	o.ExternalId.Set(&v)
}
// SetExternalIdNil sets the value for ExternalId to be an explicit nil
func (o *CustomEvent) SetExternalIdNil() {
	o.ExternalId.Set(nil)
}

// UnsetExternalId ensures that no value is present for ExternalId, not even an explicit nil
func (o *CustomEvent) UnsetExternalId() {
	o.ExternalId.Unset()
}

// GetOnesignalId returns the OnesignalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomEvent) GetOnesignalId() string {
	if o == nil || o.OnesignalId.Get() == nil {
		var ret string
		return ret
	}
	return *o.OnesignalId.Get()
}

// GetOnesignalIdOk returns a tuple with the OnesignalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomEvent) GetOnesignalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OnesignalId.Get(), o.OnesignalId.IsSet()
}

// HasOnesignalId returns a boolean if a field has been set.
func (o *CustomEvent) HasOnesignalId() bool {
	if o != nil && o.OnesignalId.IsSet() {
		return true
	}

	return false
}

// SetOnesignalId gets a reference to the given NullableString and assigns it to the OnesignalId field.
func (o *CustomEvent) SetOnesignalId(v string) {
	o.OnesignalId.Set(&v)
}
// SetOnesignalIdNil sets the value for OnesignalId to be an explicit nil
func (o *CustomEvent) SetOnesignalIdNil() {
	o.OnesignalId.Set(nil)
}

// UnsetOnesignalId ensures that no value is present for OnesignalId, not even an explicit nil
func (o *CustomEvent) UnsetOnesignalId() {
	o.OnesignalId.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *CustomEvent) GetTimestamp() time.Time {
	if o == nil || o.Timestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomEvent) GetTimestampOk() (*time.Time, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CustomEvent) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *CustomEvent) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *CustomEvent) GetPayload() map[string]interface{} {
	if o == nil || o.Payload == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomEvent) GetPayloadOk() (map[string]interface{}, bool) {
	if o == nil || o.Payload == nil {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *CustomEvent) HasPayload() bool {
	if o != nil && o.Payload != nil {
		return true
	}

	return false
}

// SetPayload gets a reference to the given map[string]interface{} and assigns it to the Payload field.
func (o *CustomEvent) SetPayload(v map[string]interface{}) {
	o.Payload = v
}

func (o CustomEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.ExternalId.IsSet() {
		toSerialize["external_id"] = o.ExternalId.Get()
	}
	if o.OnesignalId.IsSet() {
		toSerialize["onesignal_id"] = o.OnesignalId.Get()
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Payload != nil {
		toSerialize["payload"] = o.Payload
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CustomEvent) UnmarshalJSON(bytes []byte) (err error) {
	varCustomEvent := _CustomEvent{}

	if err = json.Unmarshal(bytes, &varCustomEvent); err == nil {
		*o = CustomEvent(varCustomEvent)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "external_id")
		delete(additionalProperties, "onesignal_id")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "payload")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomEvent struct {
	value *CustomEvent
	isSet bool
}

func (v NullableCustomEvent) Get() *CustomEvent {
	return v.value
}

func (v *NullableCustomEvent) Set(val *CustomEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomEvent(val *CustomEvent) *NullableCustomEvent {
	return &NullableCustomEvent{value: val, isSet: true}
}

func (v NullableCustomEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


