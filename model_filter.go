/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 5.2.1
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// Filter struct for Filter
type Filter struct {
	// Required. Name of the field to use as the first operand in the filter expression.
	Field *string `json:"field,omitempty"`
	// If `field` is `tag`, this field is *required* to specify `key` inside the tags.
	Key *string `json:"key,omitempty"`
	// Constant value to use as the second operand in the filter expression. This value is *required* when the relation operator is a binary operator.
	Value *string `json:"value,omitempty"`
	// If `field` is session-related, this is *required* to specify the number of hours before or after the user's session.
	HoursAgo *string `json:"hours_ago,omitempty"`
	// If `field` is `location`, this will specify the radius in meters from a provided location point. Use with `lat` and `long`.
	Radius *float32 `json:"radius,omitempty"`
	// If `field` is `location`, this is *required* to specify the user's latitude.
	Lat *float32 `json:"lat,omitempty"`
	// If `field` is `location`, this is *required* to specify the user's longitude.
	Long *float32 `json:"long,omitempty"`
	// Required. Operator of a filter expression.
	Relation *string `json:"relation,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Filter Filter

// NewFilter instantiates a new Filter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilter() *Filter {
	this := Filter{}
	return &this
}

// NewFilterWithDefaults instantiates a new Filter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterWithDefaults() *Filter {
	this := Filter{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *Filter) GetField() string {
	if o == nil || o.Field == nil {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetFieldOk() (*string, bool) {
	if o == nil || o.Field == nil {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *Filter) HasField() bool {
	if o != nil && o.Field != nil {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *Filter) SetField(v string) {
	o.Field = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *Filter) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Filter) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *Filter) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Filter) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Filter) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Filter) SetValue(v string) {
	o.Value = &v
}

// GetHoursAgo returns the HoursAgo field value if set, zero value otherwise.
func (o *Filter) GetHoursAgo() string {
	if o == nil || o.HoursAgo == nil {
		var ret string
		return ret
	}
	return *o.HoursAgo
}

// GetHoursAgoOk returns a tuple with the HoursAgo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetHoursAgoOk() (*string, bool) {
	if o == nil || o.HoursAgo == nil {
		return nil, false
	}
	return o.HoursAgo, true
}

// HasHoursAgo returns a boolean if a field has been set.
func (o *Filter) HasHoursAgo() bool {
	if o != nil && o.HoursAgo != nil {
		return true
	}

	return false
}

// SetHoursAgo gets a reference to the given string and assigns it to the HoursAgo field.
func (o *Filter) SetHoursAgo(v string) {
	o.HoursAgo = &v
}

// GetRadius returns the Radius field value if set, zero value otherwise.
func (o *Filter) GetRadius() float32 {
	if o == nil || o.Radius == nil {
		var ret float32
		return ret
	}
	return *o.Radius
}

// GetRadiusOk returns a tuple with the Radius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetRadiusOk() (*float32, bool) {
	if o == nil || o.Radius == nil {
		return nil, false
	}
	return o.Radius, true
}

// HasRadius returns a boolean if a field has been set.
func (o *Filter) HasRadius() bool {
	if o != nil && o.Radius != nil {
		return true
	}

	return false
}

// SetRadius gets a reference to the given float32 and assigns it to the Radius field.
func (o *Filter) SetRadius(v float32) {
	o.Radius = &v
}

// GetLat returns the Lat field value if set, zero value otherwise.
func (o *Filter) GetLat() float32 {
	if o == nil || o.Lat == nil {
		var ret float32
		return ret
	}
	return *o.Lat
}

// GetLatOk returns a tuple with the Lat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetLatOk() (*float32, bool) {
	if o == nil || o.Lat == nil {
		return nil, false
	}
	return o.Lat, true
}

// HasLat returns a boolean if a field has been set.
func (o *Filter) HasLat() bool {
	if o != nil && o.Lat != nil {
		return true
	}

	return false
}

// SetLat gets a reference to the given float32 and assigns it to the Lat field.
func (o *Filter) SetLat(v float32) {
	o.Lat = &v
}

// GetLong returns the Long field value if set, zero value otherwise.
func (o *Filter) GetLong() float32 {
	if o == nil || o.Long == nil {
		var ret float32
		return ret
	}
	return *o.Long
}

// GetLongOk returns a tuple with the Long field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetLongOk() (*float32, bool) {
	if o == nil || o.Long == nil {
		return nil, false
	}
	return o.Long, true
}

// HasLong returns a boolean if a field has been set.
func (o *Filter) HasLong() bool {
	if o != nil && o.Long != nil {
		return true
	}

	return false
}

// SetLong gets a reference to the given float32 and assigns it to the Long field.
func (o *Filter) SetLong(v float32) {
	o.Long = &v
}

// GetRelation returns the Relation field value if set, zero value otherwise.
func (o *Filter) GetRelation() string {
	if o == nil || o.Relation == nil {
		var ret string
		return ret
	}
	return *o.Relation
}

// GetRelationOk returns a tuple with the Relation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetRelationOk() (*string, bool) {
	if o == nil || o.Relation == nil {
		return nil, false
	}
	return o.Relation, true
}

// HasRelation returns a boolean if a field has been set.
func (o *Filter) HasRelation() bool {
	if o != nil && o.Relation != nil {
		return true
	}

	return false
}

// SetRelation gets a reference to the given string and assigns it to the Relation field.
func (o *Filter) SetRelation(v string) {
	o.Relation = &v
}

func (o Filter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Field != nil {
		toSerialize["field"] = o.Field
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.HoursAgo != nil {
		toSerialize["hours_ago"] = o.HoursAgo
	}
	if o.Radius != nil {
		toSerialize["radius"] = o.Radius
	}
	if o.Lat != nil {
		toSerialize["lat"] = o.Lat
	}
	if o.Long != nil {
		toSerialize["long"] = o.Long
	}
	if o.Relation != nil {
		toSerialize["relation"] = o.Relation
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Filter) UnmarshalJSON(bytes []byte) (err error) {
	varFilter := _Filter{}

	if err = json.Unmarshal(bytes, &varFilter); err == nil {
		*o = Filter(varFilter)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "field")
		delete(additionalProperties, "key")
		delete(additionalProperties, "value")
		delete(additionalProperties, "hours_ago")
		delete(additionalProperties, "radius")
		delete(additionalProperties, "lat")
		delete(additionalProperties, "long")
		delete(additionalProperties, "relation")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilter struct {
	value *Filter
	isSet bool
}

func (v NullableFilter) Get() *Filter {
	return v.value
}

func (v *NullableFilter) Set(val *Filter) {
	v.value = val
	v.isSet = true
}

func (v NullableFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilter(val *Filter) *NullableFilter {
	return &NullableFilter{value: val, isSet: true}
}

func (v NullableFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


