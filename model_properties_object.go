/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.4.0
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// PropertiesObject struct for PropertiesObject
type PropertiesObject struct {
	Tags map[string]interface{} `json:"tags,omitempty"`
	Language *string `json:"language,omitempty"`
	TimezoneId *string `json:"timezone_id,omitempty"`
	Lat *float32 `json:"lat,omitempty"`
	Long *float32 `json:"long,omitempty"`
	Country *string `json:"country,omitempty"`
	FirstActive *float32 `json:"first_active,omitempty"`
	LastActive *float32 `json:"last_active,omitempty"`
	AmountSpent *float32 `json:"amount_spent,omitempty"`
	Purchases []Purchase `json:"purchases,omitempty"`
	Ip *string `json:"ip,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PropertiesObject PropertiesObject

// NewPropertiesObject instantiates a new PropertiesObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertiesObject() *PropertiesObject {
	this := PropertiesObject{}
	return &this
}

// NewPropertiesObjectWithDefaults instantiates a new PropertiesObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertiesObjectWithDefaults() *PropertiesObject {
	this := PropertiesObject{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *PropertiesObject) GetTags() map[string]interface{} {
	if o == nil || o.Tags == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertiesObject) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PropertiesObject) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *PropertiesObject) SetTags(v map[string]interface{}) {
	o.Tags = v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *PropertiesObject) GetLanguage() string {
	if o == nil || o.Language == nil {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertiesObject) GetLanguageOk() (*string, bool) {
	if o == nil || o.Language == nil {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *PropertiesObject) HasLanguage() bool {
	if o != nil && o.Language != nil {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *PropertiesObject) SetLanguage(v string) {
	o.Language = &v
}

// GetTimezoneId returns the TimezoneId field value if set, zero value otherwise.
func (o *PropertiesObject) GetTimezoneId() string {
	if o == nil || o.TimezoneId == nil {
		var ret string
		return ret
	}
	return *o.TimezoneId
}

// GetTimezoneIdOk returns a tuple with the TimezoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertiesObject) GetTimezoneIdOk() (*string, bool) {
	if o == nil || o.TimezoneId == nil {
		return nil, false
	}
	return o.TimezoneId, true
}

// HasTimezoneId returns a boolean if a field has been set.
func (o *PropertiesObject) HasTimezoneId() bool {
	if o != nil && o.TimezoneId != nil {
		return true
	}

	return false
}

// SetTimezoneId gets a reference to the given string and assigns it to the TimezoneId field.
func (o *PropertiesObject) SetTimezoneId(v string) {
	o.TimezoneId = &v
}

// GetLat returns the Lat field value if set, zero value otherwise.
func (o *PropertiesObject) GetLat() float32 {
	if o == nil || o.Lat == nil {
		var ret float32
		return ret
	}
	return *o.Lat
}

// GetLatOk returns a tuple with the Lat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertiesObject) GetLatOk() (*float32, bool) {
	if o == nil || o.Lat == nil {
		return nil, false
	}
	return o.Lat, true
}

// HasLat returns a boolean if a field has been set.
func (o *PropertiesObject) HasLat() bool {
	if o != nil && o.Lat != nil {
		return true
	}

	return false
}

// SetLat gets a reference to the given float32 and assigns it to the Lat field.
func (o *PropertiesObject) SetLat(v float32) {
	o.Lat = &v
}

// GetLong returns the Long field value if set, zero value otherwise.
func (o *PropertiesObject) GetLong() float32 {
	if o == nil || o.Long == nil {
		var ret float32
		return ret
	}
	return *o.Long
}

// GetLongOk returns a tuple with the Long field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertiesObject) GetLongOk() (*float32, bool) {
	if o == nil || o.Long == nil {
		return nil, false
	}
	return o.Long, true
}

// HasLong returns a boolean if a field has been set.
func (o *PropertiesObject) HasLong() bool {
	if o != nil && o.Long != nil {
		return true
	}

	return false
}

// SetLong gets a reference to the given float32 and assigns it to the Long field.
func (o *PropertiesObject) SetLong(v float32) {
	o.Long = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *PropertiesObject) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertiesObject) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *PropertiesObject) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *PropertiesObject) SetCountry(v string) {
	o.Country = &v
}

// GetFirstActive returns the FirstActive field value if set, zero value otherwise.
func (o *PropertiesObject) GetFirstActive() float32 {
	if o == nil || o.FirstActive == nil {
		var ret float32
		return ret
	}
	return *o.FirstActive
}

// GetFirstActiveOk returns a tuple with the FirstActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertiesObject) GetFirstActiveOk() (*float32, bool) {
	if o == nil || o.FirstActive == nil {
		return nil, false
	}
	return o.FirstActive, true
}

// HasFirstActive returns a boolean if a field has been set.
func (o *PropertiesObject) HasFirstActive() bool {
	if o != nil && o.FirstActive != nil {
		return true
	}

	return false
}

// SetFirstActive gets a reference to the given float32 and assigns it to the FirstActive field.
func (o *PropertiesObject) SetFirstActive(v float32) {
	o.FirstActive = &v
}

// GetLastActive returns the LastActive field value if set, zero value otherwise.
func (o *PropertiesObject) GetLastActive() float32 {
	if o == nil || o.LastActive == nil {
		var ret float32
		return ret
	}
	return *o.LastActive
}

// GetLastActiveOk returns a tuple with the LastActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertiesObject) GetLastActiveOk() (*float32, bool) {
	if o == nil || o.LastActive == nil {
		return nil, false
	}
	return o.LastActive, true
}

// HasLastActive returns a boolean if a field has been set.
func (o *PropertiesObject) HasLastActive() bool {
	if o != nil && o.LastActive != nil {
		return true
	}

	return false
}

// SetLastActive gets a reference to the given float32 and assigns it to the LastActive field.
func (o *PropertiesObject) SetLastActive(v float32) {
	o.LastActive = &v
}

// GetAmountSpent returns the AmountSpent field value if set, zero value otherwise.
func (o *PropertiesObject) GetAmountSpent() float32 {
	if o == nil || o.AmountSpent == nil {
		var ret float32
		return ret
	}
	return *o.AmountSpent
}

// GetAmountSpentOk returns a tuple with the AmountSpent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertiesObject) GetAmountSpentOk() (*float32, bool) {
	if o == nil || o.AmountSpent == nil {
		return nil, false
	}
	return o.AmountSpent, true
}

// HasAmountSpent returns a boolean if a field has been set.
func (o *PropertiesObject) HasAmountSpent() bool {
	if o != nil && o.AmountSpent != nil {
		return true
	}

	return false
}

// SetAmountSpent gets a reference to the given float32 and assigns it to the AmountSpent field.
func (o *PropertiesObject) SetAmountSpent(v float32) {
	o.AmountSpent = &v
}

// GetPurchases returns the Purchases field value if set, zero value otherwise.
func (o *PropertiesObject) GetPurchases() []Purchase {
	if o == nil || o.Purchases == nil {
		var ret []Purchase
		return ret
	}
	return o.Purchases
}

// GetPurchasesOk returns a tuple with the Purchases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertiesObject) GetPurchasesOk() ([]Purchase, bool) {
	if o == nil || o.Purchases == nil {
		return nil, false
	}
	return o.Purchases, true
}

// HasPurchases returns a boolean if a field has been set.
func (o *PropertiesObject) HasPurchases() bool {
	if o != nil && o.Purchases != nil {
		return true
	}

	return false
}

// SetPurchases gets a reference to the given []Purchase and assigns it to the Purchases field.
func (o *PropertiesObject) SetPurchases(v []Purchase) {
	o.Purchases = v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *PropertiesObject) GetIp() string {
	if o == nil || o.Ip == nil {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertiesObject) GetIpOk() (*string, bool) {
	if o == nil || o.Ip == nil {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *PropertiesObject) HasIp() bool {
	if o != nil && o.Ip != nil {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *PropertiesObject) SetIp(v string) {
	o.Ip = &v
}

func (o PropertiesObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Language != nil {
		toSerialize["language"] = o.Language
	}
	if o.TimezoneId != nil {
		toSerialize["timezone_id"] = o.TimezoneId
	}
	if o.Lat != nil {
		toSerialize["lat"] = o.Lat
	}
	if o.Long != nil {
		toSerialize["long"] = o.Long
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.FirstActive != nil {
		toSerialize["first_active"] = o.FirstActive
	}
	if o.LastActive != nil {
		toSerialize["last_active"] = o.LastActive
	}
	if o.AmountSpent != nil {
		toSerialize["amount_spent"] = o.AmountSpent
	}
	if o.Purchases != nil {
		toSerialize["purchases"] = o.Purchases
	}
	if o.Ip != nil {
		toSerialize["ip"] = o.Ip
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PropertiesObject) UnmarshalJSON(bytes []byte) (err error) {
	varPropertiesObject := _PropertiesObject{}

	if err = json.Unmarshal(bytes, &varPropertiesObject); err == nil {
		*o = PropertiesObject(varPropertiesObject)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "tags")
		delete(additionalProperties, "language")
		delete(additionalProperties, "timezone_id")
		delete(additionalProperties, "lat")
		delete(additionalProperties, "long")
		delete(additionalProperties, "country")
		delete(additionalProperties, "first_active")
		delete(additionalProperties, "last_active")
		delete(additionalProperties, "amount_spent")
		delete(additionalProperties, "purchases")
		delete(additionalProperties, "ip")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePropertiesObject struct {
	value *PropertiesObject
	isSet bool
}

func (v NullablePropertiesObject) Get() *PropertiesObject {
	return v.value
}

func (v *NullablePropertiesObject) Set(val *PropertiesObject) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertiesObject) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertiesObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertiesObject(val *PropertiesObject) *NullablePropertiesObject {
	return &NullablePropertiesObject{value: val, isSet: true}
}

func (v NullablePropertiesObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertiesObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


