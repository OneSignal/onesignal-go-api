/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.4.0
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
	"time"
)

// NotificationAllOf struct for NotificationAllOf
type NotificationAllOf struct {
	// Channel: All Schedule notification for future delivery. API defaults to UTC -1100 Examples: All examples are the exact same date & time. \"Thu Sep 24 2015 14:00:00 GMT-0700 (PDT)\" \"September 24th 2015, 2:00:00 pm UTC-07:00\" \"2015-09-24 14:00:00 GMT-0700\" \"Sept 24 2015 14:00:00 GMT-0700\" \"Thu Sep 24 2015 14:00:00 GMT-0700 (Pacific Daylight Time)\" Note: SMS currently only supports send_after parameter. 
	SendAfter NullableTime `json:"send_after,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NotificationAllOf NotificationAllOf

// NewNotificationAllOf instantiates a new NotificationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationAllOf() *NotificationAllOf {
	this := NotificationAllOf{}
	return &this
}

// NewNotificationAllOfWithDefaults instantiates a new NotificationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationAllOfWithDefaults() *NotificationAllOf {
	this := NotificationAllOf{}
	return &this
}

// GetSendAfter returns the SendAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationAllOf) GetSendAfter() time.Time {
	if o == nil || o.SendAfter.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.SendAfter.Get()
}

// GetSendAfterOk returns a tuple with the SendAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationAllOf) GetSendAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.SendAfter.Get(), o.SendAfter.IsSet()
}

// HasSendAfter returns a boolean if a field has been set.
func (o *NotificationAllOf) HasSendAfter() bool {
	if o != nil && o.SendAfter.IsSet() {
		return true
	}

	return false
}

// SetSendAfter gets a reference to the given NullableTime and assigns it to the SendAfter field.
func (o *NotificationAllOf) SetSendAfter(v time.Time) {
	o.SendAfter.Set(&v)
}
// SetSendAfterNil sets the value for SendAfter to be an explicit nil
func (o *NotificationAllOf) SetSendAfterNil() {
	o.SendAfter.Set(nil)
}

// UnsetSendAfter ensures that no value is present for SendAfter, not even an explicit nil
func (o *NotificationAllOf) UnsetSendAfter() {
	o.SendAfter.Unset()
}

func (o NotificationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SendAfter.IsSet() {
		toSerialize["send_after"] = o.SendAfter.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *NotificationAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varNotificationAllOf := _NotificationAllOf{}

	if err = json.Unmarshal(bytes, &varNotificationAllOf); err == nil {
		*o = NotificationAllOf(varNotificationAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "send_after")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNotificationAllOf struct {
	value *NotificationAllOf
	isSet bool
}

func (v NullableNotificationAllOf) Get() *NotificationAllOf {
	return v.value
}

func (v *NullableNotificationAllOf) Set(val *NotificationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationAllOf(val *NotificationAllOf) *NullableNotificationAllOf {
	return &NullableNotificationAllOf{value: val, isSet: true}
}

func (v NullableNotificationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


