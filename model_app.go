/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.4.0
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
	"time"
)

// App struct for App
type App struct {
	Id *string `json:"id,omitempty"`
	// The name of your app, as displayed on your apps list on the dashboard.  This can be renamed.
	Name *string `json:"name,omitempty"`
	Players *int32 `json:"players,omitempty"`
	MessageablePlayers *int32 `json:"messageable_players,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Android: Your Google Project number.  Also known as Sender ID.
	AndroidGcmSenderId *string `json:"android_gcm_sender_id,omitempty"`
	// Android: Your Google Push Messaging Auth Key
	GcmKey NullableString `json:"gcm_key,omitempty"`
	// Chrome (All Browsers except Safari) (Recommended): The URL to your website.  This field is required if you wish to enable web push and specify other web push parameters.
	ChromeWebOrigin NullableString `json:"chrome_web_origin,omitempty"`
	// Not for web push.  Your Google Push Messaging Auth Key if you use Chrome Apps / Extensions.
	ChromeKey NullableString `json:"chrome_key,omitempty"`
	// Chrome (All Browsers except Safari): Your default notification icon. Should be 256x256 pixels, min 80x80.
	ChromeWebDefaultNotificationIcon NullableString `json:"chrome_web_default_notification_icon,omitempty"`
	// Chrome (All Browsers except Safari): A subdomain of your choice in order to support Web Push on non-HTTPS websites. This field must be set in order for the chrome_web_gcm_sender_id property to be processed.
	ChromeWebSubDomain NullableString `json:"chrome_web_sub_domain,omitempty"`
	// iOS: Either sandbox or production
	ApnsEnv NullableString `json:"apns_env,omitempty"`
	// iOS: Your apple push notification p12 certificate file, converted to a string and Base64 encoded.
	ApnsP12 *string `json:"apns_p12,omitempty"`
	// iOS: Required if using p12 certificate.  Password for the apns_p12 file.
	ApnsP12Password *string `json:"apns_p12_password,omitempty"`
	ApnsCertificates NullableString `json:"apns_certificates,omitempty"`
	SafariApnsCertificates *string `json:"safari_apns_certificates,omitempty"`
	// Safari: Your apple push notification p12 certificate file for Safari Push Notifications, converted to a string and Base64 encoded.
	SafariApnsP12 *string `json:"safari_apns_p12,omitempty"`
	// Safari: Password for safari_apns_p12 file
	SafariApnsP12Password *string `json:"safari_apns_p12_password,omitempty"`
	// iOS: Required if using p8. Unique identifier for the p8 authentication key.
	ApnsKeyId NullableString `json:"apns_key_id,omitempty"`
	// iOS: Required if using p8. Team ID generated by Apple for your developer account.
	ApnsTeamId NullableString `json:"apns_team_id,omitempty"`
	// iOS: Required if using p8. Bundle ID for your app in the Apple ecosystem.
	ApnsBundleId NullableString `json:"apns_bundle_id,omitempty"`
	// iOS: Required if using p8. Base64 encoded p8 key
	ApnsP8 NullableString `json:"apns_p8,omitempty"`
	// Safari (Recommended): The hostname to your website including http(s)://
	SafariSiteOrigin NullableString `json:"safari_site_origin,omitempty"`
	SafariPushId NullableString `json:"safari_push_id,omitempty"`
	SafariIcon1616 *string `json:"safari_icon_16_16,omitempty"`
	SafariIcon3232 *string `json:"safari_icon_32_32,omitempty"`
	SafariIcon6464 *string `json:"safari_icon_64_64,omitempty"`
	SafariIcon128128 *string `json:"safari_icon_128_128,omitempty"`
	// Safari: A url for a 256x256 png notification icon. This is the only Safari icon URL you need to provide.
	SafariIcon256256 *string `json:"safari_icon_256_256,omitempty"`
	// All Browsers (Recommended): The Site Name. Requires both chrome_web_origin and safari_site_origin to be set to add or update it.
	SiteName NullableString `json:"site_name,omitempty"`
	BasicAuthKey NullableString `json:"basic_auth_key,omitempty"`
	// The Id of the Organization you would like to add this app to.
	OrganizationId *string `json:"organization_id,omitempty"`
	// iOS: Notification data (additional data) values will be added to the root of the apns payload when sent to the device.  Ignore if you're not using any other plugins, or not using OneSignal SDK methods to read the payload.
	AdditionalDataIsRootPayload *bool `json:"additional_data_is_root_payload,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _App App

// NewApp instantiates a new App object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApp() *App {
	this := App{}
	return &this
}

// NewAppWithDefaults instantiates a new App object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppWithDefaults() *App {
	this := App{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *App) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *App) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *App) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *App) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *App) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *App) SetName(v string) {
	o.Name = &v
}

// GetPlayers returns the Players field value if set, zero value otherwise.
func (o *App) GetPlayers() int32 {
	if o == nil || o.Players == nil {
		var ret int32
		return ret
	}
	return *o.Players
}

// GetPlayersOk returns a tuple with the Players field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetPlayersOk() (*int32, bool) {
	if o == nil || o.Players == nil {
		return nil, false
	}
	return o.Players, true
}

// HasPlayers returns a boolean if a field has been set.
func (o *App) HasPlayers() bool {
	if o != nil && o.Players != nil {
		return true
	}

	return false
}

// SetPlayers gets a reference to the given int32 and assigns it to the Players field.
func (o *App) SetPlayers(v int32) {
	o.Players = &v
}

// GetMessageablePlayers returns the MessageablePlayers field value if set, zero value otherwise.
func (o *App) GetMessageablePlayers() int32 {
	if o == nil || o.MessageablePlayers == nil {
		var ret int32
		return ret
	}
	return *o.MessageablePlayers
}

// GetMessageablePlayersOk returns a tuple with the MessageablePlayers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetMessageablePlayersOk() (*int32, bool) {
	if o == nil || o.MessageablePlayers == nil {
		return nil, false
	}
	return o.MessageablePlayers, true
}

// HasMessageablePlayers returns a boolean if a field has been set.
func (o *App) HasMessageablePlayers() bool {
	if o != nil && o.MessageablePlayers != nil {
		return true
	}

	return false
}

// SetMessageablePlayers gets a reference to the given int32 and assigns it to the MessageablePlayers field.
func (o *App) SetMessageablePlayers(v int32) {
	o.MessageablePlayers = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *App) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *App) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *App) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *App) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *App) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *App) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetAndroidGcmSenderId returns the AndroidGcmSenderId field value if set, zero value otherwise.
func (o *App) GetAndroidGcmSenderId() string {
	if o == nil || o.AndroidGcmSenderId == nil {
		var ret string
		return ret
	}
	return *o.AndroidGcmSenderId
}

// GetAndroidGcmSenderIdOk returns a tuple with the AndroidGcmSenderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetAndroidGcmSenderIdOk() (*string, bool) {
	if o == nil || o.AndroidGcmSenderId == nil {
		return nil, false
	}
	return o.AndroidGcmSenderId, true
}

// HasAndroidGcmSenderId returns a boolean if a field has been set.
func (o *App) HasAndroidGcmSenderId() bool {
	if o != nil && o.AndroidGcmSenderId != nil {
		return true
	}

	return false
}

// SetAndroidGcmSenderId gets a reference to the given string and assigns it to the AndroidGcmSenderId field.
func (o *App) SetAndroidGcmSenderId(v string) {
	o.AndroidGcmSenderId = &v
}

// GetGcmKey returns the GcmKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetGcmKey() string {
	if o == nil || o.GcmKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.GcmKey.Get()
}

// GetGcmKeyOk returns a tuple with the GcmKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetGcmKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GcmKey.Get(), o.GcmKey.IsSet()
}

// HasGcmKey returns a boolean if a field has been set.
func (o *App) HasGcmKey() bool {
	if o != nil && o.GcmKey.IsSet() {
		return true
	}

	return false
}

// SetGcmKey gets a reference to the given NullableString and assigns it to the GcmKey field.
func (o *App) SetGcmKey(v string) {
	o.GcmKey.Set(&v)
}
// SetGcmKeyNil sets the value for GcmKey to be an explicit nil
func (o *App) SetGcmKeyNil() {
	o.GcmKey.Set(nil)
}

// UnsetGcmKey ensures that no value is present for GcmKey, not even an explicit nil
func (o *App) UnsetGcmKey() {
	o.GcmKey.Unset()
}

// GetChromeWebOrigin returns the ChromeWebOrigin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetChromeWebOrigin() string {
	if o == nil || o.ChromeWebOrigin.Get() == nil {
		var ret string
		return ret
	}
	return *o.ChromeWebOrigin.Get()
}

// GetChromeWebOriginOk returns a tuple with the ChromeWebOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetChromeWebOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChromeWebOrigin.Get(), o.ChromeWebOrigin.IsSet()
}

// HasChromeWebOrigin returns a boolean if a field has been set.
func (o *App) HasChromeWebOrigin() bool {
	if o != nil && o.ChromeWebOrigin.IsSet() {
		return true
	}

	return false
}

// SetChromeWebOrigin gets a reference to the given NullableString and assigns it to the ChromeWebOrigin field.
func (o *App) SetChromeWebOrigin(v string) {
	o.ChromeWebOrigin.Set(&v)
}
// SetChromeWebOriginNil sets the value for ChromeWebOrigin to be an explicit nil
func (o *App) SetChromeWebOriginNil() {
	o.ChromeWebOrigin.Set(nil)
}

// UnsetChromeWebOrigin ensures that no value is present for ChromeWebOrigin, not even an explicit nil
func (o *App) UnsetChromeWebOrigin() {
	o.ChromeWebOrigin.Unset()
}

// GetChromeKey returns the ChromeKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetChromeKey() string {
	if o == nil || o.ChromeKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.ChromeKey.Get()
}

// GetChromeKeyOk returns a tuple with the ChromeKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetChromeKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChromeKey.Get(), o.ChromeKey.IsSet()
}

// HasChromeKey returns a boolean if a field has been set.
func (o *App) HasChromeKey() bool {
	if o != nil && o.ChromeKey.IsSet() {
		return true
	}

	return false
}

// SetChromeKey gets a reference to the given NullableString and assigns it to the ChromeKey field.
func (o *App) SetChromeKey(v string) {
	o.ChromeKey.Set(&v)
}
// SetChromeKeyNil sets the value for ChromeKey to be an explicit nil
func (o *App) SetChromeKeyNil() {
	o.ChromeKey.Set(nil)
}

// UnsetChromeKey ensures that no value is present for ChromeKey, not even an explicit nil
func (o *App) UnsetChromeKey() {
	o.ChromeKey.Unset()
}

// GetChromeWebDefaultNotificationIcon returns the ChromeWebDefaultNotificationIcon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetChromeWebDefaultNotificationIcon() string {
	if o == nil || o.ChromeWebDefaultNotificationIcon.Get() == nil {
		var ret string
		return ret
	}
	return *o.ChromeWebDefaultNotificationIcon.Get()
}

// GetChromeWebDefaultNotificationIconOk returns a tuple with the ChromeWebDefaultNotificationIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetChromeWebDefaultNotificationIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChromeWebDefaultNotificationIcon.Get(), o.ChromeWebDefaultNotificationIcon.IsSet()
}

// HasChromeWebDefaultNotificationIcon returns a boolean if a field has been set.
func (o *App) HasChromeWebDefaultNotificationIcon() bool {
	if o != nil && o.ChromeWebDefaultNotificationIcon.IsSet() {
		return true
	}

	return false
}

// SetChromeWebDefaultNotificationIcon gets a reference to the given NullableString and assigns it to the ChromeWebDefaultNotificationIcon field.
func (o *App) SetChromeWebDefaultNotificationIcon(v string) {
	o.ChromeWebDefaultNotificationIcon.Set(&v)
}
// SetChromeWebDefaultNotificationIconNil sets the value for ChromeWebDefaultNotificationIcon to be an explicit nil
func (o *App) SetChromeWebDefaultNotificationIconNil() {
	o.ChromeWebDefaultNotificationIcon.Set(nil)
}

// UnsetChromeWebDefaultNotificationIcon ensures that no value is present for ChromeWebDefaultNotificationIcon, not even an explicit nil
func (o *App) UnsetChromeWebDefaultNotificationIcon() {
	o.ChromeWebDefaultNotificationIcon.Unset()
}

// GetChromeWebSubDomain returns the ChromeWebSubDomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetChromeWebSubDomain() string {
	if o == nil || o.ChromeWebSubDomain.Get() == nil {
		var ret string
		return ret
	}
	return *o.ChromeWebSubDomain.Get()
}

// GetChromeWebSubDomainOk returns a tuple with the ChromeWebSubDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetChromeWebSubDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChromeWebSubDomain.Get(), o.ChromeWebSubDomain.IsSet()
}

// HasChromeWebSubDomain returns a boolean if a field has been set.
func (o *App) HasChromeWebSubDomain() bool {
	if o != nil && o.ChromeWebSubDomain.IsSet() {
		return true
	}

	return false
}

// SetChromeWebSubDomain gets a reference to the given NullableString and assigns it to the ChromeWebSubDomain field.
func (o *App) SetChromeWebSubDomain(v string) {
	o.ChromeWebSubDomain.Set(&v)
}
// SetChromeWebSubDomainNil sets the value for ChromeWebSubDomain to be an explicit nil
func (o *App) SetChromeWebSubDomainNil() {
	o.ChromeWebSubDomain.Set(nil)
}

// UnsetChromeWebSubDomain ensures that no value is present for ChromeWebSubDomain, not even an explicit nil
func (o *App) UnsetChromeWebSubDomain() {
	o.ChromeWebSubDomain.Unset()
}

// GetApnsEnv returns the ApnsEnv field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetApnsEnv() string {
	if o == nil || o.ApnsEnv.Get() == nil {
		var ret string
		return ret
	}
	return *o.ApnsEnv.Get()
}

// GetApnsEnvOk returns a tuple with the ApnsEnv field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetApnsEnvOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApnsEnv.Get(), o.ApnsEnv.IsSet()
}

// HasApnsEnv returns a boolean if a field has been set.
func (o *App) HasApnsEnv() bool {
	if o != nil && o.ApnsEnv.IsSet() {
		return true
	}

	return false
}

// SetApnsEnv gets a reference to the given NullableString and assigns it to the ApnsEnv field.
func (o *App) SetApnsEnv(v string) {
	o.ApnsEnv.Set(&v)
}
// SetApnsEnvNil sets the value for ApnsEnv to be an explicit nil
func (o *App) SetApnsEnvNil() {
	o.ApnsEnv.Set(nil)
}

// UnsetApnsEnv ensures that no value is present for ApnsEnv, not even an explicit nil
func (o *App) UnsetApnsEnv() {
	o.ApnsEnv.Unset()
}

// GetApnsP12 returns the ApnsP12 field value if set, zero value otherwise.
func (o *App) GetApnsP12() string {
	if o == nil || o.ApnsP12 == nil {
		var ret string
		return ret
	}
	return *o.ApnsP12
}

// GetApnsP12Ok returns a tuple with the ApnsP12 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetApnsP12Ok() (*string, bool) {
	if o == nil || o.ApnsP12 == nil {
		return nil, false
	}
	return o.ApnsP12, true
}

// HasApnsP12 returns a boolean if a field has been set.
func (o *App) HasApnsP12() bool {
	if o != nil && o.ApnsP12 != nil {
		return true
	}

	return false
}

// SetApnsP12 gets a reference to the given string and assigns it to the ApnsP12 field.
func (o *App) SetApnsP12(v string) {
	o.ApnsP12 = &v
}

// GetApnsP12Password returns the ApnsP12Password field value if set, zero value otherwise.
func (o *App) GetApnsP12Password() string {
	if o == nil || o.ApnsP12Password == nil {
		var ret string
		return ret
	}
	return *o.ApnsP12Password
}

// GetApnsP12PasswordOk returns a tuple with the ApnsP12Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetApnsP12PasswordOk() (*string, bool) {
	if o == nil || o.ApnsP12Password == nil {
		return nil, false
	}
	return o.ApnsP12Password, true
}

// HasApnsP12Password returns a boolean if a field has been set.
func (o *App) HasApnsP12Password() bool {
	if o != nil && o.ApnsP12Password != nil {
		return true
	}

	return false
}

// SetApnsP12Password gets a reference to the given string and assigns it to the ApnsP12Password field.
func (o *App) SetApnsP12Password(v string) {
	o.ApnsP12Password = &v
}

// GetApnsCertificates returns the ApnsCertificates field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetApnsCertificates() string {
	if o == nil || o.ApnsCertificates.Get() == nil {
		var ret string
		return ret
	}
	return *o.ApnsCertificates.Get()
}

// GetApnsCertificatesOk returns a tuple with the ApnsCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetApnsCertificatesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApnsCertificates.Get(), o.ApnsCertificates.IsSet()
}

// HasApnsCertificates returns a boolean if a field has been set.
func (o *App) HasApnsCertificates() bool {
	if o != nil && o.ApnsCertificates.IsSet() {
		return true
	}

	return false
}

// SetApnsCertificates gets a reference to the given NullableString and assigns it to the ApnsCertificates field.
func (o *App) SetApnsCertificates(v string) {
	o.ApnsCertificates.Set(&v)
}
// SetApnsCertificatesNil sets the value for ApnsCertificates to be an explicit nil
func (o *App) SetApnsCertificatesNil() {
	o.ApnsCertificates.Set(nil)
}

// UnsetApnsCertificates ensures that no value is present for ApnsCertificates, not even an explicit nil
func (o *App) UnsetApnsCertificates() {
	o.ApnsCertificates.Unset()
}

// GetSafariApnsCertificates returns the SafariApnsCertificates field value if set, zero value otherwise.
func (o *App) GetSafariApnsCertificates() string {
	if o == nil || o.SafariApnsCertificates == nil {
		var ret string
		return ret
	}
	return *o.SafariApnsCertificates
}

// GetSafariApnsCertificatesOk returns a tuple with the SafariApnsCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetSafariApnsCertificatesOk() (*string, bool) {
	if o == nil || o.SafariApnsCertificates == nil {
		return nil, false
	}
	return o.SafariApnsCertificates, true
}

// HasSafariApnsCertificates returns a boolean if a field has been set.
func (o *App) HasSafariApnsCertificates() bool {
	if o != nil && o.SafariApnsCertificates != nil {
		return true
	}

	return false
}

// SetSafariApnsCertificates gets a reference to the given string and assigns it to the SafariApnsCertificates field.
func (o *App) SetSafariApnsCertificates(v string) {
	o.SafariApnsCertificates = &v
}

// GetSafariApnsP12 returns the SafariApnsP12 field value if set, zero value otherwise.
func (o *App) GetSafariApnsP12() string {
	if o == nil || o.SafariApnsP12 == nil {
		var ret string
		return ret
	}
	return *o.SafariApnsP12
}

// GetSafariApnsP12Ok returns a tuple with the SafariApnsP12 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetSafariApnsP12Ok() (*string, bool) {
	if o == nil || o.SafariApnsP12 == nil {
		return nil, false
	}
	return o.SafariApnsP12, true
}

// HasSafariApnsP12 returns a boolean if a field has been set.
func (o *App) HasSafariApnsP12() bool {
	if o != nil && o.SafariApnsP12 != nil {
		return true
	}

	return false
}

// SetSafariApnsP12 gets a reference to the given string and assigns it to the SafariApnsP12 field.
func (o *App) SetSafariApnsP12(v string) {
	o.SafariApnsP12 = &v
}

// GetSafariApnsP12Password returns the SafariApnsP12Password field value if set, zero value otherwise.
func (o *App) GetSafariApnsP12Password() string {
	if o == nil || o.SafariApnsP12Password == nil {
		var ret string
		return ret
	}
	return *o.SafariApnsP12Password
}

// GetSafariApnsP12PasswordOk returns a tuple with the SafariApnsP12Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetSafariApnsP12PasswordOk() (*string, bool) {
	if o == nil || o.SafariApnsP12Password == nil {
		return nil, false
	}
	return o.SafariApnsP12Password, true
}

// HasSafariApnsP12Password returns a boolean if a field has been set.
func (o *App) HasSafariApnsP12Password() bool {
	if o != nil && o.SafariApnsP12Password != nil {
		return true
	}

	return false
}

// SetSafariApnsP12Password gets a reference to the given string and assigns it to the SafariApnsP12Password field.
func (o *App) SetSafariApnsP12Password(v string) {
	o.SafariApnsP12Password = &v
}

// GetApnsKeyId returns the ApnsKeyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetApnsKeyId() string {
	if o == nil || o.ApnsKeyId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ApnsKeyId.Get()
}

// GetApnsKeyIdOk returns a tuple with the ApnsKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetApnsKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApnsKeyId.Get(), o.ApnsKeyId.IsSet()
}

// HasApnsKeyId returns a boolean if a field has been set.
func (o *App) HasApnsKeyId() bool {
	if o != nil && o.ApnsKeyId.IsSet() {
		return true
	}

	return false
}

// SetApnsKeyId gets a reference to the given NullableString and assigns it to the ApnsKeyId field.
func (o *App) SetApnsKeyId(v string) {
	o.ApnsKeyId.Set(&v)
}
// SetApnsKeyIdNil sets the value for ApnsKeyId to be an explicit nil
func (o *App) SetApnsKeyIdNil() {
	o.ApnsKeyId.Set(nil)
}

// UnsetApnsKeyId ensures that no value is present for ApnsKeyId, not even an explicit nil
func (o *App) UnsetApnsKeyId() {
	o.ApnsKeyId.Unset()
}

// GetApnsTeamId returns the ApnsTeamId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetApnsTeamId() string {
	if o == nil || o.ApnsTeamId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ApnsTeamId.Get()
}

// GetApnsTeamIdOk returns a tuple with the ApnsTeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetApnsTeamIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApnsTeamId.Get(), o.ApnsTeamId.IsSet()
}

// HasApnsTeamId returns a boolean if a field has been set.
func (o *App) HasApnsTeamId() bool {
	if o != nil && o.ApnsTeamId.IsSet() {
		return true
	}

	return false
}

// SetApnsTeamId gets a reference to the given NullableString and assigns it to the ApnsTeamId field.
func (o *App) SetApnsTeamId(v string) {
	o.ApnsTeamId.Set(&v)
}
// SetApnsTeamIdNil sets the value for ApnsTeamId to be an explicit nil
func (o *App) SetApnsTeamIdNil() {
	o.ApnsTeamId.Set(nil)
}

// UnsetApnsTeamId ensures that no value is present for ApnsTeamId, not even an explicit nil
func (o *App) UnsetApnsTeamId() {
	o.ApnsTeamId.Unset()
}

// GetApnsBundleId returns the ApnsBundleId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetApnsBundleId() string {
	if o == nil || o.ApnsBundleId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ApnsBundleId.Get()
}

// GetApnsBundleIdOk returns a tuple with the ApnsBundleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetApnsBundleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApnsBundleId.Get(), o.ApnsBundleId.IsSet()
}

// HasApnsBundleId returns a boolean if a field has been set.
func (o *App) HasApnsBundleId() bool {
	if o != nil && o.ApnsBundleId.IsSet() {
		return true
	}

	return false
}

// SetApnsBundleId gets a reference to the given NullableString and assigns it to the ApnsBundleId field.
func (o *App) SetApnsBundleId(v string) {
	o.ApnsBundleId.Set(&v)
}
// SetApnsBundleIdNil sets the value for ApnsBundleId to be an explicit nil
func (o *App) SetApnsBundleIdNil() {
	o.ApnsBundleId.Set(nil)
}

// UnsetApnsBundleId ensures that no value is present for ApnsBundleId, not even an explicit nil
func (o *App) UnsetApnsBundleId() {
	o.ApnsBundleId.Unset()
}

// GetApnsP8 returns the ApnsP8 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetApnsP8() string {
	if o == nil || o.ApnsP8.Get() == nil {
		var ret string
		return ret
	}
	return *o.ApnsP8.Get()
}

// GetApnsP8Ok returns a tuple with the ApnsP8 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetApnsP8Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApnsP8.Get(), o.ApnsP8.IsSet()
}

// HasApnsP8 returns a boolean if a field has been set.
func (o *App) HasApnsP8() bool {
	if o != nil && o.ApnsP8.IsSet() {
		return true
	}

	return false
}

// SetApnsP8 gets a reference to the given NullableString and assigns it to the ApnsP8 field.
func (o *App) SetApnsP8(v string) {
	o.ApnsP8.Set(&v)
}
// SetApnsP8Nil sets the value for ApnsP8 to be an explicit nil
func (o *App) SetApnsP8Nil() {
	o.ApnsP8.Set(nil)
}

// UnsetApnsP8 ensures that no value is present for ApnsP8, not even an explicit nil
func (o *App) UnsetApnsP8() {
	o.ApnsP8.Unset()
}

// GetSafariSiteOrigin returns the SafariSiteOrigin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetSafariSiteOrigin() string {
	if o == nil || o.SafariSiteOrigin.Get() == nil {
		var ret string
		return ret
	}
	return *o.SafariSiteOrigin.Get()
}

// GetSafariSiteOriginOk returns a tuple with the SafariSiteOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetSafariSiteOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SafariSiteOrigin.Get(), o.SafariSiteOrigin.IsSet()
}

// HasSafariSiteOrigin returns a boolean if a field has been set.
func (o *App) HasSafariSiteOrigin() bool {
	if o != nil && o.SafariSiteOrigin.IsSet() {
		return true
	}

	return false
}

// SetSafariSiteOrigin gets a reference to the given NullableString and assigns it to the SafariSiteOrigin field.
func (o *App) SetSafariSiteOrigin(v string) {
	o.SafariSiteOrigin.Set(&v)
}
// SetSafariSiteOriginNil sets the value for SafariSiteOrigin to be an explicit nil
func (o *App) SetSafariSiteOriginNil() {
	o.SafariSiteOrigin.Set(nil)
}

// UnsetSafariSiteOrigin ensures that no value is present for SafariSiteOrigin, not even an explicit nil
func (o *App) UnsetSafariSiteOrigin() {
	o.SafariSiteOrigin.Unset()
}

// GetSafariPushId returns the SafariPushId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetSafariPushId() string {
	if o == nil || o.SafariPushId.Get() == nil {
		var ret string
		return ret
	}
	return *o.SafariPushId.Get()
}

// GetSafariPushIdOk returns a tuple with the SafariPushId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetSafariPushIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SafariPushId.Get(), o.SafariPushId.IsSet()
}

// HasSafariPushId returns a boolean if a field has been set.
func (o *App) HasSafariPushId() bool {
	if o != nil && o.SafariPushId.IsSet() {
		return true
	}

	return false
}

// SetSafariPushId gets a reference to the given NullableString and assigns it to the SafariPushId field.
func (o *App) SetSafariPushId(v string) {
	o.SafariPushId.Set(&v)
}
// SetSafariPushIdNil sets the value for SafariPushId to be an explicit nil
func (o *App) SetSafariPushIdNil() {
	o.SafariPushId.Set(nil)
}

// UnsetSafariPushId ensures that no value is present for SafariPushId, not even an explicit nil
func (o *App) UnsetSafariPushId() {
	o.SafariPushId.Unset()
}

// GetSafariIcon1616 returns the SafariIcon1616 field value if set, zero value otherwise.
func (o *App) GetSafariIcon1616() string {
	if o == nil || o.SafariIcon1616 == nil {
		var ret string
		return ret
	}
	return *o.SafariIcon1616
}

// GetSafariIcon1616Ok returns a tuple with the SafariIcon1616 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetSafariIcon1616Ok() (*string, bool) {
	if o == nil || o.SafariIcon1616 == nil {
		return nil, false
	}
	return o.SafariIcon1616, true
}

// HasSafariIcon1616 returns a boolean if a field has been set.
func (o *App) HasSafariIcon1616() bool {
	if o != nil && o.SafariIcon1616 != nil {
		return true
	}

	return false
}

// SetSafariIcon1616 gets a reference to the given string and assigns it to the SafariIcon1616 field.
func (o *App) SetSafariIcon1616(v string) {
	o.SafariIcon1616 = &v
}

// GetSafariIcon3232 returns the SafariIcon3232 field value if set, zero value otherwise.
func (o *App) GetSafariIcon3232() string {
	if o == nil || o.SafariIcon3232 == nil {
		var ret string
		return ret
	}
	return *o.SafariIcon3232
}

// GetSafariIcon3232Ok returns a tuple with the SafariIcon3232 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetSafariIcon3232Ok() (*string, bool) {
	if o == nil || o.SafariIcon3232 == nil {
		return nil, false
	}
	return o.SafariIcon3232, true
}

// HasSafariIcon3232 returns a boolean if a field has been set.
func (o *App) HasSafariIcon3232() bool {
	if o != nil && o.SafariIcon3232 != nil {
		return true
	}

	return false
}

// SetSafariIcon3232 gets a reference to the given string and assigns it to the SafariIcon3232 field.
func (o *App) SetSafariIcon3232(v string) {
	o.SafariIcon3232 = &v
}

// GetSafariIcon6464 returns the SafariIcon6464 field value if set, zero value otherwise.
func (o *App) GetSafariIcon6464() string {
	if o == nil || o.SafariIcon6464 == nil {
		var ret string
		return ret
	}
	return *o.SafariIcon6464
}

// GetSafariIcon6464Ok returns a tuple with the SafariIcon6464 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetSafariIcon6464Ok() (*string, bool) {
	if o == nil || o.SafariIcon6464 == nil {
		return nil, false
	}
	return o.SafariIcon6464, true
}

// HasSafariIcon6464 returns a boolean if a field has been set.
func (o *App) HasSafariIcon6464() bool {
	if o != nil && o.SafariIcon6464 != nil {
		return true
	}

	return false
}

// SetSafariIcon6464 gets a reference to the given string and assigns it to the SafariIcon6464 field.
func (o *App) SetSafariIcon6464(v string) {
	o.SafariIcon6464 = &v
}

// GetSafariIcon128128 returns the SafariIcon128128 field value if set, zero value otherwise.
func (o *App) GetSafariIcon128128() string {
	if o == nil || o.SafariIcon128128 == nil {
		var ret string
		return ret
	}
	return *o.SafariIcon128128
}

// GetSafariIcon128128Ok returns a tuple with the SafariIcon128128 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetSafariIcon128128Ok() (*string, bool) {
	if o == nil || o.SafariIcon128128 == nil {
		return nil, false
	}
	return o.SafariIcon128128, true
}

// HasSafariIcon128128 returns a boolean if a field has been set.
func (o *App) HasSafariIcon128128() bool {
	if o != nil && o.SafariIcon128128 != nil {
		return true
	}

	return false
}

// SetSafariIcon128128 gets a reference to the given string and assigns it to the SafariIcon128128 field.
func (o *App) SetSafariIcon128128(v string) {
	o.SafariIcon128128 = &v
}

// GetSafariIcon256256 returns the SafariIcon256256 field value if set, zero value otherwise.
func (o *App) GetSafariIcon256256() string {
	if o == nil || o.SafariIcon256256 == nil {
		var ret string
		return ret
	}
	return *o.SafariIcon256256
}

// GetSafariIcon256256Ok returns a tuple with the SafariIcon256256 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetSafariIcon256256Ok() (*string, bool) {
	if o == nil || o.SafariIcon256256 == nil {
		return nil, false
	}
	return o.SafariIcon256256, true
}

// HasSafariIcon256256 returns a boolean if a field has been set.
func (o *App) HasSafariIcon256256() bool {
	if o != nil && o.SafariIcon256256 != nil {
		return true
	}

	return false
}

// SetSafariIcon256256 gets a reference to the given string and assigns it to the SafariIcon256256 field.
func (o *App) SetSafariIcon256256(v string) {
	o.SafariIcon256256 = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetSiteName() string {
	if o == nil || o.SiteName.Get() == nil {
		var ret string
		return ret
	}
	return *o.SiteName.Get()
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetSiteNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SiteName.Get(), o.SiteName.IsSet()
}

// HasSiteName returns a boolean if a field has been set.
func (o *App) HasSiteName() bool {
	if o != nil && o.SiteName.IsSet() {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given NullableString and assigns it to the SiteName field.
func (o *App) SetSiteName(v string) {
	o.SiteName.Set(&v)
}
// SetSiteNameNil sets the value for SiteName to be an explicit nil
func (o *App) SetSiteNameNil() {
	o.SiteName.Set(nil)
}

// UnsetSiteName ensures that no value is present for SiteName, not even an explicit nil
func (o *App) UnsetSiteName() {
	o.SiteName.Unset()
}

// GetBasicAuthKey returns the BasicAuthKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetBasicAuthKey() string {
	if o == nil || o.BasicAuthKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.BasicAuthKey.Get()
}

// GetBasicAuthKeyOk returns a tuple with the BasicAuthKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetBasicAuthKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BasicAuthKey.Get(), o.BasicAuthKey.IsSet()
}

// HasBasicAuthKey returns a boolean if a field has been set.
func (o *App) HasBasicAuthKey() bool {
	if o != nil && o.BasicAuthKey.IsSet() {
		return true
	}

	return false
}

// SetBasicAuthKey gets a reference to the given NullableString and assigns it to the BasicAuthKey field.
func (o *App) SetBasicAuthKey(v string) {
	o.BasicAuthKey.Set(&v)
}
// SetBasicAuthKeyNil sets the value for BasicAuthKey to be an explicit nil
func (o *App) SetBasicAuthKeyNil() {
	o.BasicAuthKey.Set(nil)
}

// UnsetBasicAuthKey ensures that no value is present for BasicAuthKey, not even an explicit nil
func (o *App) UnsetBasicAuthKey() {
	o.BasicAuthKey.Unset()
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *App) GetOrganizationId() string {
	if o == nil || o.OrganizationId == nil {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetOrganizationIdOk() (*string, bool) {
	if o == nil || o.OrganizationId == nil {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *App) HasOrganizationId() bool {
	if o != nil && o.OrganizationId != nil {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *App) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetAdditionalDataIsRootPayload returns the AdditionalDataIsRootPayload field value if set, zero value otherwise.
func (o *App) GetAdditionalDataIsRootPayload() bool {
	if o == nil || o.AdditionalDataIsRootPayload == nil {
		var ret bool
		return ret
	}
	return *o.AdditionalDataIsRootPayload
}

// GetAdditionalDataIsRootPayloadOk returns a tuple with the AdditionalDataIsRootPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetAdditionalDataIsRootPayloadOk() (*bool, bool) {
	if o == nil || o.AdditionalDataIsRootPayload == nil {
		return nil, false
	}
	return o.AdditionalDataIsRootPayload, true
}

// HasAdditionalDataIsRootPayload returns a boolean if a field has been set.
func (o *App) HasAdditionalDataIsRootPayload() bool {
	if o != nil && o.AdditionalDataIsRootPayload != nil {
		return true
	}

	return false
}

// SetAdditionalDataIsRootPayload gets a reference to the given bool and assigns it to the AdditionalDataIsRootPayload field.
func (o *App) SetAdditionalDataIsRootPayload(v bool) {
	o.AdditionalDataIsRootPayload = &v
}

func (o App) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Players != nil {
		toSerialize["players"] = o.Players
	}
	if o.MessageablePlayers != nil {
		toSerialize["messageable_players"] = o.MessageablePlayers
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.AndroidGcmSenderId != nil {
		toSerialize["android_gcm_sender_id"] = o.AndroidGcmSenderId
	}
	if o.GcmKey.IsSet() {
		toSerialize["gcm_key"] = o.GcmKey.Get()
	}
	if o.ChromeWebOrigin.IsSet() {
		toSerialize["chrome_web_origin"] = o.ChromeWebOrigin.Get()
	}
	if o.ChromeKey.IsSet() {
		toSerialize["chrome_key"] = o.ChromeKey.Get()
	}
	if o.ChromeWebDefaultNotificationIcon.IsSet() {
		toSerialize["chrome_web_default_notification_icon"] = o.ChromeWebDefaultNotificationIcon.Get()
	}
	if o.ChromeWebSubDomain.IsSet() {
		toSerialize["chrome_web_sub_domain"] = o.ChromeWebSubDomain.Get()
	}
	if o.ApnsEnv.IsSet() {
		toSerialize["apns_env"] = o.ApnsEnv.Get()
	}
	if o.ApnsP12 != nil {
		toSerialize["apns_p12"] = o.ApnsP12
	}
	if o.ApnsP12Password != nil {
		toSerialize["apns_p12_password"] = o.ApnsP12Password
	}
	if o.ApnsCertificates.IsSet() {
		toSerialize["apns_certificates"] = o.ApnsCertificates.Get()
	}
	if o.SafariApnsCertificates != nil {
		toSerialize["safari_apns_certificates"] = o.SafariApnsCertificates
	}
	if o.SafariApnsP12 != nil {
		toSerialize["safari_apns_p12"] = o.SafariApnsP12
	}
	if o.SafariApnsP12Password != nil {
		toSerialize["safari_apns_p12_password"] = o.SafariApnsP12Password
	}
	if o.ApnsKeyId.IsSet() {
		toSerialize["apns_key_id"] = o.ApnsKeyId.Get()
	}
	if o.ApnsTeamId.IsSet() {
		toSerialize["apns_team_id"] = o.ApnsTeamId.Get()
	}
	if o.ApnsBundleId.IsSet() {
		toSerialize["apns_bundle_id"] = o.ApnsBundleId.Get()
	}
	if o.ApnsP8.IsSet() {
		toSerialize["apns_p8"] = o.ApnsP8.Get()
	}
	if o.SafariSiteOrigin.IsSet() {
		toSerialize["safari_site_origin"] = o.SafariSiteOrigin.Get()
	}
	if o.SafariPushId.IsSet() {
		toSerialize["safari_push_id"] = o.SafariPushId.Get()
	}
	if o.SafariIcon1616 != nil {
		toSerialize["safari_icon_16_16"] = o.SafariIcon1616
	}
	if o.SafariIcon3232 != nil {
		toSerialize["safari_icon_32_32"] = o.SafariIcon3232
	}
	if o.SafariIcon6464 != nil {
		toSerialize["safari_icon_64_64"] = o.SafariIcon6464
	}
	if o.SafariIcon128128 != nil {
		toSerialize["safari_icon_128_128"] = o.SafariIcon128128
	}
	if o.SafariIcon256256 != nil {
		toSerialize["safari_icon_256_256"] = o.SafariIcon256256
	}
	if o.SiteName.IsSet() {
		toSerialize["site_name"] = o.SiteName.Get()
	}
	if o.BasicAuthKey.IsSet() {
		toSerialize["basic_auth_key"] = o.BasicAuthKey.Get()
	}
	if o.OrganizationId != nil {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if o.AdditionalDataIsRootPayload != nil {
		toSerialize["additional_data_is_root_payload"] = o.AdditionalDataIsRootPayload
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *App) UnmarshalJSON(bytes []byte) (err error) {
	varApp := _App{}

	if err = json.Unmarshal(bytes, &varApp); err == nil {
		*o = App(varApp)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "players")
		delete(additionalProperties, "messageable_players")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "android_gcm_sender_id")
		delete(additionalProperties, "gcm_key")
		delete(additionalProperties, "chrome_web_origin")
		delete(additionalProperties, "chrome_key")
		delete(additionalProperties, "chrome_web_default_notification_icon")
		delete(additionalProperties, "chrome_web_sub_domain")
		delete(additionalProperties, "apns_env")
		delete(additionalProperties, "apns_p12")
		delete(additionalProperties, "apns_p12_password")
		delete(additionalProperties, "apns_certificates")
		delete(additionalProperties, "safari_apns_certificates")
		delete(additionalProperties, "safari_apns_p12")
		delete(additionalProperties, "safari_apns_p12_password")
		delete(additionalProperties, "apns_key_id")
		delete(additionalProperties, "apns_team_id")
		delete(additionalProperties, "apns_bundle_id")
		delete(additionalProperties, "apns_p8")
		delete(additionalProperties, "safari_site_origin")
		delete(additionalProperties, "safari_push_id")
		delete(additionalProperties, "safari_icon_16_16")
		delete(additionalProperties, "safari_icon_32_32")
		delete(additionalProperties, "safari_icon_64_64")
		delete(additionalProperties, "safari_icon_128_128")
		delete(additionalProperties, "safari_icon_256_256")
		delete(additionalProperties, "site_name")
		delete(additionalProperties, "basic_auth_key")
		delete(additionalProperties, "organization_id")
		delete(additionalProperties, "additional_data_is_root_payload")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApp struct {
	value *App
	isSet bool
}

func (v NullableApp) Get() *App {
	return v.value
}

func (v *NullableApp) Set(val *App) {
	v.value = val
	v.isSet = true
}

func (v NullableApp) IsSet() bool {
	return v.isSet
}

func (v *NullableApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApp(val *App) *NullableApp {
	return &NullableApp{value: val, isSet: true}
}

func (v NullableApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


