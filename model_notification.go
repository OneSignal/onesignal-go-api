/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.4.0
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
	"time"
)

// Notification struct for Notification
type Notification struct {
	// The segment names you want to target. Users in these segments will receive a notification. This targeting parameter is only compatible with excluded_segments. Example: [\"Active Users\", \"Inactive Users\"] 
	IncludedSegments []string `json:"included_segments,omitempty"`
	// Segment that will be excluded when sending. Users in these segments will not receive a notification, even if they were included in included_segments. This targeting parameter is only compatible with included_segments. Example: [\"Active Users\", \"Inactive Users\"] 
	ExcludedSegments []string `json:"excluded_segments,omitempty"`
	// Specific playerids to send your notification to. _Does not require API Auth Key. Do not combine with other targeting parameters. Not compatible with any other targeting parameters. Example: [\"1dd608f2-c6a1-11e3-851d-000c2940e62c\"] Limit of 2,000 entries per REST API call 
	// Deprecated
	IncludePlayerIds []string `json:"include_player_ids,omitempty"`
	// Target specific devices by custom user IDs assigned via API. Not compatible with any other targeting parameters Example: [\"custom-id-assigned-by-api\"] REQUIRED: REST API Key Authentication Limit of 2,000 entries per REST API call. Note: If targeting push, email, or sms subscribers with same ids, use with channel_for_external_user_ids to indicate you are sending a push or email or sms. 
	// Deprecated
	IncludeExternalUserIds []string `json:"include_external_user_ids,omitempty"`
	// Recommended for Sending Emails - Target specific email addresses. If an email does not correspond to an existing user, a new user will be created. Example: nick@catfac.ts Limit of 2,000 entries per REST API call 
	IncludeEmailTokens []string `json:"include_email_tokens,omitempty"`
	// Recommended for Sending SMS - Target specific phone numbers. The phone number should be in the E.164 format. Phone number should be an existing subscriber on OneSignal. Refer our docs to learn how to add phone numbers to OneSignal. Example phone number: +1999999999 Limit of 2,000 entries per REST API call 
	IncludePhoneNumbers []string `json:"include_phone_numbers,omitempty"`
	// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using iOS device tokens. Warning: Only works with Production tokens. All non-alphanumeric characters must be removed from each token. If a token does not correspond to an existing user, a new user will be created. Example: ce777617da7f548fe7a9ab6febb56cf39fba6d38203... Limit of 2,000 entries per REST API call 
	IncludeIosTokens []string `json:"include_ios_tokens,omitempty"`
	// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Windows URIs. If a token does not correspond to an existing user, a new user will be created. Example: http://s.notify.live.net/u/1/bn1/HmQAAACPaLDr-... Limit of 2,000 entries per REST API call 
	IncludeWpWnsUris []string `json:"include_wp_wns_uris,omitempty"`
	// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Amazon ADM registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: amzn1.adm-registration.v1.XpvSSUk0Rc3hTVVV... Limit of 2,000 entries per REST API call 
	IncludeAmazonRegIds []string `json:"include_amazon_reg_ids,omitempty"`
	// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Chrome App registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: APA91bEeiUeSukAAUdnw3O2RB45FWlSpgJ7Ji_... Limit of 2,000 entries per REST API call 
	IncludeChromeRegIds []string `json:"include_chrome_reg_ids,omitempty"`
	// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Chrome Web Push registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: APA91bEeiUeSukAAUdnw3O2RB45FWlSpgJ7Ji_... Limit of 2,000 entries per REST API call 
	IncludeChromeWebRegIds []string `json:"include_chrome_web_reg_ids,omitempty"`
	// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Android device registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: APA91bEeiUeSukAAUdnw3O2RB45FWlSpgJ7Ji_... Limit of 2,000 entries per REST API call 
	IncludeAndroidRegIds []string `json:"include_android_reg_ids,omitempty"`
	IncludeAliases NullablePlayerNotificationTargetIncludeAliases `json:"include_aliases,omitempty"`
	TargetChannel *string `json:"target_channel,omitempty"`
	Id *string `json:"id,omitempty"`
	Value *int32 `json:"value,omitempty"`
	// Required for SMS Messages. An identifier for tracking message within the OneSignal dashboard or export analytics. Not shown to end user.
	Name NullableString `json:"name,omitempty"`
	Aggregation *string `json:"aggregation,omitempty"`
	// Indicates whether to send to all devices registered under your app's Apple iOS platform.
	IsIos NullableBool `json:"isIos,omitempty"`
	// Indicates whether to send to all devices registered under your app's Google Android platform.
	IsAndroid NullableBool `json:"isAndroid,omitempty"`
	// Indicates whether to send to all devices registered under your app's Huawei Android platform.
	IsHuawei NullableBool `json:"isHuawei,omitempty"`
	// Indicates whether to send to all subscribed web browser users, including Chrome, Firefox, and Safari. You may use this instead as a combined flag instead of separately enabling isChromeWeb, isFirefox, and isSafari, though the three options are equivalent to this one. 
	IsAnyWeb NullableBool `json:"isAnyWeb,omitempty"`
	// Indicates whether to send to all Google Chrome, Chrome on Android, and Mozilla Firefox users registered under your Chrome & Firefox web push platform.
	IsChromeWeb NullableBool `json:"isChromeWeb,omitempty"`
	// Indicates whether to send to all Mozilla Firefox desktop users registered under your Firefox web push platform.
	IsFirefox NullableBool `json:"isFirefox,omitempty"`
	// Does not support iOS Safari. Indicates whether to send to all Apple's Safari desktop users registered under your Safari web push platform. Read more iOS Safari
	IsSafari NullableBool `json:"isSafari,omitempty"`
	// Indicates whether to send to all devices registered under your app's Windows platform.
	IsWPWNS NullableBool `json:"isWP_WNS,omitempty"`
	// Indicates whether to send to all devices registered under your app's Amazon Fire platform.
	IsAdm NullableBool `json:"isAdm,omitempty"`
	// This flag is not used for web push Please see isChromeWeb for sending to web push users. This flag only applies to Google Chrome Apps & Extensions. Indicates whether to send to all devices registered under your app's Google Chrome Apps & Extension platform. 
	IsChrome NullableBool `json:"isChrome,omitempty"`
	// Indicates if the message type when targeting with include_external_user_ids for cases where an email, sms, and/or push subscribers have the same external user id. Example: Use the string \"push\" to indicate you are sending a push notification or the string \"email\"for sending emails or \"sms\"for sending SMS. 
	ChannelForExternalUserIds *string `json:"channel_for_external_user_ids,omitempty"`
	// Required: Your OneSignal Application ID, which can be found in Keys & IDs. It is a UUID and looks similar to 8250eaf6-1a58-489e-b136-7c74a864b434. 
	AppId string `json:"app_id"`
	// [DEPRECATED] Correlation and idempotency key. A request received with this parameter will first look for another notification with the same external_id. If one exists, a notification will not be sent, and result of the previous operation will instead be returned. Therefore, if you plan on using this feature, it's important to use a good source of randomness to generate the UUID passed here. This key is only idempotent for 30 days. After 30 days, the notification could be removed from our system and a notification with the same external_id will be sent again.   See Idempotent Notification Requests for more details writeOnly: true 
	// Deprecated
	ExternalId NullableString `json:"external_id,omitempty"`
	// Correlation and idempotency key. A request received with this parameter will first look for another notification with the same idempotency key. If one exists, a notification will not be sent, and result of the previous operation will instead be returned. Therefore, if you plan on using this feature, it's important to use a good source of randomness to generate the UUID passed here. This key is only idempotent for 30 days. After 30 days, the notification could be removed from our system and a notification with the same idempotency key will be sent again.   See Idempotent Notification Requests for more details writeOnly: true 
	IdempotencyKey NullableString `json:"idempotency_key,omitempty"`
	Contents NullableStringMap `json:"contents,omitempty"`
	Headings NullableStringMap `json:"headings,omitempty"`
	Subtitle NullableStringMap `json:"subtitle,omitempty"`
	// Channel: Push Notifications Platform: Huawei A custom map of data that is passed back to your app. Same as using Additional Data within the dashboard. Can use up to 2048 bytes of data. Example: {\"abc\": 123, \"foo\": \"bar\", \"event_performed\": true, \"amount\": 12.1} 
	Data map[string]interface{} `json:"data,omitempty"`
	// Channel: Push Notifications Platform: Huawei Use \"data\" or \"message\" depending on the type of notification you are sending. More details in Data & Background Notifications. 
	HuaweiMsgType NullableString `json:"huawei_msg_type,omitempty"`
	// Channel: Push Notifications Platform: All The URL to open in the browser when a user clicks on the notification. Note: iOS needs https or updated NSAppTransportSecurity in plist This field supports inline substitutions. Omit if including web_url or app_url Example: https://onesignal.com 
	Url NullableString `json:"url,omitempty"`
	// Channel: Push Notifications Platform: All Browsers Same as url but only sent to web push platforms. Including Chrome, Firefox, Safari, Opera, etc. Example: https://onesignal.com 
	WebUrl NullableString `json:"web_url,omitempty"`
	// Channel: Push Notifications Platform: All Browsers Same as url but only sent to web push platforms. Including iOS, Android, macOS, Windows, ChromeApps, etc. Example: https://onesignal.com 
	AppUrl NullableString `json:"app_url,omitempty"`
	// Channel: Push Notifications Platform: iOS 10+ Adds media attachments to notifications. Set as JSON object, key as a media id of your choice and the value as a valid local filename or URL. User must press and hold on the notification to view. Do not set mutable_content to download attachments. The OneSignal SDK does this automatically Example: {\"id1\": \"https://domain.com/image.jpg\"} 
	IosAttachments map[string]interface{} `json:"ios_attachments,omitempty"`
	// Channel: Push Notifications Platform: All Use a template you setup on our dashboard. The template_id is the UUID found in the URL when viewing a template on our dashboard. Example: be4a8044-bbd6-11e4-a581-000c2940e62c 
	TemplateId NullableString `json:"template_id,omitempty"`
	// Channel: Push Notifications Platform: iOS Sending true wakes your app from background to run custom native code (Apple interprets this as content-available=1). Note: Not applicable if the app is in the \"force-quit\" state (i.e app was swiped away). Omit the contents field to prevent displaying a visible notification. 
	ContentAvailable NullableBool `json:"content_available,omitempty"`
	// Channel: Push Notifications Platform: iOS 10+ Always defaults to true and cannot be turned off. Allows tracking of notification receives and changing of the notification content in your app before it is displayed. Triggers didReceive(_:withContentHandler:) on your UNNotificationServiceExtension. 
	MutableContent *bool `json:"mutable_content,omitempty"`
	// Channel: Push Notifications Platform: iOS 13+ Use to target a specific experience in your App Clip, or to target your notification to a specific window in a multi-scene App. 
	TargetContentIdentifier NullableString `json:"target_content_identifier,omitempty"`
	// Channel: Push Notifications Platform: Android Picture to display in the expanded view. Can be a drawable resource name or a URL. 
	BigPicture NullableString `json:"big_picture,omitempty"`
	// Channel: Push Notifications Platform: Huawei Picture to display in the expanded view. Can be a drawable resource name or a URL. 
	HuaweiBigPicture NullableString `json:"huawei_big_picture,omitempty"`
	// Channel: Push Notifications Platform: Amazon Picture to display in the expanded view. Can be a drawable resource name or a URL. 
	AdmBigPicture NullableString `json:"adm_big_picture,omitempty"`
	// Channel: Push Notifications Platform: ChromeApp Large picture to display below the notification text. Must be a local URL. 
	ChromeBigPicture NullableString `json:"chrome_big_picture,omitempty"`
	// Channel: Push Notifications Platform: Chrome 56+ Sets the web push notification's large image to be shown below the notification's title and text. Please see Web Push Notification Icons. 
	ChromeWebImage NullableString `json:"chrome_web_image,omitempty"`
	// Channel: Push Notifications Platform: iOS 8.0+, Android 4.1+, and derivatives like Amazon Buttons to add to the notification. Icon only works for Android. Buttons show in reverse order of array position i.e. Last item in array shows as first button on device. Example: [{\"id\": \"id2\", \"text\": \"second button\", \"icon\": \"ic_menu_share\"}, {\"id\": \"id1\", \"text\": \"first button\", \"icon\": \"ic_menu_send\"}] 
	Buttons []Button `json:"buttons,omitempty"`
	// Channel: Push Notifications Platform: Chrome 48+ Add action buttons to the notification. The id field is required. Example: [{\"id\": \"like-button\", \"text\": \"Like\", \"icon\": \"http://i.imgur.com/N8SN8ZS.png\", \"url\": \"https://yoursite.com\"}, {\"id\": \"read-more-button\", \"text\": \"Read more\", \"icon\": \"http://i.imgur.com/MIxJp1L.png\", \"url\": \"https://yoursite.com\"}] 
	WebButtons []Button `json:"web_buttons,omitempty"`
	// Channel: Push Notifications Platform: iOS Category APS payload, use with registerUserNotificationSettings:categories in your Objective-C / Swift code. Example: calendar category which contains actions like accept and decline iOS 10+ This will trigger your UNNotificationContentExtension whose ID matches this category. 
	IosCategory NullableString `json:"ios_category,omitempty"`
	// Channel: Push Notifications Platform: Android The Android Oreo Notification Category to send the notification under. See the Category documentation on creating one and getting it's id. 
	AndroidChannelId *string `json:"android_channel_id,omitempty"`
	// Channel: Push Notifications Platform: Huawei The Android Oreo Notification Category to send the notification under. See the Category documentation on creating one and getting it's id. 
	HuaweiChannelId NullableString `json:"huawei_channel_id,omitempty"`
	// Channel: Push Notifications Platform: Android Use this if you have client side Android Oreo Channels you have already defined in your app with code. 
	ExistingAndroidChannelId *string `json:"existing_android_channel_id,omitempty"`
	// Channel: Push Notifications Platform: Huawei Use this if you have client side Android Oreo Channels you have already defined in your app with code. 
	HuaweiExistingChannelId NullableString `json:"huawei_existing_channel_id,omitempty"`
	AndroidBackgroundLayout *BasicNotificationAllOfAndroidBackgroundLayout `json:"android_background_layout,omitempty"`
	// Channel: Push Notifications Platform: Android Icon shown in the status bar and on the top left of the notification. If not set a bell icon will be used or ic_stat_onesignal_default if you have set this resource name. See: How to create small icons 
	SmallIcon NullableString `json:"small_icon,omitempty"`
	// Channel: Push Notifications Platform: Huawei Icon shown in the status bar and on the top left of the notification. Use an Android resource path (E.g. /drawable/small_icon). Defaults to your app icon if not set. 
	HuaweiSmallIcon NullableString `json:"huawei_small_icon,omitempty"`
	// Channel: Push Notifications Platform: Android Can be a drawable resource name or a URL. See: How to create large icons 
	LargeIcon NullableString `json:"large_icon,omitempty"`
	// Channel: Push Notifications Platform: Huawei Can be a drawable resource name or a URL. See: How to create large icons 
	HuaweiLargeIcon NullableString `json:"huawei_large_icon,omitempty"`
	// Channel: Push Notifications Platform: Amazon If not set a bell icon will be used or ic_stat_onesignal_default if you have set this resource name. See: How to create small icons 
	AdmSmallIcon NullableString `json:"adm_small_icon,omitempty"`
	// Channel: Push Notifications Platform: Amazon If blank the small_icon is used. Can be a drawable resource name or a URL. See: How to create large icons 
	AdmLargeIcon NullableString `json:"adm_large_icon,omitempty"`
	// Channel: Push Notifications Platform: Chrome Sets the web push notification's icon. An image URL linking to a valid image. Common image types are supported; GIF will not animate. We recommend 256x256 (at least 80x80) to display well on high DPI devices. Firefox will also use this icon, unless you specify firefox_icon. 
	ChromeWebIcon NullableString `json:"chrome_web_icon,omitempty"`
	// Channel: Push Notifications Platform: Chrome Sets the web push notification icon for Android devices in the notification shade. Please see Web Push Notification Badge. 
	ChromeWebBadge NullableString `json:"chrome_web_badge,omitempty"`
	// Channel: Push Notifications Platform: Firefox Not recommended Few people need to set Firefox-specific icons. We recommend setting chrome_web_icon instead, which Firefox will also use. Sets the web push notification's icon for Firefox. An image URL linking to a valid image. Common image types are supported; GIF will not animate. We recommend 256x256 (at least 80x80) to display well on high DPI devices. 
	FirefoxIcon NullableString `json:"firefox_icon,omitempty"`
	// Channel: Push Notifications Platform: ChromeApp This flag is not used for web push For web push, please see chrome_web_icon instead. The local URL to an icon to use. If blank, the app icon will be used. 
	ChromeIcon NullableString `json:"chrome_icon,omitempty"`
	// Channel: Push Notifications Platform: iOS Sound file that is included in your app to play instead of the default device notification sound. Pass nil to disable vibration and sound for the notification. Example: \"notification.wav\" 
	IosSound NullableString `json:"ios_sound,omitempty"`
	// Channel: Push Notifications Platform: Android &#9888;&#65039;Deprecated, this field doesn't work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. Sound file that is included in your app to play instead of the default device notification sound. Pass nil to disable sound for the notification. NOTE: Leave off file extension for Android. Example: \"notification\" 
	AndroidSound NullableString `json:"android_sound,omitempty"`
	// Channel: Push Notifications Platform: Huawei &#9888;&#65039;Deprecated, this field ONLY works on EMUI 5 (Android 7 based) and older devices. Please also set Notification Categories / Channels noted above to support EMUI 8 (Android 8 based) devices. Sound file that is included in your app to play instead of the default device notification sound. NOTE: Leave off file extension for and include the full path.  Example: \"/res/raw/notification\" 
	HuaweiSound NullableString `json:"huawei_sound,omitempty"`
	// Channel: Push Notifications Platform: Amazon &#9888;&#65039;Deprecated, this field doesn't work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. Sound file that is included in your app to play instead of the default device notification sound. Pass nil to disable sound for the notification. NOTE: Leave off file extension for Android. Example: \"notification\" 
	AdmSound NullableString `json:"adm_sound,omitempty"`
	// Channel: Push Notifications Platform: Windows Sound file that is included in your app to play instead of the default device notification sound. Example: \"notification.wav\" 
	WpWnsSound NullableString `json:"wp_wns_sound,omitempty"`
	// Channel: Push Notifications Platform: Android &#9888;&#65039;Deprecated, this field doesn't work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. Sets the devices LED notification light if the device has one. ARGB Hex format. Example(Blue): \"FF0000FF\" 
	AndroidLedColor NullableString `json:"android_led_color,omitempty"`
	// Channel: Push Notifications Platform: Huawei &#9888;&#65039;Deprecated, this field ONLY works on EMUI 5 (Android 7 based) and older devices. Please also set Notification Categories / Channels noted above to support EMUI 8 (Android 8 based) devices. Sets the devices LED notification light if the device has one. RGB Hex format. Example(Blue): \"0000FF\" 
	HuaweiLedColor NullableString `json:"huawei_led_color,omitempty"`
	// Channel: Push Notifications Platform: Android Sets the background color of the notification circle to the left of the notification text. Only applies to apps targeting Android API level 21+ on Android 5.0+ devices. Example(Red): \"FFFF0000\" 
	AndroidAccentColor NullableString `json:"android_accent_color,omitempty"`
	// Channel: Push Notifications Platform: Huawei Accent Color used on Action Buttons and Group overflow count. Uses RGB Hex value (E.g. #9900FF). Defaults to device's theme color if not set. 
	HuaweiAccentColor NullableString `json:"huawei_accent_color,omitempty"`
	// Channel: Push Notifications Platform: Android 5.0_ &#9888;&#65039;Deprecated, this field doesn't work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. 1 = Public (default) (Shows the full message on the lock screen unless the user has disabled all notifications from showing on the lock screen. Please consider the user and mark private if the contents are.) 0 = Private (Hides message contents on lock screen if the user set \"Hide sensitive notification content\" in the system settings) -1 = Secret (Notification does not show on the lock screen at all) 
	AndroidVisibility NullableInt32 `json:"android_visibility,omitempty"`
	// Channel: Push Notifications Platform: Huawei &#9888;&#65039;Deprecated, this field ONLY works on EMUI 5 (Android 7 based) and older devices. Please also set Notification Categories / Channels noted above to support EMUI 8 (Android 8 based) devices. 1 = Public (default) (Shows the full message on the lock screen unless the user has disabled all notifications from showing on the lock screen. Please consider the user and mark private if the contents are.) 0 = Private (Hides message contents on lock screen if the user set \"Hide sensitive notification content\" in the system settings) -1 = Secret (Notification does not show on the lock screen at all) 
	HuaweiVisibility NullableInt32 `json:"huawei_visibility,omitempty"`
	// Channel: Push Notifications Platform: iOS Describes whether to set or increase/decrease your app's iOS badge count by the ios_badgeCount specified count. Can specify None, SetTo, or Increase. `None` leaves the count unaffected. `SetTo` directly sets the badge count to the number specified in ios_badgeCount. `Increase` adds the number specified in ios_badgeCount to the total. Use a negative number to decrease the badge count. 
	IosBadgeType NullableString `json:"ios_badgeType,omitempty"`
	// Channel: Push Notifications Platform: iOS Used with ios_badgeType, describes the value to set or amount to increase/decrease your app's iOS badge count by. You can use a negative number to decrease the badge count when used with an ios_badgeType of Increase. 
	IosBadgeCount NullableInt32 `json:"ios_badgeCount,omitempty"`
	// Channel: Push Notifications Platform: iOS 10+, Android Only one notification with the same id will be shown on the device. Use the same id to update an existing notification instead of showing a new one. Limit of 64 characters. 
	CollapseId *string `json:"collapse_id,omitempty"`
	// Channel: Push Notifications Platform: All Browsers Display multiple notifications at once with different topics. 
	WebPushTopic NullableString `json:"web_push_topic,omitempty"`
	// Channel: Push Notifications Platform: iOS 10+ iOS can localize push notification messages on the client using special parameters such as loc-key. When using the Create Notification endpoint, you must include these parameters inside of a field called apns_alert. Please see Apple's guide on localizing push notifications to learn more. 
	ApnsAlert map[string]interface{} `json:"apns_alert,omitempty"`
	// Channel: All Possible values are: timezone (Deliver at a specific time-of-day in each users own timezone) last-active Same as Intelligent Delivery . (Deliver at the same time of day as each user last used your app). If send_after is used, this takes effect after the send_after time has elapsed. 
	DelayedOption NullableString `json:"delayed_option,omitempty"`
	// Channel: All Use with delayed_option=timezone. Examples: \"9:00AM\" \"21:45\" \"9:45:30\" 
	DeliveryTimeOfDay NullableString `json:"delivery_time_of_day,omitempty"`
	// Channel: Push Notifications Platform: iOS, Android, Chrome, Firefox, Safari, ChromeWeb Time To Live - In seconds. The notification will be expired if the device does not come back online within this time. The default is 259,200 seconds (3 days). Max value to set is 2419200 seconds (28 days). 
	Ttl NullableInt32 `json:"ttl,omitempty"`
	// Channel: Push Notifications Platform: Android, Chrome, ChromeWeb Delivery priority through the push server (example GCM/FCM). Pass 10 for high priority or any other integer for normal priority. Defaults to normal priority for Android and high for iOS. For Android 6.0+ devices setting priority to high will wake the device out of doze mode. 
	Priority NullableInt32 `json:"priority,omitempty"`
	// Channel: Push Notifications Platform: iOS valid values: voip Set the value to voip for sending VoIP Notifications This field maps to the APNS header apns-push-type. Note: alert and background are automatically set by OneSignal 
	ApnsPushTypeOverride *string `json:"apns_push_type_override,omitempty"`
	// Channel: All Apps with throttling enabled:   - the parameter value will be used to override the default application throttling value set from the dashboard settings.   - parameter value 0 indicates not to apply throttling to the notification.   - if the parameter is not passed then the default app throttling value will be applied to the notification. Apps with throttling disabled:   - this parameter can be used to throttle delivery for the notification even though throttling is not enabled at the application level. Refer to throttling for more details. 
	ThrottleRatePerMinute NullableString `json:"throttle_rate_per_minute,omitempty"`
	// Channel: Push Notifications Platform: Android Notifications with the same group will be stacked together using Android's Notification Grouping feature. 
	AndroidGroup NullableString `json:"android_group,omitempty"`
	// Channel: Push Notifications Platform: Android Note: This only works for Android 6 and older. Android 7+ allows full expansion of all message. Summary message to display when 2+ notifications are stacked together. Default is \"# new messages\". Include $[notif_count] in your message and it will be replaced with the current number. Languages - The value of each key is the message that will be sent to users for that language. \"en\" (English) is required. The key of each hash is either a a 2 character language code or one of zh-Hans/zh-Hant for Simplified or Traditional Chinese. Read more: supported languages. Example: {\"en\": \"You have $[notif_count] new messages\"} 
	AndroidGroupMessage NullableString `json:"android_group_message,omitempty"`
	// Channel: Push Notifications Platform: Amazon Notifications with the same group will be stacked together using Android's Notification Grouping feature. 
	AdmGroup NullableString `json:"adm_group,omitempty"`
	// Channel: Push Notifications Platform: Amazon Summary message to display when 2+ notifications are stacked together. Default is \"# new messages\". Include $[notif_count] in your message and it will be replaced with the current number. \"en\" (English) is required. The key of each hash is either a a 2 character language code or one of zh-Hans/zh-Hant for Simplified or Traditional Chinese. The value of each key is the message that will be sent to users for that language. Example: {\"en\": \"You have $[notif_count] new messages\"} 
	AdmGroupMessage map[string]interface{} `json:"adm_group_message,omitempty"`
	// Channel: Push Notifications Platform: iOS 12+ This parameter is supported in iOS 12 and above. It allows you to group related notifications together. If two notifications have the same thread-id, they will both be added to the same group. 
	ThreadId NullableString `json:"thread_id,omitempty"`
	// Channel: Push Notifications Platform: iOS 12+ When using thread_id to create grouped notifications in iOS 12+, you can also control the summary. For example, a grouped notification can say \"12 more notifications from John Doe\". The summary_arg lets you set the name of the person/thing the notifications are coming from, and will show up as \"X more notifications from summary_arg\" 
	SummaryArg *string `json:"summary_arg,omitempty"`
	// Channel: Push Notifications Platform: iOS 12+ When using thread_id, you can also control the count of the number of notifications in the group. For example, if the group already has 12 notifications, and you send a new notification with summary_arg_count = 2, the new total will be 14 and the summary will be \"14 more notifications from summary_arg\" 
	SummaryArgCount *int32 `json:"summary_arg_count,omitempty"`
	// Channel: Email Required.  The subject of the email. 
	EmailSubject NullableString `json:"email_subject,omitempty"`
	// Channel: Email Required unless template_id is set. HTML suported The body of the email you wish to send. Typically, customers include their own HTML templates here. Must include [unsubscribe_url] in an <a> tag somewhere in the email. Note: any malformed HTML content will be sent to users. Please double-check your HTML is valid. 
	EmailBody *string `json:"email_body,omitempty"`
	// Channel: Email The name the email is from. If not specified, will default to \"from name\" set in the OneSignal Dashboard Email Settings. 
	EmailFromName NullableString `json:"email_from_name,omitempty"`
	// Channel: Email The email address the email is from. If not specified, will default to \"from email\" set in the OneSignal Dashboard Email Settings. 
	EmailFromAddress NullableString `json:"email_from_address,omitempty"`
	// Channel: Email The preheader text of the email. Preheader is the preview text displayed immediately after an email subject that provides additional context about the email content. If not specified, will default to null. 
	EmailPreheader NullableString `json:"email_preheader,omitempty"`
	// Channel: Email Default is `false`. This field is used to send transactional notifications. If set to `true`, this notification will also be sent to unsubscribed emails. If a `template_id` is provided, the `include_unsubscribed` value from the template will be inherited. If you are using a third-party ESP, this field requires the ESP's list of unsubscribed emails to be cleared.
	IncludeUnsubscribed *bool `json:"include_unsubscribed,omitempty"`
	// Channel: SMS Phone Number used to send SMS. Should be a registered Twilio phone number in E.164 format. 
	SmsFrom NullableString `json:"sms_from,omitempty"`
	// Channel: SMS URLs for the media files to be attached to the SMS content. Limit: 10 media urls with a total max. size of 5MBs. 
	SmsMediaUrls []string `json:"sms_media_urls,omitempty"`
	Filters []Filter `json:"filters,omitempty"`
	// Channel: All JSON object that can be used as a source of message personalization data for fields that support tag variable substitution. Push, SMS: Can accept up to 2048 bytes of valid JSON. Email: Can accept up to 10000 bytes of valid JSON. Example: {\"order_id\": 123, \"currency\": \"USD\", \"amount\": 25} 
	CustomData map[string]interface{} `json:"custom_data,omitempty"`
	// Channel: All Schedule notification for future delivery. API defaults to UTC -1100 Examples: All examples are the exact same date & time. \"Thu Sep 24 2015 14:00:00 GMT-0700 (PDT)\" \"September 24th 2015, 2:00:00 pm UTC-07:00\" \"2015-09-24 14:00:00 GMT-0700\" \"Sept 24 2015 14:00:00 GMT-0700\" \"Thu Sep 24 2015 14:00:00 GMT-0700 (Pacific Daylight Time)\" Note: SMS currently only supports send_after parameter. 
	SendAfter NullableTime `json:"send_after,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Notification Notification

// NewNotification instantiates a new Notification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotification(appId string) *Notification {
	this := Notification{}
	this.AppId = appId
	return &this
}

// NewNotificationWithDefaults instantiates a new Notification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationWithDefaults() *Notification {
	this := Notification{}
	return &this
}

// GetIncludedSegments returns the IncludedSegments field value if set, zero value otherwise.
func (o *Notification) GetIncludedSegments() []string {
	if o == nil || o.IncludedSegments == nil {
		var ret []string
		return ret
	}
	return o.IncludedSegments
}

// GetIncludedSegmentsOk returns a tuple with the IncludedSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludedSegmentsOk() ([]string, bool) {
	if o == nil || o.IncludedSegments == nil {
		return nil, false
	}
	return o.IncludedSegments, true
}

// HasIncludedSegments returns a boolean if a field has been set.
func (o *Notification) HasIncludedSegments() bool {
	if o != nil && o.IncludedSegments != nil {
		return true
	}

	return false
}

// SetIncludedSegments gets a reference to the given []string and assigns it to the IncludedSegments field.
func (o *Notification) SetIncludedSegments(v []string) {
	o.IncludedSegments = v
}

// GetExcludedSegments returns the ExcludedSegments field value if set, zero value otherwise.
func (o *Notification) GetExcludedSegments() []string {
	if o == nil || o.ExcludedSegments == nil {
		var ret []string
		return ret
	}
	return o.ExcludedSegments
}

// GetExcludedSegmentsOk returns a tuple with the ExcludedSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetExcludedSegmentsOk() ([]string, bool) {
	if o == nil || o.ExcludedSegments == nil {
		return nil, false
	}
	return o.ExcludedSegments, true
}

// HasExcludedSegments returns a boolean if a field has been set.
func (o *Notification) HasExcludedSegments() bool {
	if o != nil && o.ExcludedSegments != nil {
		return true
	}

	return false
}

// SetExcludedSegments gets a reference to the given []string and assigns it to the ExcludedSegments field.
func (o *Notification) SetExcludedSegments(v []string) {
	o.ExcludedSegments = v
}

// GetIncludePlayerIds returns the IncludePlayerIds field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *Notification) GetIncludePlayerIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IncludePlayerIds
}

// GetIncludePlayerIdsOk returns a tuple with the IncludePlayerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *Notification) GetIncludePlayerIdsOk() ([]string, bool) {
	if o == nil || o.IncludePlayerIds == nil {
		return nil, false
	}
	return o.IncludePlayerIds, true
}

// HasIncludePlayerIds returns a boolean if a field has been set.
func (o *Notification) HasIncludePlayerIds() bool {
	if o != nil && o.IncludePlayerIds != nil {
		return true
	}

	return false
}

// SetIncludePlayerIds gets a reference to the given []string and assigns it to the IncludePlayerIds field.
// Deprecated
func (o *Notification) SetIncludePlayerIds(v []string) {
	o.IncludePlayerIds = v
}

// GetIncludeExternalUserIds returns the IncludeExternalUserIds field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *Notification) GetIncludeExternalUserIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IncludeExternalUserIds
}

// GetIncludeExternalUserIdsOk returns a tuple with the IncludeExternalUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *Notification) GetIncludeExternalUserIdsOk() ([]string, bool) {
	if o == nil || o.IncludeExternalUserIds == nil {
		return nil, false
	}
	return o.IncludeExternalUserIds, true
}

// HasIncludeExternalUserIds returns a boolean if a field has been set.
func (o *Notification) HasIncludeExternalUserIds() bool {
	if o != nil && o.IncludeExternalUserIds != nil {
		return true
	}

	return false
}

// SetIncludeExternalUserIds gets a reference to the given []string and assigns it to the IncludeExternalUserIds field.
// Deprecated
func (o *Notification) SetIncludeExternalUserIds(v []string) {
	o.IncludeExternalUserIds = v
}

// GetIncludeEmailTokens returns the IncludeEmailTokens field value if set, zero value otherwise.
func (o *Notification) GetIncludeEmailTokens() []string {
	if o == nil || o.IncludeEmailTokens == nil {
		var ret []string
		return ret
	}
	return o.IncludeEmailTokens
}

// GetIncludeEmailTokensOk returns a tuple with the IncludeEmailTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludeEmailTokensOk() ([]string, bool) {
	if o == nil || o.IncludeEmailTokens == nil {
		return nil, false
	}
	return o.IncludeEmailTokens, true
}

// HasIncludeEmailTokens returns a boolean if a field has been set.
func (o *Notification) HasIncludeEmailTokens() bool {
	if o != nil && o.IncludeEmailTokens != nil {
		return true
	}

	return false
}

// SetIncludeEmailTokens gets a reference to the given []string and assigns it to the IncludeEmailTokens field.
func (o *Notification) SetIncludeEmailTokens(v []string) {
	o.IncludeEmailTokens = v
}

// GetIncludePhoneNumbers returns the IncludePhoneNumbers field value if set, zero value otherwise.
func (o *Notification) GetIncludePhoneNumbers() []string {
	if o == nil || o.IncludePhoneNumbers == nil {
		var ret []string
		return ret
	}
	return o.IncludePhoneNumbers
}

// GetIncludePhoneNumbersOk returns a tuple with the IncludePhoneNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludePhoneNumbersOk() ([]string, bool) {
	if o == nil || o.IncludePhoneNumbers == nil {
		return nil, false
	}
	return o.IncludePhoneNumbers, true
}

// HasIncludePhoneNumbers returns a boolean if a field has been set.
func (o *Notification) HasIncludePhoneNumbers() bool {
	if o != nil && o.IncludePhoneNumbers != nil {
		return true
	}

	return false
}

// SetIncludePhoneNumbers gets a reference to the given []string and assigns it to the IncludePhoneNumbers field.
func (o *Notification) SetIncludePhoneNumbers(v []string) {
	o.IncludePhoneNumbers = v
}

// GetIncludeIosTokens returns the IncludeIosTokens field value if set, zero value otherwise.
func (o *Notification) GetIncludeIosTokens() []string {
	if o == nil || o.IncludeIosTokens == nil {
		var ret []string
		return ret
	}
	return o.IncludeIosTokens
}

// GetIncludeIosTokensOk returns a tuple with the IncludeIosTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludeIosTokensOk() ([]string, bool) {
	if o == nil || o.IncludeIosTokens == nil {
		return nil, false
	}
	return o.IncludeIosTokens, true
}

// HasIncludeIosTokens returns a boolean if a field has been set.
func (o *Notification) HasIncludeIosTokens() bool {
	if o != nil && o.IncludeIosTokens != nil {
		return true
	}

	return false
}

// SetIncludeIosTokens gets a reference to the given []string and assigns it to the IncludeIosTokens field.
func (o *Notification) SetIncludeIosTokens(v []string) {
	o.IncludeIosTokens = v
}

// GetIncludeWpWnsUris returns the IncludeWpWnsUris field value if set, zero value otherwise.
func (o *Notification) GetIncludeWpWnsUris() []string {
	if o == nil || o.IncludeWpWnsUris == nil {
		var ret []string
		return ret
	}
	return o.IncludeWpWnsUris
}

// GetIncludeWpWnsUrisOk returns a tuple with the IncludeWpWnsUris field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludeWpWnsUrisOk() ([]string, bool) {
	if o == nil || o.IncludeWpWnsUris == nil {
		return nil, false
	}
	return o.IncludeWpWnsUris, true
}

// HasIncludeWpWnsUris returns a boolean if a field has been set.
func (o *Notification) HasIncludeWpWnsUris() bool {
	if o != nil && o.IncludeWpWnsUris != nil {
		return true
	}

	return false
}

// SetIncludeWpWnsUris gets a reference to the given []string and assigns it to the IncludeWpWnsUris field.
func (o *Notification) SetIncludeWpWnsUris(v []string) {
	o.IncludeWpWnsUris = v
}

// GetIncludeAmazonRegIds returns the IncludeAmazonRegIds field value if set, zero value otherwise.
func (o *Notification) GetIncludeAmazonRegIds() []string {
	if o == nil || o.IncludeAmazonRegIds == nil {
		var ret []string
		return ret
	}
	return o.IncludeAmazonRegIds
}

// GetIncludeAmazonRegIdsOk returns a tuple with the IncludeAmazonRegIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludeAmazonRegIdsOk() ([]string, bool) {
	if o == nil || o.IncludeAmazonRegIds == nil {
		return nil, false
	}
	return o.IncludeAmazonRegIds, true
}

// HasIncludeAmazonRegIds returns a boolean if a field has been set.
func (o *Notification) HasIncludeAmazonRegIds() bool {
	if o != nil && o.IncludeAmazonRegIds != nil {
		return true
	}

	return false
}

// SetIncludeAmazonRegIds gets a reference to the given []string and assigns it to the IncludeAmazonRegIds field.
func (o *Notification) SetIncludeAmazonRegIds(v []string) {
	o.IncludeAmazonRegIds = v
}

// GetIncludeChromeRegIds returns the IncludeChromeRegIds field value if set, zero value otherwise.
func (o *Notification) GetIncludeChromeRegIds() []string {
	if o == nil || o.IncludeChromeRegIds == nil {
		var ret []string
		return ret
	}
	return o.IncludeChromeRegIds
}

// GetIncludeChromeRegIdsOk returns a tuple with the IncludeChromeRegIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludeChromeRegIdsOk() ([]string, bool) {
	if o == nil || o.IncludeChromeRegIds == nil {
		return nil, false
	}
	return o.IncludeChromeRegIds, true
}

// HasIncludeChromeRegIds returns a boolean if a field has been set.
func (o *Notification) HasIncludeChromeRegIds() bool {
	if o != nil && o.IncludeChromeRegIds != nil {
		return true
	}

	return false
}

// SetIncludeChromeRegIds gets a reference to the given []string and assigns it to the IncludeChromeRegIds field.
func (o *Notification) SetIncludeChromeRegIds(v []string) {
	o.IncludeChromeRegIds = v
}

// GetIncludeChromeWebRegIds returns the IncludeChromeWebRegIds field value if set, zero value otherwise.
func (o *Notification) GetIncludeChromeWebRegIds() []string {
	if o == nil || o.IncludeChromeWebRegIds == nil {
		var ret []string
		return ret
	}
	return o.IncludeChromeWebRegIds
}

// GetIncludeChromeWebRegIdsOk returns a tuple with the IncludeChromeWebRegIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludeChromeWebRegIdsOk() ([]string, bool) {
	if o == nil || o.IncludeChromeWebRegIds == nil {
		return nil, false
	}
	return o.IncludeChromeWebRegIds, true
}

// HasIncludeChromeWebRegIds returns a boolean if a field has been set.
func (o *Notification) HasIncludeChromeWebRegIds() bool {
	if o != nil && o.IncludeChromeWebRegIds != nil {
		return true
	}

	return false
}

// SetIncludeChromeWebRegIds gets a reference to the given []string and assigns it to the IncludeChromeWebRegIds field.
func (o *Notification) SetIncludeChromeWebRegIds(v []string) {
	o.IncludeChromeWebRegIds = v
}

// GetIncludeAndroidRegIds returns the IncludeAndroidRegIds field value if set, zero value otherwise.
func (o *Notification) GetIncludeAndroidRegIds() []string {
	if o == nil || o.IncludeAndroidRegIds == nil {
		var ret []string
		return ret
	}
	return o.IncludeAndroidRegIds
}

// GetIncludeAndroidRegIdsOk returns a tuple with the IncludeAndroidRegIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludeAndroidRegIdsOk() ([]string, bool) {
	if o == nil || o.IncludeAndroidRegIds == nil {
		return nil, false
	}
	return o.IncludeAndroidRegIds, true
}

// HasIncludeAndroidRegIds returns a boolean if a field has been set.
func (o *Notification) HasIncludeAndroidRegIds() bool {
	if o != nil && o.IncludeAndroidRegIds != nil {
		return true
	}

	return false
}

// SetIncludeAndroidRegIds gets a reference to the given []string and assigns it to the IncludeAndroidRegIds field.
func (o *Notification) SetIncludeAndroidRegIds(v []string) {
	o.IncludeAndroidRegIds = v
}

// GetIncludeAliases returns the IncludeAliases field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetIncludeAliases() PlayerNotificationTargetIncludeAliases {
	if o == nil || o.IncludeAliases.Get() == nil {
		var ret PlayerNotificationTargetIncludeAliases
		return ret
	}
	return *o.IncludeAliases.Get()
}

// GetIncludeAliasesOk returns a tuple with the IncludeAliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetIncludeAliasesOk() (*PlayerNotificationTargetIncludeAliases, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeAliases.Get(), o.IncludeAliases.IsSet()
}

// HasIncludeAliases returns a boolean if a field has been set.
func (o *Notification) HasIncludeAliases() bool {
	if o != nil && o.IncludeAliases.IsSet() {
		return true
	}

	return false
}

// SetIncludeAliases gets a reference to the given NullablePlayerNotificationTargetIncludeAliases and assigns it to the IncludeAliases field.
func (o *Notification) SetIncludeAliases(v PlayerNotificationTargetIncludeAliases) {
	o.IncludeAliases.Set(&v)
}
// SetIncludeAliasesNil sets the value for IncludeAliases to be an explicit nil
func (o *Notification) SetIncludeAliasesNil() {
	o.IncludeAliases.Set(nil)
}

// UnsetIncludeAliases ensures that no value is present for IncludeAliases, not even an explicit nil
func (o *Notification) UnsetIncludeAliases() {
	o.IncludeAliases.Unset()
}

// GetTargetChannel returns the TargetChannel field value if set, zero value otherwise.
func (o *Notification) GetTargetChannel() string {
	if o == nil || o.TargetChannel == nil {
		var ret string
		return ret
	}
	return *o.TargetChannel
}

// GetTargetChannelOk returns a tuple with the TargetChannel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetTargetChannelOk() (*string, bool) {
	if o == nil || o.TargetChannel == nil {
		return nil, false
	}
	return o.TargetChannel, true
}

// HasTargetChannel returns a boolean if a field has been set.
func (o *Notification) HasTargetChannel() bool {
	if o != nil && o.TargetChannel != nil {
		return true
	}

	return false
}

// SetTargetChannel gets a reference to the given string and assigns it to the TargetChannel field.
func (o *Notification) SetTargetChannel(v string) {
	o.TargetChannel = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Notification) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Notification) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Notification) SetId(v string) {
	o.Id = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Notification) GetValue() int32 {
	if o == nil || o.Value == nil {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetValueOk() (*int32, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Notification) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *Notification) SetValue(v int32) {
	o.Value = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Notification) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Notification) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Notification) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Notification) UnsetName() {
	o.Name.Unset()
}

// GetAggregation returns the Aggregation field value if set, zero value otherwise.
func (o *Notification) GetAggregation() string {
	if o == nil || o.Aggregation == nil {
		var ret string
		return ret
	}
	return *o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAggregationOk() (*string, bool) {
	if o == nil || o.Aggregation == nil {
		return nil, false
	}
	return o.Aggregation, true
}

// HasAggregation returns a boolean if a field has been set.
func (o *Notification) HasAggregation() bool {
	if o != nil && o.Aggregation != nil {
		return true
	}

	return false
}

// SetAggregation gets a reference to the given string and assigns it to the Aggregation field.
func (o *Notification) SetAggregation(v string) {
	o.Aggregation = &v
}

// GetIsIos returns the IsIos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetIsIos() bool {
	if o == nil || o.IsIos.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsIos.Get()
}

// GetIsIosOk returns a tuple with the IsIos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetIsIosOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsIos.Get(), o.IsIos.IsSet()
}

// HasIsIos returns a boolean if a field has been set.
func (o *Notification) HasIsIos() bool {
	if o != nil && o.IsIos.IsSet() {
		return true
	}

	return false
}

// SetIsIos gets a reference to the given NullableBool and assigns it to the IsIos field.
func (o *Notification) SetIsIos(v bool) {
	o.IsIos.Set(&v)
}
// SetIsIosNil sets the value for IsIos to be an explicit nil
func (o *Notification) SetIsIosNil() {
	o.IsIos.Set(nil)
}

// UnsetIsIos ensures that no value is present for IsIos, not even an explicit nil
func (o *Notification) UnsetIsIos() {
	o.IsIos.Unset()
}

// GetIsAndroid returns the IsAndroid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetIsAndroid() bool {
	if o == nil || o.IsAndroid.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsAndroid.Get()
}

// GetIsAndroidOk returns a tuple with the IsAndroid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetIsAndroidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsAndroid.Get(), o.IsAndroid.IsSet()
}

// HasIsAndroid returns a boolean if a field has been set.
func (o *Notification) HasIsAndroid() bool {
	if o != nil && o.IsAndroid.IsSet() {
		return true
	}

	return false
}

// SetIsAndroid gets a reference to the given NullableBool and assigns it to the IsAndroid field.
func (o *Notification) SetIsAndroid(v bool) {
	o.IsAndroid.Set(&v)
}
// SetIsAndroidNil sets the value for IsAndroid to be an explicit nil
func (o *Notification) SetIsAndroidNil() {
	o.IsAndroid.Set(nil)
}

// UnsetIsAndroid ensures that no value is present for IsAndroid, not even an explicit nil
func (o *Notification) UnsetIsAndroid() {
	o.IsAndroid.Unset()
}

// GetIsHuawei returns the IsHuawei field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetIsHuawei() bool {
	if o == nil || o.IsHuawei.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsHuawei.Get()
}

// GetIsHuaweiOk returns a tuple with the IsHuawei field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetIsHuaweiOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsHuawei.Get(), o.IsHuawei.IsSet()
}

// HasIsHuawei returns a boolean if a field has been set.
func (o *Notification) HasIsHuawei() bool {
	if o != nil && o.IsHuawei.IsSet() {
		return true
	}

	return false
}

// SetIsHuawei gets a reference to the given NullableBool and assigns it to the IsHuawei field.
func (o *Notification) SetIsHuawei(v bool) {
	o.IsHuawei.Set(&v)
}
// SetIsHuaweiNil sets the value for IsHuawei to be an explicit nil
func (o *Notification) SetIsHuaweiNil() {
	o.IsHuawei.Set(nil)
}

// UnsetIsHuawei ensures that no value is present for IsHuawei, not even an explicit nil
func (o *Notification) UnsetIsHuawei() {
	o.IsHuawei.Unset()
}

// GetIsAnyWeb returns the IsAnyWeb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetIsAnyWeb() bool {
	if o == nil || o.IsAnyWeb.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsAnyWeb.Get()
}

// GetIsAnyWebOk returns a tuple with the IsAnyWeb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetIsAnyWebOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsAnyWeb.Get(), o.IsAnyWeb.IsSet()
}

// HasIsAnyWeb returns a boolean if a field has been set.
func (o *Notification) HasIsAnyWeb() bool {
	if o != nil && o.IsAnyWeb.IsSet() {
		return true
	}

	return false
}

// SetIsAnyWeb gets a reference to the given NullableBool and assigns it to the IsAnyWeb field.
func (o *Notification) SetIsAnyWeb(v bool) {
	o.IsAnyWeb.Set(&v)
}
// SetIsAnyWebNil sets the value for IsAnyWeb to be an explicit nil
func (o *Notification) SetIsAnyWebNil() {
	o.IsAnyWeb.Set(nil)
}

// UnsetIsAnyWeb ensures that no value is present for IsAnyWeb, not even an explicit nil
func (o *Notification) UnsetIsAnyWeb() {
	o.IsAnyWeb.Unset()
}

// GetIsChromeWeb returns the IsChromeWeb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetIsChromeWeb() bool {
	if o == nil || o.IsChromeWeb.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsChromeWeb.Get()
}

// GetIsChromeWebOk returns a tuple with the IsChromeWeb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetIsChromeWebOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsChromeWeb.Get(), o.IsChromeWeb.IsSet()
}

// HasIsChromeWeb returns a boolean if a field has been set.
func (o *Notification) HasIsChromeWeb() bool {
	if o != nil && o.IsChromeWeb.IsSet() {
		return true
	}

	return false
}

// SetIsChromeWeb gets a reference to the given NullableBool and assigns it to the IsChromeWeb field.
func (o *Notification) SetIsChromeWeb(v bool) {
	o.IsChromeWeb.Set(&v)
}
// SetIsChromeWebNil sets the value for IsChromeWeb to be an explicit nil
func (o *Notification) SetIsChromeWebNil() {
	o.IsChromeWeb.Set(nil)
}

// UnsetIsChromeWeb ensures that no value is present for IsChromeWeb, not even an explicit nil
func (o *Notification) UnsetIsChromeWeb() {
	o.IsChromeWeb.Unset()
}

// GetIsFirefox returns the IsFirefox field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetIsFirefox() bool {
	if o == nil || o.IsFirefox.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsFirefox.Get()
}

// GetIsFirefoxOk returns a tuple with the IsFirefox field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetIsFirefoxOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsFirefox.Get(), o.IsFirefox.IsSet()
}

// HasIsFirefox returns a boolean if a field has been set.
func (o *Notification) HasIsFirefox() bool {
	if o != nil && o.IsFirefox.IsSet() {
		return true
	}

	return false
}

// SetIsFirefox gets a reference to the given NullableBool and assigns it to the IsFirefox field.
func (o *Notification) SetIsFirefox(v bool) {
	o.IsFirefox.Set(&v)
}
// SetIsFirefoxNil sets the value for IsFirefox to be an explicit nil
func (o *Notification) SetIsFirefoxNil() {
	o.IsFirefox.Set(nil)
}

// UnsetIsFirefox ensures that no value is present for IsFirefox, not even an explicit nil
func (o *Notification) UnsetIsFirefox() {
	o.IsFirefox.Unset()
}

// GetIsSafari returns the IsSafari field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetIsSafari() bool {
	if o == nil || o.IsSafari.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsSafari.Get()
}

// GetIsSafariOk returns a tuple with the IsSafari field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetIsSafariOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsSafari.Get(), o.IsSafari.IsSet()
}

// HasIsSafari returns a boolean if a field has been set.
func (o *Notification) HasIsSafari() bool {
	if o != nil && o.IsSafari.IsSet() {
		return true
	}

	return false
}

// SetIsSafari gets a reference to the given NullableBool and assigns it to the IsSafari field.
func (o *Notification) SetIsSafari(v bool) {
	o.IsSafari.Set(&v)
}
// SetIsSafariNil sets the value for IsSafari to be an explicit nil
func (o *Notification) SetIsSafariNil() {
	o.IsSafari.Set(nil)
}

// UnsetIsSafari ensures that no value is present for IsSafari, not even an explicit nil
func (o *Notification) UnsetIsSafari() {
	o.IsSafari.Unset()
}

// GetIsWPWNS returns the IsWPWNS field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetIsWPWNS() bool {
	if o == nil || o.IsWPWNS.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsWPWNS.Get()
}

// GetIsWPWNSOk returns a tuple with the IsWPWNS field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetIsWPWNSOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsWPWNS.Get(), o.IsWPWNS.IsSet()
}

// HasIsWPWNS returns a boolean if a field has been set.
func (o *Notification) HasIsWPWNS() bool {
	if o != nil && o.IsWPWNS.IsSet() {
		return true
	}

	return false
}

// SetIsWPWNS gets a reference to the given NullableBool and assigns it to the IsWPWNS field.
func (o *Notification) SetIsWPWNS(v bool) {
	o.IsWPWNS.Set(&v)
}
// SetIsWPWNSNil sets the value for IsWPWNS to be an explicit nil
func (o *Notification) SetIsWPWNSNil() {
	o.IsWPWNS.Set(nil)
}

// UnsetIsWPWNS ensures that no value is present for IsWPWNS, not even an explicit nil
func (o *Notification) UnsetIsWPWNS() {
	o.IsWPWNS.Unset()
}

// GetIsAdm returns the IsAdm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetIsAdm() bool {
	if o == nil || o.IsAdm.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsAdm.Get()
}

// GetIsAdmOk returns a tuple with the IsAdm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetIsAdmOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsAdm.Get(), o.IsAdm.IsSet()
}

// HasIsAdm returns a boolean if a field has been set.
func (o *Notification) HasIsAdm() bool {
	if o != nil && o.IsAdm.IsSet() {
		return true
	}

	return false
}

// SetIsAdm gets a reference to the given NullableBool and assigns it to the IsAdm field.
func (o *Notification) SetIsAdm(v bool) {
	o.IsAdm.Set(&v)
}
// SetIsAdmNil sets the value for IsAdm to be an explicit nil
func (o *Notification) SetIsAdmNil() {
	o.IsAdm.Set(nil)
}

// UnsetIsAdm ensures that no value is present for IsAdm, not even an explicit nil
func (o *Notification) UnsetIsAdm() {
	o.IsAdm.Unset()
}

// GetIsChrome returns the IsChrome field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetIsChrome() bool {
	if o == nil || o.IsChrome.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsChrome.Get()
}

// GetIsChromeOk returns a tuple with the IsChrome field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetIsChromeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsChrome.Get(), o.IsChrome.IsSet()
}

// HasIsChrome returns a boolean if a field has been set.
func (o *Notification) HasIsChrome() bool {
	if o != nil && o.IsChrome.IsSet() {
		return true
	}

	return false
}

// SetIsChrome gets a reference to the given NullableBool and assigns it to the IsChrome field.
func (o *Notification) SetIsChrome(v bool) {
	o.IsChrome.Set(&v)
}
// SetIsChromeNil sets the value for IsChrome to be an explicit nil
func (o *Notification) SetIsChromeNil() {
	o.IsChrome.Set(nil)
}

// UnsetIsChrome ensures that no value is present for IsChrome, not even an explicit nil
func (o *Notification) UnsetIsChrome() {
	o.IsChrome.Unset()
}

// GetChannelForExternalUserIds returns the ChannelForExternalUserIds field value if set, zero value otherwise.
func (o *Notification) GetChannelForExternalUserIds() string {
	if o == nil || o.ChannelForExternalUserIds == nil {
		var ret string
		return ret
	}
	return *o.ChannelForExternalUserIds
}

// GetChannelForExternalUserIdsOk returns a tuple with the ChannelForExternalUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetChannelForExternalUserIdsOk() (*string, bool) {
	if o == nil || o.ChannelForExternalUserIds == nil {
		return nil, false
	}
	return o.ChannelForExternalUserIds, true
}

// HasChannelForExternalUserIds returns a boolean if a field has been set.
func (o *Notification) HasChannelForExternalUserIds() bool {
	if o != nil && o.ChannelForExternalUserIds != nil {
		return true
	}

	return false
}

// SetChannelForExternalUserIds gets a reference to the given string and assigns it to the ChannelForExternalUserIds field.
func (o *Notification) SetChannelForExternalUserIds(v string) {
	o.ChannelForExternalUserIds = &v
}

// GetAppId returns the AppId field value
func (o *Notification) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *Notification) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *Notification) SetAppId(v string) {
	o.AppId = v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *Notification) GetExternalId() string {
	if o == nil || o.ExternalId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExternalId.Get()
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *Notification) GetExternalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalId.Get(), o.ExternalId.IsSet()
}

// HasExternalId returns a boolean if a field has been set.
func (o *Notification) HasExternalId() bool {
	if o != nil && o.ExternalId.IsSet() {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given NullableString and assigns it to the ExternalId field.
// Deprecated
func (o *Notification) SetExternalId(v string) {
	o.ExternalId.Set(&v)
}
// SetExternalIdNil sets the value for ExternalId to be an explicit nil
func (o *Notification) SetExternalIdNil() {
	o.ExternalId.Set(nil)
}

// UnsetExternalId ensures that no value is present for ExternalId, not even an explicit nil
func (o *Notification) UnsetExternalId() {
	o.ExternalId.Unset()
}

// GetIdempotencyKey returns the IdempotencyKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetIdempotencyKey() string {
	if o == nil || o.IdempotencyKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.IdempotencyKey.Get()
}

// GetIdempotencyKeyOk returns a tuple with the IdempotencyKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetIdempotencyKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IdempotencyKey.Get(), o.IdempotencyKey.IsSet()
}

// HasIdempotencyKey returns a boolean if a field has been set.
func (o *Notification) HasIdempotencyKey() bool {
	if o != nil && o.IdempotencyKey.IsSet() {
		return true
	}

	return false
}

// SetIdempotencyKey gets a reference to the given NullableString and assigns it to the IdempotencyKey field.
func (o *Notification) SetIdempotencyKey(v string) {
	o.IdempotencyKey.Set(&v)
}
// SetIdempotencyKeyNil sets the value for IdempotencyKey to be an explicit nil
func (o *Notification) SetIdempotencyKeyNil() {
	o.IdempotencyKey.Set(nil)
}

// UnsetIdempotencyKey ensures that no value is present for IdempotencyKey, not even an explicit nil
func (o *Notification) UnsetIdempotencyKey() {
	o.IdempotencyKey.Unset()
}

// GetContents returns the Contents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetContents() StringMap {
	if o == nil || o.Contents.Get() == nil {
		var ret StringMap
		return ret
	}
	return *o.Contents.Get()
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetContentsOk() (*StringMap, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contents.Get(), o.Contents.IsSet()
}

// HasContents returns a boolean if a field has been set.
func (o *Notification) HasContents() bool {
	if o != nil && o.Contents.IsSet() {
		return true
	}

	return false
}

// SetContents gets a reference to the given NullableStringMap and assigns it to the Contents field.
func (o *Notification) SetContents(v StringMap) {
	o.Contents.Set(&v)
}
// SetContentsNil sets the value for Contents to be an explicit nil
func (o *Notification) SetContentsNil() {
	o.Contents.Set(nil)
}

// UnsetContents ensures that no value is present for Contents, not even an explicit nil
func (o *Notification) UnsetContents() {
	o.Contents.Unset()
}

// GetHeadings returns the Headings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetHeadings() StringMap {
	if o == nil || o.Headings.Get() == nil {
		var ret StringMap
		return ret
	}
	return *o.Headings.Get()
}

// GetHeadingsOk returns a tuple with the Headings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetHeadingsOk() (*StringMap, bool) {
	if o == nil {
		return nil, false
	}
	return o.Headings.Get(), o.Headings.IsSet()
}

// HasHeadings returns a boolean if a field has been set.
func (o *Notification) HasHeadings() bool {
	if o != nil && o.Headings.IsSet() {
		return true
	}

	return false
}

// SetHeadings gets a reference to the given NullableStringMap and assigns it to the Headings field.
func (o *Notification) SetHeadings(v StringMap) {
	o.Headings.Set(&v)
}
// SetHeadingsNil sets the value for Headings to be an explicit nil
func (o *Notification) SetHeadingsNil() {
	o.Headings.Set(nil)
}

// UnsetHeadings ensures that no value is present for Headings, not even an explicit nil
func (o *Notification) UnsetHeadings() {
	o.Headings.Unset()
}

// GetSubtitle returns the Subtitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetSubtitle() StringMap {
	if o == nil || o.Subtitle.Get() == nil {
		var ret StringMap
		return ret
	}
	return *o.Subtitle.Get()
}

// GetSubtitleOk returns a tuple with the Subtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetSubtitleOk() (*StringMap, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subtitle.Get(), o.Subtitle.IsSet()
}

// HasSubtitle returns a boolean if a field has been set.
func (o *Notification) HasSubtitle() bool {
	if o != nil && o.Subtitle.IsSet() {
		return true
	}

	return false
}

// SetSubtitle gets a reference to the given NullableStringMap and assigns it to the Subtitle field.
func (o *Notification) SetSubtitle(v StringMap) {
	o.Subtitle.Set(&v)
}
// SetSubtitleNil sets the value for Subtitle to be an explicit nil
func (o *Notification) SetSubtitleNil() {
	o.Subtitle.Set(nil)
}

// UnsetSubtitle ensures that no value is present for Subtitle, not even an explicit nil
func (o *Notification) UnsetSubtitle() {
	o.Subtitle.Unset()
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Notification) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *Notification) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetHuaweiMsgType returns the HuaweiMsgType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetHuaweiMsgType() string {
	if o == nil || o.HuaweiMsgType.Get() == nil {
		var ret string
		return ret
	}
	return *o.HuaweiMsgType.Get()
}

// GetHuaweiMsgTypeOk returns a tuple with the HuaweiMsgType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetHuaweiMsgTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HuaweiMsgType.Get(), o.HuaweiMsgType.IsSet()
}

// HasHuaweiMsgType returns a boolean if a field has been set.
func (o *Notification) HasHuaweiMsgType() bool {
	if o != nil && o.HuaweiMsgType.IsSet() {
		return true
	}

	return false
}

// SetHuaweiMsgType gets a reference to the given NullableString and assigns it to the HuaweiMsgType field.
func (o *Notification) SetHuaweiMsgType(v string) {
	o.HuaweiMsgType.Set(&v)
}
// SetHuaweiMsgTypeNil sets the value for HuaweiMsgType to be an explicit nil
func (o *Notification) SetHuaweiMsgTypeNil() {
	o.HuaweiMsgType.Set(nil)
}

// UnsetHuaweiMsgType ensures that no value is present for HuaweiMsgType, not even an explicit nil
func (o *Notification) UnsetHuaweiMsgType() {
	o.HuaweiMsgType.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetUrl() string {
	if o == nil || o.Url.Get() == nil {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *Notification) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *Notification) SetUrl(v string) {
	o.Url.Set(&v)
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *Notification) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *Notification) UnsetUrl() {
	o.Url.Unset()
}

// GetWebUrl returns the WebUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetWebUrl() string {
	if o == nil || o.WebUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.WebUrl.Get()
}

// GetWebUrlOk returns a tuple with the WebUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetWebUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebUrl.Get(), o.WebUrl.IsSet()
}

// HasWebUrl returns a boolean if a field has been set.
func (o *Notification) HasWebUrl() bool {
	if o != nil && o.WebUrl.IsSet() {
		return true
	}

	return false
}

// SetWebUrl gets a reference to the given NullableString and assigns it to the WebUrl field.
func (o *Notification) SetWebUrl(v string) {
	o.WebUrl.Set(&v)
}
// SetWebUrlNil sets the value for WebUrl to be an explicit nil
func (o *Notification) SetWebUrlNil() {
	o.WebUrl.Set(nil)
}

// UnsetWebUrl ensures that no value is present for WebUrl, not even an explicit nil
func (o *Notification) UnsetWebUrl() {
	o.WebUrl.Unset()
}

// GetAppUrl returns the AppUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetAppUrl() string {
	if o == nil || o.AppUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.AppUrl.Get()
}

// GetAppUrlOk returns a tuple with the AppUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetAppUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppUrl.Get(), o.AppUrl.IsSet()
}

// HasAppUrl returns a boolean if a field has been set.
func (o *Notification) HasAppUrl() bool {
	if o != nil && o.AppUrl.IsSet() {
		return true
	}

	return false
}

// SetAppUrl gets a reference to the given NullableString and assigns it to the AppUrl field.
func (o *Notification) SetAppUrl(v string) {
	o.AppUrl.Set(&v)
}
// SetAppUrlNil sets the value for AppUrl to be an explicit nil
func (o *Notification) SetAppUrlNil() {
	o.AppUrl.Set(nil)
}

// UnsetAppUrl ensures that no value is present for AppUrl, not even an explicit nil
func (o *Notification) UnsetAppUrl() {
	o.AppUrl.Unset()
}

// GetIosAttachments returns the IosAttachments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetIosAttachments() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.IosAttachments
}

// GetIosAttachmentsOk returns a tuple with the IosAttachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetIosAttachmentsOk() (map[string]interface{}, bool) {
	if o == nil || o.IosAttachments == nil {
		return nil, false
	}
	return o.IosAttachments, true
}

// HasIosAttachments returns a boolean if a field has been set.
func (o *Notification) HasIosAttachments() bool {
	if o != nil && o.IosAttachments != nil {
		return true
	}

	return false
}

// SetIosAttachments gets a reference to the given map[string]interface{} and assigns it to the IosAttachments field.
func (o *Notification) SetIosAttachments(v map[string]interface{}) {
	o.IosAttachments = v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetTemplateId() string {
	if o == nil || o.TemplateId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TemplateId.Get()
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetTemplateIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TemplateId.Get(), o.TemplateId.IsSet()
}

// HasTemplateId returns a boolean if a field has been set.
func (o *Notification) HasTemplateId() bool {
	if o != nil && o.TemplateId.IsSet() {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given NullableString and assigns it to the TemplateId field.
func (o *Notification) SetTemplateId(v string) {
	o.TemplateId.Set(&v)
}
// SetTemplateIdNil sets the value for TemplateId to be an explicit nil
func (o *Notification) SetTemplateIdNil() {
	o.TemplateId.Set(nil)
}

// UnsetTemplateId ensures that no value is present for TemplateId, not even an explicit nil
func (o *Notification) UnsetTemplateId() {
	o.TemplateId.Unset()
}

// GetContentAvailable returns the ContentAvailable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetContentAvailable() bool {
	if o == nil || o.ContentAvailable.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ContentAvailable.Get()
}

// GetContentAvailableOk returns a tuple with the ContentAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetContentAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContentAvailable.Get(), o.ContentAvailable.IsSet()
}

// HasContentAvailable returns a boolean if a field has been set.
func (o *Notification) HasContentAvailable() bool {
	if o != nil && o.ContentAvailable.IsSet() {
		return true
	}

	return false
}

// SetContentAvailable gets a reference to the given NullableBool and assigns it to the ContentAvailable field.
func (o *Notification) SetContentAvailable(v bool) {
	o.ContentAvailable.Set(&v)
}
// SetContentAvailableNil sets the value for ContentAvailable to be an explicit nil
func (o *Notification) SetContentAvailableNil() {
	o.ContentAvailable.Set(nil)
}

// UnsetContentAvailable ensures that no value is present for ContentAvailable, not even an explicit nil
func (o *Notification) UnsetContentAvailable() {
	o.ContentAvailable.Unset()
}

// GetMutableContent returns the MutableContent field value if set, zero value otherwise.
func (o *Notification) GetMutableContent() bool {
	if o == nil || o.MutableContent == nil {
		var ret bool
		return ret
	}
	return *o.MutableContent
}

// GetMutableContentOk returns a tuple with the MutableContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetMutableContentOk() (*bool, bool) {
	if o == nil || o.MutableContent == nil {
		return nil, false
	}
	return o.MutableContent, true
}

// HasMutableContent returns a boolean if a field has been set.
func (o *Notification) HasMutableContent() bool {
	if o != nil && o.MutableContent != nil {
		return true
	}

	return false
}

// SetMutableContent gets a reference to the given bool and assigns it to the MutableContent field.
func (o *Notification) SetMutableContent(v bool) {
	o.MutableContent = &v
}

// GetTargetContentIdentifier returns the TargetContentIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetTargetContentIdentifier() string {
	if o == nil || o.TargetContentIdentifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetContentIdentifier.Get()
}

// GetTargetContentIdentifierOk returns a tuple with the TargetContentIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetTargetContentIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetContentIdentifier.Get(), o.TargetContentIdentifier.IsSet()
}

// HasTargetContentIdentifier returns a boolean if a field has been set.
func (o *Notification) HasTargetContentIdentifier() bool {
	if o != nil && o.TargetContentIdentifier.IsSet() {
		return true
	}

	return false
}

// SetTargetContentIdentifier gets a reference to the given NullableString and assigns it to the TargetContentIdentifier field.
func (o *Notification) SetTargetContentIdentifier(v string) {
	o.TargetContentIdentifier.Set(&v)
}
// SetTargetContentIdentifierNil sets the value for TargetContentIdentifier to be an explicit nil
func (o *Notification) SetTargetContentIdentifierNil() {
	o.TargetContentIdentifier.Set(nil)
}

// UnsetTargetContentIdentifier ensures that no value is present for TargetContentIdentifier, not even an explicit nil
func (o *Notification) UnsetTargetContentIdentifier() {
	o.TargetContentIdentifier.Unset()
}

// GetBigPicture returns the BigPicture field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetBigPicture() string {
	if o == nil || o.BigPicture.Get() == nil {
		var ret string
		return ret
	}
	return *o.BigPicture.Get()
}

// GetBigPictureOk returns a tuple with the BigPicture field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetBigPictureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BigPicture.Get(), o.BigPicture.IsSet()
}

// HasBigPicture returns a boolean if a field has been set.
func (o *Notification) HasBigPicture() bool {
	if o != nil && o.BigPicture.IsSet() {
		return true
	}

	return false
}

// SetBigPicture gets a reference to the given NullableString and assigns it to the BigPicture field.
func (o *Notification) SetBigPicture(v string) {
	o.BigPicture.Set(&v)
}
// SetBigPictureNil sets the value for BigPicture to be an explicit nil
func (o *Notification) SetBigPictureNil() {
	o.BigPicture.Set(nil)
}

// UnsetBigPicture ensures that no value is present for BigPicture, not even an explicit nil
func (o *Notification) UnsetBigPicture() {
	o.BigPicture.Unset()
}

// GetHuaweiBigPicture returns the HuaweiBigPicture field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetHuaweiBigPicture() string {
	if o == nil || o.HuaweiBigPicture.Get() == nil {
		var ret string
		return ret
	}
	return *o.HuaweiBigPicture.Get()
}

// GetHuaweiBigPictureOk returns a tuple with the HuaweiBigPicture field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetHuaweiBigPictureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HuaweiBigPicture.Get(), o.HuaweiBigPicture.IsSet()
}

// HasHuaweiBigPicture returns a boolean if a field has been set.
func (o *Notification) HasHuaweiBigPicture() bool {
	if o != nil && o.HuaweiBigPicture.IsSet() {
		return true
	}

	return false
}

// SetHuaweiBigPicture gets a reference to the given NullableString and assigns it to the HuaweiBigPicture field.
func (o *Notification) SetHuaweiBigPicture(v string) {
	o.HuaweiBigPicture.Set(&v)
}
// SetHuaweiBigPictureNil sets the value for HuaweiBigPicture to be an explicit nil
func (o *Notification) SetHuaweiBigPictureNil() {
	o.HuaweiBigPicture.Set(nil)
}

// UnsetHuaweiBigPicture ensures that no value is present for HuaweiBigPicture, not even an explicit nil
func (o *Notification) UnsetHuaweiBigPicture() {
	o.HuaweiBigPicture.Unset()
}

// GetAdmBigPicture returns the AdmBigPicture field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetAdmBigPicture() string {
	if o == nil || o.AdmBigPicture.Get() == nil {
		var ret string
		return ret
	}
	return *o.AdmBigPicture.Get()
}

// GetAdmBigPictureOk returns a tuple with the AdmBigPicture field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetAdmBigPictureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdmBigPicture.Get(), o.AdmBigPicture.IsSet()
}

// HasAdmBigPicture returns a boolean if a field has been set.
func (o *Notification) HasAdmBigPicture() bool {
	if o != nil && o.AdmBigPicture.IsSet() {
		return true
	}

	return false
}

// SetAdmBigPicture gets a reference to the given NullableString and assigns it to the AdmBigPicture field.
func (o *Notification) SetAdmBigPicture(v string) {
	o.AdmBigPicture.Set(&v)
}
// SetAdmBigPictureNil sets the value for AdmBigPicture to be an explicit nil
func (o *Notification) SetAdmBigPictureNil() {
	o.AdmBigPicture.Set(nil)
}

// UnsetAdmBigPicture ensures that no value is present for AdmBigPicture, not even an explicit nil
func (o *Notification) UnsetAdmBigPicture() {
	o.AdmBigPicture.Unset()
}

// GetChromeBigPicture returns the ChromeBigPicture field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetChromeBigPicture() string {
	if o == nil || o.ChromeBigPicture.Get() == nil {
		var ret string
		return ret
	}
	return *o.ChromeBigPicture.Get()
}

// GetChromeBigPictureOk returns a tuple with the ChromeBigPicture field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetChromeBigPictureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChromeBigPicture.Get(), o.ChromeBigPicture.IsSet()
}

// HasChromeBigPicture returns a boolean if a field has been set.
func (o *Notification) HasChromeBigPicture() bool {
	if o != nil && o.ChromeBigPicture.IsSet() {
		return true
	}

	return false
}

// SetChromeBigPicture gets a reference to the given NullableString and assigns it to the ChromeBigPicture field.
func (o *Notification) SetChromeBigPicture(v string) {
	o.ChromeBigPicture.Set(&v)
}
// SetChromeBigPictureNil sets the value for ChromeBigPicture to be an explicit nil
func (o *Notification) SetChromeBigPictureNil() {
	o.ChromeBigPicture.Set(nil)
}

// UnsetChromeBigPicture ensures that no value is present for ChromeBigPicture, not even an explicit nil
func (o *Notification) UnsetChromeBigPicture() {
	o.ChromeBigPicture.Unset()
}

// GetChromeWebImage returns the ChromeWebImage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetChromeWebImage() string {
	if o == nil || o.ChromeWebImage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ChromeWebImage.Get()
}

// GetChromeWebImageOk returns a tuple with the ChromeWebImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetChromeWebImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChromeWebImage.Get(), o.ChromeWebImage.IsSet()
}

// HasChromeWebImage returns a boolean if a field has been set.
func (o *Notification) HasChromeWebImage() bool {
	if o != nil && o.ChromeWebImage.IsSet() {
		return true
	}

	return false
}

// SetChromeWebImage gets a reference to the given NullableString and assigns it to the ChromeWebImage field.
func (o *Notification) SetChromeWebImage(v string) {
	o.ChromeWebImage.Set(&v)
}
// SetChromeWebImageNil sets the value for ChromeWebImage to be an explicit nil
func (o *Notification) SetChromeWebImageNil() {
	o.ChromeWebImage.Set(nil)
}

// UnsetChromeWebImage ensures that no value is present for ChromeWebImage, not even an explicit nil
func (o *Notification) UnsetChromeWebImage() {
	o.ChromeWebImage.Unset()
}

// GetButtons returns the Buttons field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetButtons() []Button {
	if o == nil {
		var ret []Button
		return ret
	}
	return o.Buttons
}

// GetButtonsOk returns a tuple with the Buttons field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetButtonsOk() ([]Button, bool) {
	if o == nil || o.Buttons == nil {
		return nil, false
	}
	return o.Buttons, true
}

// HasButtons returns a boolean if a field has been set.
func (o *Notification) HasButtons() bool {
	if o != nil && o.Buttons != nil {
		return true
	}

	return false
}

// SetButtons gets a reference to the given []Button and assigns it to the Buttons field.
func (o *Notification) SetButtons(v []Button) {
	o.Buttons = v
}

// GetWebButtons returns the WebButtons field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetWebButtons() []Button {
	if o == nil {
		var ret []Button
		return ret
	}
	return o.WebButtons
}

// GetWebButtonsOk returns a tuple with the WebButtons field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetWebButtonsOk() ([]Button, bool) {
	if o == nil || o.WebButtons == nil {
		return nil, false
	}
	return o.WebButtons, true
}

// HasWebButtons returns a boolean if a field has been set.
func (o *Notification) HasWebButtons() bool {
	if o != nil && o.WebButtons != nil {
		return true
	}

	return false
}

// SetWebButtons gets a reference to the given []Button and assigns it to the WebButtons field.
func (o *Notification) SetWebButtons(v []Button) {
	o.WebButtons = v
}

// GetIosCategory returns the IosCategory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetIosCategory() string {
	if o == nil || o.IosCategory.Get() == nil {
		var ret string
		return ret
	}
	return *o.IosCategory.Get()
}

// GetIosCategoryOk returns a tuple with the IosCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetIosCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IosCategory.Get(), o.IosCategory.IsSet()
}

// HasIosCategory returns a boolean if a field has been set.
func (o *Notification) HasIosCategory() bool {
	if o != nil && o.IosCategory.IsSet() {
		return true
	}

	return false
}

// SetIosCategory gets a reference to the given NullableString and assigns it to the IosCategory field.
func (o *Notification) SetIosCategory(v string) {
	o.IosCategory.Set(&v)
}
// SetIosCategoryNil sets the value for IosCategory to be an explicit nil
func (o *Notification) SetIosCategoryNil() {
	o.IosCategory.Set(nil)
}

// UnsetIosCategory ensures that no value is present for IosCategory, not even an explicit nil
func (o *Notification) UnsetIosCategory() {
	o.IosCategory.Unset()
}

// GetAndroidChannelId returns the AndroidChannelId field value if set, zero value otherwise.
func (o *Notification) GetAndroidChannelId() string {
	if o == nil || o.AndroidChannelId == nil {
		var ret string
		return ret
	}
	return *o.AndroidChannelId
}

// GetAndroidChannelIdOk returns a tuple with the AndroidChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAndroidChannelIdOk() (*string, bool) {
	if o == nil || o.AndroidChannelId == nil {
		return nil, false
	}
	return o.AndroidChannelId, true
}

// HasAndroidChannelId returns a boolean if a field has been set.
func (o *Notification) HasAndroidChannelId() bool {
	if o != nil && o.AndroidChannelId != nil {
		return true
	}

	return false
}

// SetAndroidChannelId gets a reference to the given string and assigns it to the AndroidChannelId field.
func (o *Notification) SetAndroidChannelId(v string) {
	o.AndroidChannelId = &v
}

// GetHuaweiChannelId returns the HuaweiChannelId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetHuaweiChannelId() string {
	if o == nil || o.HuaweiChannelId.Get() == nil {
		var ret string
		return ret
	}
	return *o.HuaweiChannelId.Get()
}

// GetHuaweiChannelIdOk returns a tuple with the HuaweiChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetHuaweiChannelIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HuaweiChannelId.Get(), o.HuaweiChannelId.IsSet()
}

// HasHuaweiChannelId returns a boolean if a field has been set.
func (o *Notification) HasHuaweiChannelId() bool {
	if o != nil && o.HuaweiChannelId.IsSet() {
		return true
	}

	return false
}

// SetHuaweiChannelId gets a reference to the given NullableString and assigns it to the HuaweiChannelId field.
func (o *Notification) SetHuaweiChannelId(v string) {
	o.HuaweiChannelId.Set(&v)
}
// SetHuaweiChannelIdNil sets the value for HuaweiChannelId to be an explicit nil
func (o *Notification) SetHuaweiChannelIdNil() {
	o.HuaweiChannelId.Set(nil)
}

// UnsetHuaweiChannelId ensures that no value is present for HuaweiChannelId, not even an explicit nil
func (o *Notification) UnsetHuaweiChannelId() {
	o.HuaweiChannelId.Unset()
}

// GetExistingAndroidChannelId returns the ExistingAndroidChannelId field value if set, zero value otherwise.
func (o *Notification) GetExistingAndroidChannelId() string {
	if o == nil || o.ExistingAndroidChannelId == nil {
		var ret string
		return ret
	}
	return *o.ExistingAndroidChannelId
}

// GetExistingAndroidChannelIdOk returns a tuple with the ExistingAndroidChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetExistingAndroidChannelIdOk() (*string, bool) {
	if o == nil || o.ExistingAndroidChannelId == nil {
		return nil, false
	}
	return o.ExistingAndroidChannelId, true
}

// HasExistingAndroidChannelId returns a boolean if a field has been set.
func (o *Notification) HasExistingAndroidChannelId() bool {
	if o != nil && o.ExistingAndroidChannelId != nil {
		return true
	}

	return false
}

// SetExistingAndroidChannelId gets a reference to the given string and assigns it to the ExistingAndroidChannelId field.
func (o *Notification) SetExistingAndroidChannelId(v string) {
	o.ExistingAndroidChannelId = &v
}

// GetHuaweiExistingChannelId returns the HuaweiExistingChannelId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetHuaweiExistingChannelId() string {
	if o == nil || o.HuaweiExistingChannelId.Get() == nil {
		var ret string
		return ret
	}
	return *o.HuaweiExistingChannelId.Get()
}

// GetHuaweiExistingChannelIdOk returns a tuple with the HuaweiExistingChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetHuaweiExistingChannelIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HuaweiExistingChannelId.Get(), o.HuaweiExistingChannelId.IsSet()
}

// HasHuaweiExistingChannelId returns a boolean if a field has been set.
func (o *Notification) HasHuaweiExistingChannelId() bool {
	if o != nil && o.HuaweiExistingChannelId.IsSet() {
		return true
	}

	return false
}

// SetHuaweiExistingChannelId gets a reference to the given NullableString and assigns it to the HuaweiExistingChannelId field.
func (o *Notification) SetHuaweiExistingChannelId(v string) {
	o.HuaweiExistingChannelId.Set(&v)
}
// SetHuaweiExistingChannelIdNil sets the value for HuaweiExistingChannelId to be an explicit nil
func (o *Notification) SetHuaweiExistingChannelIdNil() {
	o.HuaweiExistingChannelId.Set(nil)
}

// UnsetHuaweiExistingChannelId ensures that no value is present for HuaweiExistingChannelId, not even an explicit nil
func (o *Notification) UnsetHuaweiExistingChannelId() {
	o.HuaweiExistingChannelId.Unset()
}

// GetAndroidBackgroundLayout returns the AndroidBackgroundLayout field value if set, zero value otherwise.
func (o *Notification) GetAndroidBackgroundLayout() BasicNotificationAllOfAndroidBackgroundLayout {
	if o == nil || o.AndroidBackgroundLayout == nil {
		var ret BasicNotificationAllOfAndroidBackgroundLayout
		return ret
	}
	return *o.AndroidBackgroundLayout
}

// GetAndroidBackgroundLayoutOk returns a tuple with the AndroidBackgroundLayout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetAndroidBackgroundLayoutOk() (*BasicNotificationAllOfAndroidBackgroundLayout, bool) {
	if o == nil || o.AndroidBackgroundLayout == nil {
		return nil, false
	}
	return o.AndroidBackgroundLayout, true
}

// HasAndroidBackgroundLayout returns a boolean if a field has been set.
func (o *Notification) HasAndroidBackgroundLayout() bool {
	if o != nil && o.AndroidBackgroundLayout != nil {
		return true
	}

	return false
}

// SetAndroidBackgroundLayout gets a reference to the given BasicNotificationAllOfAndroidBackgroundLayout and assigns it to the AndroidBackgroundLayout field.
func (o *Notification) SetAndroidBackgroundLayout(v BasicNotificationAllOfAndroidBackgroundLayout) {
	o.AndroidBackgroundLayout = &v
}

// GetSmallIcon returns the SmallIcon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetSmallIcon() string {
	if o == nil || o.SmallIcon.Get() == nil {
		var ret string
		return ret
	}
	return *o.SmallIcon.Get()
}

// GetSmallIconOk returns a tuple with the SmallIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetSmallIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SmallIcon.Get(), o.SmallIcon.IsSet()
}

// HasSmallIcon returns a boolean if a field has been set.
func (o *Notification) HasSmallIcon() bool {
	if o != nil && o.SmallIcon.IsSet() {
		return true
	}

	return false
}

// SetSmallIcon gets a reference to the given NullableString and assigns it to the SmallIcon field.
func (o *Notification) SetSmallIcon(v string) {
	o.SmallIcon.Set(&v)
}
// SetSmallIconNil sets the value for SmallIcon to be an explicit nil
func (o *Notification) SetSmallIconNil() {
	o.SmallIcon.Set(nil)
}

// UnsetSmallIcon ensures that no value is present for SmallIcon, not even an explicit nil
func (o *Notification) UnsetSmallIcon() {
	o.SmallIcon.Unset()
}

// GetHuaweiSmallIcon returns the HuaweiSmallIcon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetHuaweiSmallIcon() string {
	if o == nil || o.HuaweiSmallIcon.Get() == nil {
		var ret string
		return ret
	}
	return *o.HuaweiSmallIcon.Get()
}

// GetHuaweiSmallIconOk returns a tuple with the HuaweiSmallIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetHuaweiSmallIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HuaweiSmallIcon.Get(), o.HuaweiSmallIcon.IsSet()
}

// HasHuaweiSmallIcon returns a boolean if a field has been set.
func (o *Notification) HasHuaweiSmallIcon() bool {
	if o != nil && o.HuaweiSmallIcon.IsSet() {
		return true
	}

	return false
}

// SetHuaweiSmallIcon gets a reference to the given NullableString and assigns it to the HuaweiSmallIcon field.
func (o *Notification) SetHuaweiSmallIcon(v string) {
	o.HuaweiSmallIcon.Set(&v)
}
// SetHuaweiSmallIconNil sets the value for HuaweiSmallIcon to be an explicit nil
func (o *Notification) SetHuaweiSmallIconNil() {
	o.HuaweiSmallIcon.Set(nil)
}

// UnsetHuaweiSmallIcon ensures that no value is present for HuaweiSmallIcon, not even an explicit nil
func (o *Notification) UnsetHuaweiSmallIcon() {
	o.HuaweiSmallIcon.Unset()
}

// GetLargeIcon returns the LargeIcon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetLargeIcon() string {
	if o == nil || o.LargeIcon.Get() == nil {
		var ret string
		return ret
	}
	return *o.LargeIcon.Get()
}

// GetLargeIconOk returns a tuple with the LargeIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetLargeIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LargeIcon.Get(), o.LargeIcon.IsSet()
}

// HasLargeIcon returns a boolean if a field has been set.
func (o *Notification) HasLargeIcon() bool {
	if o != nil && o.LargeIcon.IsSet() {
		return true
	}

	return false
}

// SetLargeIcon gets a reference to the given NullableString and assigns it to the LargeIcon field.
func (o *Notification) SetLargeIcon(v string) {
	o.LargeIcon.Set(&v)
}
// SetLargeIconNil sets the value for LargeIcon to be an explicit nil
func (o *Notification) SetLargeIconNil() {
	o.LargeIcon.Set(nil)
}

// UnsetLargeIcon ensures that no value is present for LargeIcon, not even an explicit nil
func (o *Notification) UnsetLargeIcon() {
	o.LargeIcon.Unset()
}

// GetHuaweiLargeIcon returns the HuaweiLargeIcon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetHuaweiLargeIcon() string {
	if o == nil || o.HuaweiLargeIcon.Get() == nil {
		var ret string
		return ret
	}
	return *o.HuaweiLargeIcon.Get()
}

// GetHuaweiLargeIconOk returns a tuple with the HuaweiLargeIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetHuaweiLargeIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HuaweiLargeIcon.Get(), o.HuaweiLargeIcon.IsSet()
}

// HasHuaweiLargeIcon returns a boolean if a field has been set.
func (o *Notification) HasHuaweiLargeIcon() bool {
	if o != nil && o.HuaweiLargeIcon.IsSet() {
		return true
	}

	return false
}

// SetHuaweiLargeIcon gets a reference to the given NullableString and assigns it to the HuaweiLargeIcon field.
func (o *Notification) SetHuaweiLargeIcon(v string) {
	o.HuaweiLargeIcon.Set(&v)
}
// SetHuaweiLargeIconNil sets the value for HuaweiLargeIcon to be an explicit nil
func (o *Notification) SetHuaweiLargeIconNil() {
	o.HuaweiLargeIcon.Set(nil)
}

// UnsetHuaweiLargeIcon ensures that no value is present for HuaweiLargeIcon, not even an explicit nil
func (o *Notification) UnsetHuaweiLargeIcon() {
	o.HuaweiLargeIcon.Unset()
}

// GetAdmSmallIcon returns the AdmSmallIcon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetAdmSmallIcon() string {
	if o == nil || o.AdmSmallIcon.Get() == nil {
		var ret string
		return ret
	}
	return *o.AdmSmallIcon.Get()
}

// GetAdmSmallIconOk returns a tuple with the AdmSmallIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetAdmSmallIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdmSmallIcon.Get(), o.AdmSmallIcon.IsSet()
}

// HasAdmSmallIcon returns a boolean if a field has been set.
func (o *Notification) HasAdmSmallIcon() bool {
	if o != nil && o.AdmSmallIcon.IsSet() {
		return true
	}

	return false
}

// SetAdmSmallIcon gets a reference to the given NullableString and assigns it to the AdmSmallIcon field.
func (o *Notification) SetAdmSmallIcon(v string) {
	o.AdmSmallIcon.Set(&v)
}
// SetAdmSmallIconNil sets the value for AdmSmallIcon to be an explicit nil
func (o *Notification) SetAdmSmallIconNil() {
	o.AdmSmallIcon.Set(nil)
}

// UnsetAdmSmallIcon ensures that no value is present for AdmSmallIcon, not even an explicit nil
func (o *Notification) UnsetAdmSmallIcon() {
	o.AdmSmallIcon.Unset()
}

// GetAdmLargeIcon returns the AdmLargeIcon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetAdmLargeIcon() string {
	if o == nil || o.AdmLargeIcon.Get() == nil {
		var ret string
		return ret
	}
	return *o.AdmLargeIcon.Get()
}

// GetAdmLargeIconOk returns a tuple with the AdmLargeIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetAdmLargeIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdmLargeIcon.Get(), o.AdmLargeIcon.IsSet()
}

// HasAdmLargeIcon returns a boolean if a field has been set.
func (o *Notification) HasAdmLargeIcon() bool {
	if o != nil && o.AdmLargeIcon.IsSet() {
		return true
	}

	return false
}

// SetAdmLargeIcon gets a reference to the given NullableString and assigns it to the AdmLargeIcon field.
func (o *Notification) SetAdmLargeIcon(v string) {
	o.AdmLargeIcon.Set(&v)
}
// SetAdmLargeIconNil sets the value for AdmLargeIcon to be an explicit nil
func (o *Notification) SetAdmLargeIconNil() {
	o.AdmLargeIcon.Set(nil)
}

// UnsetAdmLargeIcon ensures that no value is present for AdmLargeIcon, not even an explicit nil
func (o *Notification) UnsetAdmLargeIcon() {
	o.AdmLargeIcon.Unset()
}

// GetChromeWebIcon returns the ChromeWebIcon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetChromeWebIcon() string {
	if o == nil || o.ChromeWebIcon.Get() == nil {
		var ret string
		return ret
	}
	return *o.ChromeWebIcon.Get()
}

// GetChromeWebIconOk returns a tuple with the ChromeWebIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetChromeWebIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChromeWebIcon.Get(), o.ChromeWebIcon.IsSet()
}

// HasChromeWebIcon returns a boolean if a field has been set.
func (o *Notification) HasChromeWebIcon() bool {
	if o != nil && o.ChromeWebIcon.IsSet() {
		return true
	}

	return false
}

// SetChromeWebIcon gets a reference to the given NullableString and assigns it to the ChromeWebIcon field.
func (o *Notification) SetChromeWebIcon(v string) {
	o.ChromeWebIcon.Set(&v)
}
// SetChromeWebIconNil sets the value for ChromeWebIcon to be an explicit nil
func (o *Notification) SetChromeWebIconNil() {
	o.ChromeWebIcon.Set(nil)
}

// UnsetChromeWebIcon ensures that no value is present for ChromeWebIcon, not even an explicit nil
func (o *Notification) UnsetChromeWebIcon() {
	o.ChromeWebIcon.Unset()
}

// GetChromeWebBadge returns the ChromeWebBadge field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetChromeWebBadge() string {
	if o == nil || o.ChromeWebBadge.Get() == nil {
		var ret string
		return ret
	}
	return *o.ChromeWebBadge.Get()
}

// GetChromeWebBadgeOk returns a tuple with the ChromeWebBadge field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetChromeWebBadgeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChromeWebBadge.Get(), o.ChromeWebBadge.IsSet()
}

// HasChromeWebBadge returns a boolean if a field has been set.
func (o *Notification) HasChromeWebBadge() bool {
	if o != nil && o.ChromeWebBadge.IsSet() {
		return true
	}

	return false
}

// SetChromeWebBadge gets a reference to the given NullableString and assigns it to the ChromeWebBadge field.
func (o *Notification) SetChromeWebBadge(v string) {
	o.ChromeWebBadge.Set(&v)
}
// SetChromeWebBadgeNil sets the value for ChromeWebBadge to be an explicit nil
func (o *Notification) SetChromeWebBadgeNil() {
	o.ChromeWebBadge.Set(nil)
}

// UnsetChromeWebBadge ensures that no value is present for ChromeWebBadge, not even an explicit nil
func (o *Notification) UnsetChromeWebBadge() {
	o.ChromeWebBadge.Unset()
}

// GetFirefoxIcon returns the FirefoxIcon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetFirefoxIcon() string {
	if o == nil || o.FirefoxIcon.Get() == nil {
		var ret string
		return ret
	}
	return *o.FirefoxIcon.Get()
}

// GetFirefoxIconOk returns a tuple with the FirefoxIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetFirefoxIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirefoxIcon.Get(), o.FirefoxIcon.IsSet()
}

// HasFirefoxIcon returns a boolean if a field has been set.
func (o *Notification) HasFirefoxIcon() bool {
	if o != nil && o.FirefoxIcon.IsSet() {
		return true
	}

	return false
}

// SetFirefoxIcon gets a reference to the given NullableString and assigns it to the FirefoxIcon field.
func (o *Notification) SetFirefoxIcon(v string) {
	o.FirefoxIcon.Set(&v)
}
// SetFirefoxIconNil sets the value for FirefoxIcon to be an explicit nil
func (o *Notification) SetFirefoxIconNil() {
	o.FirefoxIcon.Set(nil)
}

// UnsetFirefoxIcon ensures that no value is present for FirefoxIcon, not even an explicit nil
func (o *Notification) UnsetFirefoxIcon() {
	o.FirefoxIcon.Unset()
}

// GetChromeIcon returns the ChromeIcon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetChromeIcon() string {
	if o == nil || o.ChromeIcon.Get() == nil {
		var ret string
		return ret
	}
	return *o.ChromeIcon.Get()
}

// GetChromeIconOk returns a tuple with the ChromeIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetChromeIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChromeIcon.Get(), o.ChromeIcon.IsSet()
}

// HasChromeIcon returns a boolean if a field has been set.
func (o *Notification) HasChromeIcon() bool {
	if o != nil && o.ChromeIcon.IsSet() {
		return true
	}

	return false
}

// SetChromeIcon gets a reference to the given NullableString and assigns it to the ChromeIcon field.
func (o *Notification) SetChromeIcon(v string) {
	o.ChromeIcon.Set(&v)
}
// SetChromeIconNil sets the value for ChromeIcon to be an explicit nil
func (o *Notification) SetChromeIconNil() {
	o.ChromeIcon.Set(nil)
}

// UnsetChromeIcon ensures that no value is present for ChromeIcon, not even an explicit nil
func (o *Notification) UnsetChromeIcon() {
	o.ChromeIcon.Unset()
}

// GetIosSound returns the IosSound field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetIosSound() string {
	if o == nil || o.IosSound.Get() == nil {
		var ret string
		return ret
	}
	return *o.IosSound.Get()
}

// GetIosSoundOk returns a tuple with the IosSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetIosSoundOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IosSound.Get(), o.IosSound.IsSet()
}

// HasIosSound returns a boolean if a field has been set.
func (o *Notification) HasIosSound() bool {
	if o != nil && o.IosSound.IsSet() {
		return true
	}

	return false
}

// SetIosSound gets a reference to the given NullableString and assigns it to the IosSound field.
func (o *Notification) SetIosSound(v string) {
	o.IosSound.Set(&v)
}
// SetIosSoundNil sets the value for IosSound to be an explicit nil
func (o *Notification) SetIosSoundNil() {
	o.IosSound.Set(nil)
}

// UnsetIosSound ensures that no value is present for IosSound, not even an explicit nil
func (o *Notification) UnsetIosSound() {
	o.IosSound.Unset()
}

// GetAndroidSound returns the AndroidSound field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetAndroidSound() string {
	if o == nil || o.AndroidSound.Get() == nil {
		var ret string
		return ret
	}
	return *o.AndroidSound.Get()
}

// GetAndroidSoundOk returns a tuple with the AndroidSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetAndroidSoundOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AndroidSound.Get(), o.AndroidSound.IsSet()
}

// HasAndroidSound returns a boolean if a field has been set.
func (o *Notification) HasAndroidSound() bool {
	if o != nil && o.AndroidSound.IsSet() {
		return true
	}

	return false
}

// SetAndroidSound gets a reference to the given NullableString and assigns it to the AndroidSound field.
func (o *Notification) SetAndroidSound(v string) {
	o.AndroidSound.Set(&v)
}
// SetAndroidSoundNil sets the value for AndroidSound to be an explicit nil
func (o *Notification) SetAndroidSoundNil() {
	o.AndroidSound.Set(nil)
}

// UnsetAndroidSound ensures that no value is present for AndroidSound, not even an explicit nil
func (o *Notification) UnsetAndroidSound() {
	o.AndroidSound.Unset()
}

// GetHuaweiSound returns the HuaweiSound field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetHuaweiSound() string {
	if o == nil || o.HuaweiSound.Get() == nil {
		var ret string
		return ret
	}
	return *o.HuaweiSound.Get()
}

// GetHuaweiSoundOk returns a tuple with the HuaweiSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetHuaweiSoundOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HuaweiSound.Get(), o.HuaweiSound.IsSet()
}

// HasHuaweiSound returns a boolean if a field has been set.
func (o *Notification) HasHuaweiSound() bool {
	if o != nil && o.HuaweiSound.IsSet() {
		return true
	}

	return false
}

// SetHuaweiSound gets a reference to the given NullableString and assigns it to the HuaweiSound field.
func (o *Notification) SetHuaweiSound(v string) {
	o.HuaweiSound.Set(&v)
}
// SetHuaweiSoundNil sets the value for HuaweiSound to be an explicit nil
func (o *Notification) SetHuaweiSoundNil() {
	o.HuaweiSound.Set(nil)
}

// UnsetHuaweiSound ensures that no value is present for HuaweiSound, not even an explicit nil
func (o *Notification) UnsetHuaweiSound() {
	o.HuaweiSound.Unset()
}

// GetAdmSound returns the AdmSound field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetAdmSound() string {
	if o == nil || o.AdmSound.Get() == nil {
		var ret string
		return ret
	}
	return *o.AdmSound.Get()
}

// GetAdmSoundOk returns a tuple with the AdmSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetAdmSoundOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdmSound.Get(), o.AdmSound.IsSet()
}

// HasAdmSound returns a boolean if a field has been set.
func (o *Notification) HasAdmSound() bool {
	if o != nil && o.AdmSound.IsSet() {
		return true
	}

	return false
}

// SetAdmSound gets a reference to the given NullableString and assigns it to the AdmSound field.
func (o *Notification) SetAdmSound(v string) {
	o.AdmSound.Set(&v)
}
// SetAdmSoundNil sets the value for AdmSound to be an explicit nil
func (o *Notification) SetAdmSoundNil() {
	o.AdmSound.Set(nil)
}

// UnsetAdmSound ensures that no value is present for AdmSound, not even an explicit nil
func (o *Notification) UnsetAdmSound() {
	o.AdmSound.Unset()
}

// GetWpWnsSound returns the WpWnsSound field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetWpWnsSound() string {
	if o == nil || o.WpWnsSound.Get() == nil {
		var ret string
		return ret
	}
	return *o.WpWnsSound.Get()
}

// GetWpWnsSoundOk returns a tuple with the WpWnsSound field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetWpWnsSoundOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WpWnsSound.Get(), o.WpWnsSound.IsSet()
}

// HasWpWnsSound returns a boolean if a field has been set.
func (o *Notification) HasWpWnsSound() bool {
	if o != nil && o.WpWnsSound.IsSet() {
		return true
	}

	return false
}

// SetWpWnsSound gets a reference to the given NullableString and assigns it to the WpWnsSound field.
func (o *Notification) SetWpWnsSound(v string) {
	o.WpWnsSound.Set(&v)
}
// SetWpWnsSoundNil sets the value for WpWnsSound to be an explicit nil
func (o *Notification) SetWpWnsSoundNil() {
	o.WpWnsSound.Set(nil)
}

// UnsetWpWnsSound ensures that no value is present for WpWnsSound, not even an explicit nil
func (o *Notification) UnsetWpWnsSound() {
	o.WpWnsSound.Unset()
}

// GetAndroidLedColor returns the AndroidLedColor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetAndroidLedColor() string {
	if o == nil || o.AndroidLedColor.Get() == nil {
		var ret string
		return ret
	}
	return *o.AndroidLedColor.Get()
}

// GetAndroidLedColorOk returns a tuple with the AndroidLedColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetAndroidLedColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AndroidLedColor.Get(), o.AndroidLedColor.IsSet()
}

// HasAndroidLedColor returns a boolean if a field has been set.
func (o *Notification) HasAndroidLedColor() bool {
	if o != nil && o.AndroidLedColor.IsSet() {
		return true
	}

	return false
}

// SetAndroidLedColor gets a reference to the given NullableString and assigns it to the AndroidLedColor field.
func (o *Notification) SetAndroidLedColor(v string) {
	o.AndroidLedColor.Set(&v)
}
// SetAndroidLedColorNil sets the value for AndroidLedColor to be an explicit nil
func (o *Notification) SetAndroidLedColorNil() {
	o.AndroidLedColor.Set(nil)
}

// UnsetAndroidLedColor ensures that no value is present for AndroidLedColor, not even an explicit nil
func (o *Notification) UnsetAndroidLedColor() {
	o.AndroidLedColor.Unset()
}

// GetHuaweiLedColor returns the HuaweiLedColor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetHuaweiLedColor() string {
	if o == nil || o.HuaweiLedColor.Get() == nil {
		var ret string
		return ret
	}
	return *o.HuaweiLedColor.Get()
}

// GetHuaweiLedColorOk returns a tuple with the HuaweiLedColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetHuaweiLedColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HuaweiLedColor.Get(), o.HuaweiLedColor.IsSet()
}

// HasHuaweiLedColor returns a boolean if a field has been set.
func (o *Notification) HasHuaweiLedColor() bool {
	if o != nil && o.HuaweiLedColor.IsSet() {
		return true
	}

	return false
}

// SetHuaweiLedColor gets a reference to the given NullableString and assigns it to the HuaweiLedColor field.
func (o *Notification) SetHuaweiLedColor(v string) {
	o.HuaweiLedColor.Set(&v)
}
// SetHuaweiLedColorNil sets the value for HuaweiLedColor to be an explicit nil
func (o *Notification) SetHuaweiLedColorNil() {
	o.HuaweiLedColor.Set(nil)
}

// UnsetHuaweiLedColor ensures that no value is present for HuaweiLedColor, not even an explicit nil
func (o *Notification) UnsetHuaweiLedColor() {
	o.HuaweiLedColor.Unset()
}

// GetAndroidAccentColor returns the AndroidAccentColor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetAndroidAccentColor() string {
	if o == nil || o.AndroidAccentColor.Get() == nil {
		var ret string
		return ret
	}
	return *o.AndroidAccentColor.Get()
}

// GetAndroidAccentColorOk returns a tuple with the AndroidAccentColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetAndroidAccentColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AndroidAccentColor.Get(), o.AndroidAccentColor.IsSet()
}

// HasAndroidAccentColor returns a boolean if a field has been set.
func (o *Notification) HasAndroidAccentColor() bool {
	if o != nil && o.AndroidAccentColor.IsSet() {
		return true
	}

	return false
}

// SetAndroidAccentColor gets a reference to the given NullableString and assigns it to the AndroidAccentColor field.
func (o *Notification) SetAndroidAccentColor(v string) {
	o.AndroidAccentColor.Set(&v)
}
// SetAndroidAccentColorNil sets the value for AndroidAccentColor to be an explicit nil
func (o *Notification) SetAndroidAccentColorNil() {
	o.AndroidAccentColor.Set(nil)
}

// UnsetAndroidAccentColor ensures that no value is present for AndroidAccentColor, not even an explicit nil
func (o *Notification) UnsetAndroidAccentColor() {
	o.AndroidAccentColor.Unset()
}

// GetHuaweiAccentColor returns the HuaweiAccentColor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetHuaweiAccentColor() string {
	if o == nil || o.HuaweiAccentColor.Get() == nil {
		var ret string
		return ret
	}
	return *o.HuaweiAccentColor.Get()
}

// GetHuaweiAccentColorOk returns a tuple with the HuaweiAccentColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetHuaweiAccentColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HuaweiAccentColor.Get(), o.HuaweiAccentColor.IsSet()
}

// HasHuaweiAccentColor returns a boolean if a field has been set.
func (o *Notification) HasHuaweiAccentColor() bool {
	if o != nil && o.HuaweiAccentColor.IsSet() {
		return true
	}

	return false
}

// SetHuaweiAccentColor gets a reference to the given NullableString and assigns it to the HuaweiAccentColor field.
func (o *Notification) SetHuaweiAccentColor(v string) {
	o.HuaweiAccentColor.Set(&v)
}
// SetHuaweiAccentColorNil sets the value for HuaweiAccentColor to be an explicit nil
func (o *Notification) SetHuaweiAccentColorNil() {
	o.HuaweiAccentColor.Set(nil)
}

// UnsetHuaweiAccentColor ensures that no value is present for HuaweiAccentColor, not even an explicit nil
func (o *Notification) UnsetHuaweiAccentColor() {
	o.HuaweiAccentColor.Unset()
}

// GetAndroidVisibility returns the AndroidVisibility field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetAndroidVisibility() int32 {
	if o == nil || o.AndroidVisibility.Get() == nil {
		var ret int32
		return ret
	}
	return *o.AndroidVisibility.Get()
}

// GetAndroidVisibilityOk returns a tuple with the AndroidVisibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetAndroidVisibilityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AndroidVisibility.Get(), o.AndroidVisibility.IsSet()
}

// HasAndroidVisibility returns a boolean if a field has been set.
func (o *Notification) HasAndroidVisibility() bool {
	if o != nil && o.AndroidVisibility.IsSet() {
		return true
	}

	return false
}

// SetAndroidVisibility gets a reference to the given NullableInt32 and assigns it to the AndroidVisibility field.
func (o *Notification) SetAndroidVisibility(v int32) {
	o.AndroidVisibility.Set(&v)
}
// SetAndroidVisibilityNil sets the value for AndroidVisibility to be an explicit nil
func (o *Notification) SetAndroidVisibilityNil() {
	o.AndroidVisibility.Set(nil)
}

// UnsetAndroidVisibility ensures that no value is present for AndroidVisibility, not even an explicit nil
func (o *Notification) UnsetAndroidVisibility() {
	o.AndroidVisibility.Unset()
}

// GetHuaweiVisibility returns the HuaweiVisibility field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetHuaweiVisibility() int32 {
	if o == nil || o.HuaweiVisibility.Get() == nil {
		var ret int32
		return ret
	}
	return *o.HuaweiVisibility.Get()
}

// GetHuaweiVisibilityOk returns a tuple with the HuaweiVisibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetHuaweiVisibilityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HuaweiVisibility.Get(), o.HuaweiVisibility.IsSet()
}

// HasHuaweiVisibility returns a boolean if a field has been set.
func (o *Notification) HasHuaweiVisibility() bool {
	if o != nil && o.HuaweiVisibility.IsSet() {
		return true
	}

	return false
}

// SetHuaweiVisibility gets a reference to the given NullableInt32 and assigns it to the HuaweiVisibility field.
func (o *Notification) SetHuaweiVisibility(v int32) {
	o.HuaweiVisibility.Set(&v)
}
// SetHuaweiVisibilityNil sets the value for HuaweiVisibility to be an explicit nil
func (o *Notification) SetHuaweiVisibilityNil() {
	o.HuaweiVisibility.Set(nil)
}

// UnsetHuaweiVisibility ensures that no value is present for HuaweiVisibility, not even an explicit nil
func (o *Notification) UnsetHuaweiVisibility() {
	o.HuaweiVisibility.Unset()
}

// GetIosBadgeType returns the IosBadgeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetIosBadgeType() string {
	if o == nil || o.IosBadgeType.Get() == nil {
		var ret string
		return ret
	}
	return *o.IosBadgeType.Get()
}

// GetIosBadgeTypeOk returns a tuple with the IosBadgeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetIosBadgeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IosBadgeType.Get(), o.IosBadgeType.IsSet()
}

// HasIosBadgeType returns a boolean if a field has been set.
func (o *Notification) HasIosBadgeType() bool {
	if o != nil && o.IosBadgeType.IsSet() {
		return true
	}

	return false
}

// SetIosBadgeType gets a reference to the given NullableString and assigns it to the IosBadgeType field.
func (o *Notification) SetIosBadgeType(v string) {
	o.IosBadgeType.Set(&v)
}
// SetIosBadgeTypeNil sets the value for IosBadgeType to be an explicit nil
func (o *Notification) SetIosBadgeTypeNil() {
	o.IosBadgeType.Set(nil)
}

// UnsetIosBadgeType ensures that no value is present for IosBadgeType, not even an explicit nil
func (o *Notification) UnsetIosBadgeType() {
	o.IosBadgeType.Unset()
}

// GetIosBadgeCount returns the IosBadgeCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetIosBadgeCount() int32 {
	if o == nil || o.IosBadgeCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.IosBadgeCount.Get()
}

// GetIosBadgeCountOk returns a tuple with the IosBadgeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetIosBadgeCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.IosBadgeCount.Get(), o.IosBadgeCount.IsSet()
}

// HasIosBadgeCount returns a boolean if a field has been set.
func (o *Notification) HasIosBadgeCount() bool {
	if o != nil && o.IosBadgeCount.IsSet() {
		return true
	}

	return false
}

// SetIosBadgeCount gets a reference to the given NullableInt32 and assigns it to the IosBadgeCount field.
func (o *Notification) SetIosBadgeCount(v int32) {
	o.IosBadgeCount.Set(&v)
}
// SetIosBadgeCountNil sets the value for IosBadgeCount to be an explicit nil
func (o *Notification) SetIosBadgeCountNil() {
	o.IosBadgeCount.Set(nil)
}

// UnsetIosBadgeCount ensures that no value is present for IosBadgeCount, not even an explicit nil
func (o *Notification) UnsetIosBadgeCount() {
	o.IosBadgeCount.Unset()
}

// GetCollapseId returns the CollapseId field value if set, zero value otherwise.
func (o *Notification) GetCollapseId() string {
	if o == nil || o.CollapseId == nil {
		var ret string
		return ret
	}
	return *o.CollapseId
}

// GetCollapseIdOk returns a tuple with the CollapseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetCollapseIdOk() (*string, bool) {
	if o == nil || o.CollapseId == nil {
		return nil, false
	}
	return o.CollapseId, true
}

// HasCollapseId returns a boolean if a field has been set.
func (o *Notification) HasCollapseId() bool {
	if o != nil && o.CollapseId != nil {
		return true
	}

	return false
}

// SetCollapseId gets a reference to the given string and assigns it to the CollapseId field.
func (o *Notification) SetCollapseId(v string) {
	o.CollapseId = &v
}

// GetWebPushTopic returns the WebPushTopic field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetWebPushTopic() string {
	if o == nil || o.WebPushTopic.Get() == nil {
		var ret string
		return ret
	}
	return *o.WebPushTopic.Get()
}

// GetWebPushTopicOk returns a tuple with the WebPushTopic field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetWebPushTopicOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebPushTopic.Get(), o.WebPushTopic.IsSet()
}

// HasWebPushTopic returns a boolean if a field has been set.
func (o *Notification) HasWebPushTopic() bool {
	if o != nil && o.WebPushTopic.IsSet() {
		return true
	}

	return false
}

// SetWebPushTopic gets a reference to the given NullableString and assigns it to the WebPushTopic field.
func (o *Notification) SetWebPushTopic(v string) {
	o.WebPushTopic.Set(&v)
}
// SetWebPushTopicNil sets the value for WebPushTopic to be an explicit nil
func (o *Notification) SetWebPushTopicNil() {
	o.WebPushTopic.Set(nil)
}

// UnsetWebPushTopic ensures that no value is present for WebPushTopic, not even an explicit nil
func (o *Notification) UnsetWebPushTopic() {
	o.WebPushTopic.Unset()
}

// GetApnsAlert returns the ApnsAlert field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetApnsAlert() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.ApnsAlert
}

// GetApnsAlertOk returns a tuple with the ApnsAlert field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetApnsAlertOk() (map[string]interface{}, bool) {
	if o == nil || o.ApnsAlert == nil {
		return nil, false
	}
	return o.ApnsAlert, true
}

// HasApnsAlert returns a boolean if a field has been set.
func (o *Notification) HasApnsAlert() bool {
	if o != nil && o.ApnsAlert != nil {
		return true
	}

	return false
}

// SetApnsAlert gets a reference to the given map[string]interface{} and assigns it to the ApnsAlert field.
func (o *Notification) SetApnsAlert(v map[string]interface{}) {
	o.ApnsAlert = v
}

// GetDelayedOption returns the DelayedOption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetDelayedOption() string {
	if o == nil || o.DelayedOption.Get() == nil {
		var ret string
		return ret
	}
	return *o.DelayedOption.Get()
}

// GetDelayedOptionOk returns a tuple with the DelayedOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetDelayedOptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DelayedOption.Get(), o.DelayedOption.IsSet()
}

// HasDelayedOption returns a boolean if a field has been set.
func (o *Notification) HasDelayedOption() bool {
	if o != nil && o.DelayedOption.IsSet() {
		return true
	}

	return false
}

// SetDelayedOption gets a reference to the given NullableString and assigns it to the DelayedOption field.
func (o *Notification) SetDelayedOption(v string) {
	o.DelayedOption.Set(&v)
}
// SetDelayedOptionNil sets the value for DelayedOption to be an explicit nil
func (o *Notification) SetDelayedOptionNil() {
	o.DelayedOption.Set(nil)
}

// UnsetDelayedOption ensures that no value is present for DelayedOption, not even an explicit nil
func (o *Notification) UnsetDelayedOption() {
	o.DelayedOption.Unset()
}

// GetDeliveryTimeOfDay returns the DeliveryTimeOfDay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetDeliveryTimeOfDay() string {
	if o == nil || o.DeliveryTimeOfDay.Get() == nil {
		var ret string
		return ret
	}
	return *o.DeliveryTimeOfDay.Get()
}

// GetDeliveryTimeOfDayOk returns a tuple with the DeliveryTimeOfDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetDeliveryTimeOfDayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeliveryTimeOfDay.Get(), o.DeliveryTimeOfDay.IsSet()
}

// HasDeliveryTimeOfDay returns a boolean if a field has been set.
func (o *Notification) HasDeliveryTimeOfDay() bool {
	if o != nil && o.DeliveryTimeOfDay.IsSet() {
		return true
	}

	return false
}

// SetDeliveryTimeOfDay gets a reference to the given NullableString and assigns it to the DeliveryTimeOfDay field.
func (o *Notification) SetDeliveryTimeOfDay(v string) {
	o.DeliveryTimeOfDay.Set(&v)
}
// SetDeliveryTimeOfDayNil sets the value for DeliveryTimeOfDay to be an explicit nil
func (o *Notification) SetDeliveryTimeOfDayNil() {
	o.DeliveryTimeOfDay.Set(nil)
}

// UnsetDeliveryTimeOfDay ensures that no value is present for DeliveryTimeOfDay, not even an explicit nil
func (o *Notification) UnsetDeliveryTimeOfDay() {
	o.DeliveryTimeOfDay.Unset()
}

// GetTtl returns the Ttl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetTtl() int32 {
	if o == nil || o.Ttl.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Ttl.Get()
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetTtlOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ttl.Get(), o.Ttl.IsSet()
}

// HasTtl returns a boolean if a field has been set.
func (o *Notification) HasTtl() bool {
	if o != nil && o.Ttl.IsSet() {
		return true
	}

	return false
}

// SetTtl gets a reference to the given NullableInt32 and assigns it to the Ttl field.
func (o *Notification) SetTtl(v int32) {
	o.Ttl.Set(&v)
}
// SetTtlNil sets the value for Ttl to be an explicit nil
func (o *Notification) SetTtlNil() {
	o.Ttl.Set(nil)
}

// UnsetTtl ensures that no value is present for Ttl, not even an explicit nil
func (o *Notification) UnsetTtl() {
	o.Ttl.Unset()
}

// GetPriority returns the Priority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetPriority() int32 {
	if o == nil || o.Priority.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Priority.Get()
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Priority.Get(), o.Priority.IsSet()
}

// HasPriority returns a boolean if a field has been set.
func (o *Notification) HasPriority() bool {
	if o != nil && o.Priority.IsSet() {
		return true
	}

	return false
}

// SetPriority gets a reference to the given NullableInt32 and assigns it to the Priority field.
func (o *Notification) SetPriority(v int32) {
	o.Priority.Set(&v)
}
// SetPriorityNil sets the value for Priority to be an explicit nil
func (o *Notification) SetPriorityNil() {
	o.Priority.Set(nil)
}

// UnsetPriority ensures that no value is present for Priority, not even an explicit nil
func (o *Notification) UnsetPriority() {
	o.Priority.Unset()
}

// GetApnsPushTypeOverride returns the ApnsPushTypeOverride field value if set, zero value otherwise.
func (o *Notification) GetApnsPushTypeOverride() string {
	if o == nil || o.ApnsPushTypeOverride == nil {
		var ret string
		return ret
	}
	return *o.ApnsPushTypeOverride
}

// GetApnsPushTypeOverrideOk returns a tuple with the ApnsPushTypeOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetApnsPushTypeOverrideOk() (*string, bool) {
	if o == nil || o.ApnsPushTypeOverride == nil {
		return nil, false
	}
	return o.ApnsPushTypeOverride, true
}

// HasApnsPushTypeOverride returns a boolean if a field has been set.
func (o *Notification) HasApnsPushTypeOverride() bool {
	if o != nil && o.ApnsPushTypeOverride != nil {
		return true
	}

	return false
}

// SetApnsPushTypeOverride gets a reference to the given string and assigns it to the ApnsPushTypeOverride field.
func (o *Notification) SetApnsPushTypeOverride(v string) {
	o.ApnsPushTypeOverride = &v
}

// GetThrottleRatePerMinute returns the ThrottleRatePerMinute field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetThrottleRatePerMinute() string {
	if o == nil || o.ThrottleRatePerMinute.Get() == nil {
		var ret string
		return ret
	}
	return *o.ThrottleRatePerMinute.Get()
}

// GetThrottleRatePerMinuteOk returns a tuple with the ThrottleRatePerMinute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetThrottleRatePerMinuteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ThrottleRatePerMinute.Get(), o.ThrottleRatePerMinute.IsSet()
}

// HasThrottleRatePerMinute returns a boolean if a field has been set.
func (o *Notification) HasThrottleRatePerMinute() bool {
	if o != nil && o.ThrottleRatePerMinute.IsSet() {
		return true
	}

	return false
}

// SetThrottleRatePerMinute gets a reference to the given NullableString and assigns it to the ThrottleRatePerMinute field.
func (o *Notification) SetThrottleRatePerMinute(v string) {
	o.ThrottleRatePerMinute.Set(&v)
}
// SetThrottleRatePerMinuteNil sets the value for ThrottleRatePerMinute to be an explicit nil
func (o *Notification) SetThrottleRatePerMinuteNil() {
	o.ThrottleRatePerMinute.Set(nil)
}

// UnsetThrottleRatePerMinute ensures that no value is present for ThrottleRatePerMinute, not even an explicit nil
func (o *Notification) UnsetThrottleRatePerMinute() {
	o.ThrottleRatePerMinute.Unset()
}

// GetAndroidGroup returns the AndroidGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetAndroidGroup() string {
	if o == nil || o.AndroidGroup.Get() == nil {
		var ret string
		return ret
	}
	return *o.AndroidGroup.Get()
}

// GetAndroidGroupOk returns a tuple with the AndroidGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetAndroidGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AndroidGroup.Get(), o.AndroidGroup.IsSet()
}

// HasAndroidGroup returns a boolean if a field has been set.
func (o *Notification) HasAndroidGroup() bool {
	if o != nil && o.AndroidGroup.IsSet() {
		return true
	}

	return false
}

// SetAndroidGroup gets a reference to the given NullableString and assigns it to the AndroidGroup field.
func (o *Notification) SetAndroidGroup(v string) {
	o.AndroidGroup.Set(&v)
}
// SetAndroidGroupNil sets the value for AndroidGroup to be an explicit nil
func (o *Notification) SetAndroidGroupNil() {
	o.AndroidGroup.Set(nil)
}

// UnsetAndroidGroup ensures that no value is present for AndroidGroup, not even an explicit nil
func (o *Notification) UnsetAndroidGroup() {
	o.AndroidGroup.Unset()
}

// GetAndroidGroupMessage returns the AndroidGroupMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetAndroidGroupMessage() string {
	if o == nil || o.AndroidGroupMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.AndroidGroupMessage.Get()
}

// GetAndroidGroupMessageOk returns a tuple with the AndroidGroupMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetAndroidGroupMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AndroidGroupMessage.Get(), o.AndroidGroupMessage.IsSet()
}

// HasAndroidGroupMessage returns a boolean if a field has been set.
func (o *Notification) HasAndroidGroupMessage() bool {
	if o != nil && o.AndroidGroupMessage.IsSet() {
		return true
	}

	return false
}

// SetAndroidGroupMessage gets a reference to the given NullableString and assigns it to the AndroidGroupMessage field.
func (o *Notification) SetAndroidGroupMessage(v string) {
	o.AndroidGroupMessage.Set(&v)
}
// SetAndroidGroupMessageNil sets the value for AndroidGroupMessage to be an explicit nil
func (o *Notification) SetAndroidGroupMessageNil() {
	o.AndroidGroupMessage.Set(nil)
}

// UnsetAndroidGroupMessage ensures that no value is present for AndroidGroupMessage, not even an explicit nil
func (o *Notification) UnsetAndroidGroupMessage() {
	o.AndroidGroupMessage.Unset()
}

// GetAdmGroup returns the AdmGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetAdmGroup() string {
	if o == nil || o.AdmGroup.Get() == nil {
		var ret string
		return ret
	}
	return *o.AdmGroup.Get()
}

// GetAdmGroupOk returns a tuple with the AdmGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetAdmGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdmGroup.Get(), o.AdmGroup.IsSet()
}

// HasAdmGroup returns a boolean if a field has been set.
func (o *Notification) HasAdmGroup() bool {
	if o != nil && o.AdmGroup.IsSet() {
		return true
	}

	return false
}

// SetAdmGroup gets a reference to the given NullableString and assigns it to the AdmGroup field.
func (o *Notification) SetAdmGroup(v string) {
	o.AdmGroup.Set(&v)
}
// SetAdmGroupNil sets the value for AdmGroup to be an explicit nil
func (o *Notification) SetAdmGroupNil() {
	o.AdmGroup.Set(nil)
}

// UnsetAdmGroup ensures that no value is present for AdmGroup, not even an explicit nil
func (o *Notification) UnsetAdmGroup() {
	o.AdmGroup.Unset()
}

// GetAdmGroupMessage returns the AdmGroupMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetAdmGroupMessage() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdmGroupMessage
}

// GetAdmGroupMessageOk returns a tuple with the AdmGroupMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetAdmGroupMessageOk() (map[string]interface{}, bool) {
	if o == nil || o.AdmGroupMessage == nil {
		return nil, false
	}
	return o.AdmGroupMessage, true
}

// HasAdmGroupMessage returns a boolean if a field has been set.
func (o *Notification) HasAdmGroupMessage() bool {
	if o != nil && o.AdmGroupMessage != nil {
		return true
	}

	return false
}

// SetAdmGroupMessage gets a reference to the given map[string]interface{} and assigns it to the AdmGroupMessage field.
func (o *Notification) SetAdmGroupMessage(v map[string]interface{}) {
	o.AdmGroupMessage = v
}

// GetThreadId returns the ThreadId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetThreadId() string {
	if o == nil || o.ThreadId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ThreadId.Get()
}

// GetThreadIdOk returns a tuple with the ThreadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetThreadIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ThreadId.Get(), o.ThreadId.IsSet()
}

// HasThreadId returns a boolean if a field has been set.
func (o *Notification) HasThreadId() bool {
	if o != nil && o.ThreadId.IsSet() {
		return true
	}

	return false
}

// SetThreadId gets a reference to the given NullableString and assigns it to the ThreadId field.
func (o *Notification) SetThreadId(v string) {
	o.ThreadId.Set(&v)
}
// SetThreadIdNil sets the value for ThreadId to be an explicit nil
func (o *Notification) SetThreadIdNil() {
	o.ThreadId.Set(nil)
}

// UnsetThreadId ensures that no value is present for ThreadId, not even an explicit nil
func (o *Notification) UnsetThreadId() {
	o.ThreadId.Unset()
}

// GetSummaryArg returns the SummaryArg field value if set, zero value otherwise.
func (o *Notification) GetSummaryArg() string {
	if o == nil || o.SummaryArg == nil {
		var ret string
		return ret
	}
	return *o.SummaryArg
}

// GetSummaryArgOk returns a tuple with the SummaryArg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetSummaryArgOk() (*string, bool) {
	if o == nil || o.SummaryArg == nil {
		return nil, false
	}
	return o.SummaryArg, true
}

// HasSummaryArg returns a boolean if a field has been set.
func (o *Notification) HasSummaryArg() bool {
	if o != nil && o.SummaryArg != nil {
		return true
	}

	return false
}

// SetSummaryArg gets a reference to the given string and assigns it to the SummaryArg field.
func (o *Notification) SetSummaryArg(v string) {
	o.SummaryArg = &v
}

// GetSummaryArgCount returns the SummaryArgCount field value if set, zero value otherwise.
func (o *Notification) GetSummaryArgCount() int32 {
	if o == nil || o.SummaryArgCount == nil {
		var ret int32
		return ret
	}
	return *o.SummaryArgCount
}

// GetSummaryArgCountOk returns a tuple with the SummaryArgCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetSummaryArgCountOk() (*int32, bool) {
	if o == nil || o.SummaryArgCount == nil {
		return nil, false
	}
	return o.SummaryArgCount, true
}

// HasSummaryArgCount returns a boolean if a field has been set.
func (o *Notification) HasSummaryArgCount() bool {
	if o != nil && o.SummaryArgCount != nil {
		return true
	}

	return false
}

// SetSummaryArgCount gets a reference to the given int32 and assigns it to the SummaryArgCount field.
func (o *Notification) SetSummaryArgCount(v int32) {
	o.SummaryArgCount = &v
}

// GetEmailSubject returns the EmailSubject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetEmailSubject() string {
	if o == nil || o.EmailSubject.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmailSubject.Get()
}

// GetEmailSubjectOk returns a tuple with the EmailSubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetEmailSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailSubject.Get(), o.EmailSubject.IsSet()
}

// HasEmailSubject returns a boolean if a field has been set.
func (o *Notification) HasEmailSubject() bool {
	if o != nil && o.EmailSubject.IsSet() {
		return true
	}

	return false
}

// SetEmailSubject gets a reference to the given NullableString and assigns it to the EmailSubject field.
func (o *Notification) SetEmailSubject(v string) {
	o.EmailSubject.Set(&v)
}
// SetEmailSubjectNil sets the value for EmailSubject to be an explicit nil
func (o *Notification) SetEmailSubjectNil() {
	o.EmailSubject.Set(nil)
}

// UnsetEmailSubject ensures that no value is present for EmailSubject, not even an explicit nil
func (o *Notification) UnsetEmailSubject() {
	o.EmailSubject.Unset()
}

// GetEmailBody returns the EmailBody field value if set, zero value otherwise.
func (o *Notification) GetEmailBody() string {
	if o == nil || o.EmailBody == nil {
		var ret string
		return ret
	}
	return *o.EmailBody
}

// GetEmailBodyOk returns a tuple with the EmailBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetEmailBodyOk() (*string, bool) {
	if o == nil || o.EmailBody == nil {
		return nil, false
	}
	return o.EmailBody, true
}

// HasEmailBody returns a boolean if a field has been set.
func (o *Notification) HasEmailBody() bool {
	if o != nil && o.EmailBody != nil {
		return true
	}

	return false
}

// SetEmailBody gets a reference to the given string and assigns it to the EmailBody field.
func (o *Notification) SetEmailBody(v string) {
	o.EmailBody = &v
}

// GetEmailFromName returns the EmailFromName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetEmailFromName() string {
	if o == nil || o.EmailFromName.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmailFromName.Get()
}

// GetEmailFromNameOk returns a tuple with the EmailFromName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetEmailFromNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailFromName.Get(), o.EmailFromName.IsSet()
}

// HasEmailFromName returns a boolean if a field has been set.
func (o *Notification) HasEmailFromName() bool {
	if o != nil && o.EmailFromName.IsSet() {
		return true
	}

	return false
}

// SetEmailFromName gets a reference to the given NullableString and assigns it to the EmailFromName field.
func (o *Notification) SetEmailFromName(v string) {
	o.EmailFromName.Set(&v)
}
// SetEmailFromNameNil sets the value for EmailFromName to be an explicit nil
func (o *Notification) SetEmailFromNameNil() {
	o.EmailFromName.Set(nil)
}

// UnsetEmailFromName ensures that no value is present for EmailFromName, not even an explicit nil
func (o *Notification) UnsetEmailFromName() {
	o.EmailFromName.Unset()
}

// GetEmailFromAddress returns the EmailFromAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetEmailFromAddress() string {
	if o == nil || o.EmailFromAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmailFromAddress.Get()
}

// GetEmailFromAddressOk returns a tuple with the EmailFromAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetEmailFromAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailFromAddress.Get(), o.EmailFromAddress.IsSet()
}

// HasEmailFromAddress returns a boolean if a field has been set.
func (o *Notification) HasEmailFromAddress() bool {
	if o != nil && o.EmailFromAddress.IsSet() {
		return true
	}

	return false
}

// SetEmailFromAddress gets a reference to the given NullableString and assigns it to the EmailFromAddress field.
func (o *Notification) SetEmailFromAddress(v string) {
	o.EmailFromAddress.Set(&v)
}
// SetEmailFromAddressNil sets the value for EmailFromAddress to be an explicit nil
func (o *Notification) SetEmailFromAddressNil() {
	o.EmailFromAddress.Set(nil)
}

// UnsetEmailFromAddress ensures that no value is present for EmailFromAddress, not even an explicit nil
func (o *Notification) UnsetEmailFromAddress() {
	o.EmailFromAddress.Unset()
}

// GetEmailPreheader returns the EmailPreheader field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetEmailPreheader() string {
	if o == nil || o.EmailPreheader.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmailPreheader.Get()
}

// GetEmailPreheaderOk returns a tuple with the EmailPreheader field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetEmailPreheaderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailPreheader.Get(), o.EmailPreheader.IsSet()
}

// HasEmailPreheader returns a boolean if a field has been set.
func (o *Notification) HasEmailPreheader() bool {
	if o != nil && o.EmailPreheader.IsSet() {
		return true
	}

	return false
}

// SetEmailPreheader gets a reference to the given NullableString and assigns it to the EmailPreheader field.
func (o *Notification) SetEmailPreheader(v string) {
	o.EmailPreheader.Set(&v)
}
// SetEmailPreheaderNil sets the value for EmailPreheader to be an explicit nil
func (o *Notification) SetEmailPreheaderNil() {
	o.EmailPreheader.Set(nil)
}

// UnsetEmailPreheader ensures that no value is present for EmailPreheader, not even an explicit nil
func (o *Notification) UnsetEmailPreheader() {
	o.EmailPreheader.Unset()
}

// GetIncludeUnsubscribed returns the IncludeUnsubscribed field value if set, zero value otherwise.
func (o *Notification) GetIncludeUnsubscribed() bool {
	if o == nil || o.IncludeUnsubscribed == nil {
		var ret bool
		return ret
	}
	return *o.IncludeUnsubscribed
}

// GetIncludeUnsubscribedOk returns a tuple with the IncludeUnsubscribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIncludeUnsubscribedOk() (*bool, bool) {
	if o == nil || o.IncludeUnsubscribed == nil {
		return nil, false
	}
	return o.IncludeUnsubscribed, true
}

// HasIncludeUnsubscribed returns a boolean if a field has been set.
func (o *Notification) HasIncludeUnsubscribed() bool {
	if o != nil && o.IncludeUnsubscribed != nil {
		return true
	}

	return false
}

// SetIncludeUnsubscribed gets a reference to the given bool and assigns it to the IncludeUnsubscribed field.
func (o *Notification) SetIncludeUnsubscribed(v bool) {
	o.IncludeUnsubscribed = &v
}

// GetSmsFrom returns the SmsFrom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetSmsFrom() string {
	if o == nil || o.SmsFrom.Get() == nil {
		var ret string
		return ret
	}
	return *o.SmsFrom.Get()
}

// GetSmsFromOk returns a tuple with the SmsFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetSmsFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SmsFrom.Get(), o.SmsFrom.IsSet()
}

// HasSmsFrom returns a boolean if a field has been set.
func (o *Notification) HasSmsFrom() bool {
	if o != nil && o.SmsFrom.IsSet() {
		return true
	}

	return false
}

// SetSmsFrom gets a reference to the given NullableString and assigns it to the SmsFrom field.
func (o *Notification) SetSmsFrom(v string) {
	o.SmsFrom.Set(&v)
}
// SetSmsFromNil sets the value for SmsFrom to be an explicit nil
func (o *Notification) SetSmsFromNil() {
	o.SmsFrom.Set(nil)
}

// UnsetSmsFrom ensures that no value is present for SmsFrom, not even an explicit nil
func (o *Notification) UnsetSmsFrom() {
	o.SmsFrom.Unset()
}

// GetSmsMediaUrls returns the SmsMediaUrls field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetSmsMediaUrls() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SmsMediaUrls
}

// GetSmsMediaUrlsOk returns a tuple with the SmsMediaUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetSmsMediaUrlsOk() ([]string, bool) {
	if o == nil || o.SmsMediaUrls == nil {
		return nil, false
	}
	return o.SmsMediaUrls, true
}

// HasSmsMediaUrls returns a boolean if a field has been set.
func (o *Notification) HasSmsMediaUrls() bool {
	if o != nil && o.SmsMediaUrls != nil {
		return true
	}

	return false
}

// SetSmsMediaUrls gets a reference to the given []string and assigns it to the SmsMediaUrls field.
func (o *Notification) SetSmsMediaUrls(v []string) {
	o.SmsMediaUrls = v
}

// GetFilters returns the Filters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetFilters() []Filter {
	if o == nil {
		var ret []Filter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetFiltersOk() ([]Filter, bool) {
	if o == nil || o.Filters == nil {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *Notification) HasFilters() bool {
	if o != nil && o.Filters != nil {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []Filter and assigns it to the Filters field.
func (o *Notification) SetFilters(v []Filter) {
	o.Filters = v
}

// GetCustomData returns the CustomData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetCustomData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomData
}

// GetCustomDataOk returns a tuple with the CustomData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetCustomDataOk() (map[string]interface{}, bool) {
	if o == nil || o.CustomData == nil {
		return nil, false
	}
	return o.CustomData, true
}

// HasCustomData returns a boolean if a field has been set.
func (o *Notification) HasCustomData() bool {
	if o != nil && o.CustomData != nil {
		return true
	}

	return false
}

// SetCustomData gets a reference to the given map[string]interface{} and assigns it to the CustomData field.
func (o *Notification) SetCustomData(v map[string]interface{}) {
	o.CustomData = v
}

// GetSendAfter returns the SendAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notification) GetSendAfter() time.Time {
	if o == nil || o.SendAfter.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.SendAfter.Get()
}

// GetSendAfterOk returns a tuple with the SendAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notification) GetSendAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.SendAfter.Get(), o.SendAfter.IsSet()
}

// HasSendAfter returns a boolean if a field has been set.
func (o *Notification) HasSendAfter() bool {
	if o != nil && o.SendAfter.IsSet() {
		return true
	}

	return false
}

// SetSendAfter gets a reference to the given NullableTime and assigns it to the SendAfter field.
func (o *Notification) SetSendAfter(v time.Time) {
	o.SendAfter.Set(&v)
}
// SetSendAfterNil sets the value for SendAfter to be an explicit nil
func (o *Notification) SetSendAfterNil() {
	o.SendAfter.Set(nil)
}

// UnsetSendAfter ensures that no value is present for SendAfter, not even an explicit nil
func (o *Notification) UnsetSendAfter() {
	o.SendAfter.Unset()
}

func (o Notification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IncludedSegments != nil {
		toSerialize["included_segments"] = o.IncludedSegments
	}
	if o.ExcludedSegments != nil {
		toSerialize["excluded_segments"] = o.ExcludedSegments
	}
	if o.IncludePlayerIds != nil {
		toSerialize["include_player_ids"] = o.IncludePlayerIds
	}
	if o.IncludeExternalUserIds != nil {
		toSerialize["include_external_user_ids"] = o.IncludeExternalUserIds
	}
	if o.IncludeEmailTokens != nil {
		toSerialize["include_email_tokens"] = o.IncludeEmailTokens
	}
	if o.IncludePhoneNumbers != nil {
		toSerialize["include_phone_numbers"] = o.IncludePhoneNumbers
	}
	if o.IncludeIosTokens != nil {
		toSerialize["include_ios_tokens"] = o.IncludeIosTokens
	}
	if o.IncludeWpWnsUris != nil {
		toSerialize["include_wp_wns_uris"] = o.IncludeWpWnsUris
	}
	if o.IncludeAmazonRegIds != nil {
		toSerialize["include_amazon_reg_ids"] = o.IncludeAmazonRegIds
	}
	if o.IncludeChromeRegIds != nil {
		toSerialize["include_chrome_reg_ids"] = o.IncludeChromeRegIds
	}
	if o.IncludeChromeWebRegIds != nil {
		toSerialize["include_chrome_web_reg_ids"] = o.IncludeChromeWebRegIds
	}
	if o.IncludeAndroidRegIds != nil {
		toSerialize["include_android_reg_ids"] = o.IncludeAndroidRegIds
	}
	if o.IncludeAliases.IsSet() {
		toSerialize["include_aliases"] = o.IncludeAliases.Get()
	}
	if o.TargetChannel != nil {
		toSerialize["target_channel"] = o.TargetChannel
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Aggregation != nil {
		toSerialize["aggregation"] = o.Aggregation
	}
	if o.IsIos.IsSet() {
		toSerialize["isIos"] = o.IsIos.Get()
	}
	if o.IsAndroid.IsSet() {
		toSerialize["isAndroid"] = o.IsAndroid.Get()
	}
	if o.IsHuawei.IsSet() {
		toSerialize["isHuawei"] = o.IsHuawei.Get()
	}
	if o.IsAnyWeb.IsSet() {
		toSerialize["isAnyWeb"] = o.IsAnyWeb.Get()
	}
	if o.IsChromeWeb.IsSet() {
		toSerialize["isChromeWeb"] = o.IsChromeWeb.Get()
	}
	if o.IsFirefox.IsSet() {
		toSerialize["isFirefox"] = o.IsFirefox.Get()
	}
	if o.IsSafari.IsSet() {
		toSerialize["isSafari"] = o.IsSafari.Get()
	}
	if o.IsWPWNS.IsSet() {
		toSerialize["isWP_WNS"] = o.IsWPWNS.Get()
	}
	if o.IsAdm.IsSet() {
		toSerialize["isAdm"] = o.IsAdm.Get()
	}
	if o.IsChrome.IsSet() {
		toSerialize["isChrome"] = o.IsChrome.Get()
	}
	if o.ChannelForExternalUserIds != nil {
		toSerialize["channel_for_external_user_ids"] = o.ChannelForExternalUserIds
	}
	if true {
		toSerialize["app_id"] = o.AppId
	}
	if o.ExternalId.IsSet() {
		toSerialize["external_id"] = o.ExternalId.Get()
	}
	if o.IdempotencyKey.IsSet() {
		toSerialize["idempotency_key"] = o.IdempotencyKey.Get()
	}
	if o.Contents.IsSet() {
		toSerialize["contents"] = o.Contents.Get()
	}
	if o.Headings.IsSet() {
		toSerialize["headings"] = o.Headings.Get()
	}
	if o.Subtitle.IsSet() {
		toSerialize["subtitle"] = o.Subtitle.Get()
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.HuaweiMsgType.IsSet() {
		toSerialize["huawei_msg_type"] = o.HuaweiMsgType.Get()
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	if o.WebUrl.IsSet() {
		toSerialize["web_url"] = o.WebUrl.Get()
	}
	if o.AppUrl.IsSet() {
		toSerialize["app_url"] = o.AppUrl.Get()
	}
	if o.IosAttachments != nil {
		toSerialize["ios_attachments"] = o.IosAttachments
	}
	if o.TemplateId.IsSet() {
		toSerialize["template_id"] = o.TemplateId.Get()
	}
	if o.ContentAvailable.IsSet() {
		toSerialize["content_available"] = o.ContentAvailable.Get()
	}
	if o.MutableContent != nil {
		toSerialize["mutable_content"] = o.MutableContent
	}
	if o.TargetContentIdentifier.IsSet() {
		toSerialize["target_content_identifier"] = o.TargetContentIdentifier.Get()
	}
	if o.BigPicture.IsSet() {
		toSerialize["big_picture"] = o.BigPicture.Get()
	}
	if o.HuaweiBigPicture.IsSet() {
		toSerialize["huawei_big_picture"] = o.HuaweiBigPicture.Get()
	}
	if o.AdmBigPicture.IsSet() {
		toSerialize["adm_big_picture"] = o.AdmBigPicture.Get()
	}
	if o.ChromeBigPicture.IsSet() {
		toSerialize["chrome_big_picture"] = o.ChromeBigPicture.Get()
	}
	if o.ChromeWebImage.IsSet() {
		toSerialize["chrome_web_image"] = o.ChromeWebImage.Get()
	}
	if o.Buttons != nil {
		toSerialize["buttons"] = o.Buttons
	}
	if o.WebButtons != nil {
		toSerialize["web_buttons"] = o.WebButtons
	}
	if o.IosCategory.IsSet() {
		toSerialize["ios_category"] = o.IosCategory.Get()
	}
	if o.AndroidChannelId != nil {
		toSerialize["android_channel_id"] = o.AndroidChannelId
	}
	if o.HuaweiChannelId.IsSet() {
		toSerialize["huawei_channel_id"] = o.HuaweiChannelId.Get()
	}
	if o.ExistingAndroidChannelId != nil {
		toSerialize["existing_android_channel_id"] = o.ExistingAndroidChannelId
	}
	if o.HuaweiExistingChannelId.IsSet() {
		toSerialize["huawei_existing_channel_id"] = o.HuaweiExistingChannelId.Get()
	}
	if o.AndroidBackgroundLayout != nil {
		toSerialize["android_background_layout"] = o.AndroidBackgroundLayout
	}
	if o.SmallIcon.IsSet() {
		toSerialize["small_icon"] = o.SmallIcon.Get()
	}
	if o.HuaweiSmallIcon.IsSet() {
		toSerialize["huawei_small_icon"] = o.HuaweiSmallIcon.Get()
	}
	if o.LargeIcon.IsSet() {
		toSerialize["large_icon"] = o.LargeIcon.Get()
	}
	if o.HuaweiLargeIcon.IsSet() {
		toSerialize["huawei_large_icon"] = o.HuaweiLargeIcon.Get()
	}
	if o.AdmSmallIcon.IsSet() {
		toSerialize["adm_small_icon"] = o.AdmSmallIcon.Get()
	}
	if o.AdmLargeIcon.IsSet() {
		toSerialize["adm_large_icon"] = o.AdmLargeIcon.Get()
	}
	if o.ChromeWebIcon.IsSet() {
		toSerialize["chrome_web_icon"] = o.ChromeWebIcon.Get()
	}
	if o.ChromeWebBadge.IsSet() {
		toSerialize["chrome_web_badge"] = o.ChromeWebBadge.Get()
	}
	if o.FirefoxIcon.IsSet() {
		toSerialize["firefox_icon"] = o.FirefoxIcon.Get()
	}
	if o.ChromeIcon.IsSet() {
		toSerialize["chrome_icon"] = o.ChromeIcon.Get()
	}
	if o.IosSound.IsSet() {
		toSerialize["ios_sound"] = o.IosSound.Get()
	}
	if o.AndroidSound.IsSet() {
		toSerialize["android_sound"] = o.AndroidSound.Get()
	}
	if o.HuaweiSound.IsSet() {
		toSerialize["huawei_sound"] = o.HuaweiSound.Get()
	}
	if o.AdmSound.IsSet() {
		toSerialize["adm_sound"] = o.AdmSound.Get()
	}
	if o.WpWnsSound.IsSet() {
		toSerialize["wp_wns_sound"] = o.WpWnsSound.Get()
	}
	if o.AndroidLedColor.IsSet() {
		toSerialize["android_led_color"] = o.AndroidLedColor.Get()
	}
	if o.HuaweiLedColor.IsSet() {
		toSerialize["huawei_led_color"] = o.HuaweiLedColor.Get()
	}
	if o.AndroidAccentColor.IsSet() {
		toSerialize["android_accent_color"] = o.AndroidAccentColor.Get()
	}
	if o.HuaweiAccentColor.IsSet() {
		toSerialize["huawei_accent_color"] = o.HuaweiAccentColor.Get()
	}
	if o.AndroidVisibility.IsSet() {
		toSerialize["android_visibility"] = o.AndroidVisibility.Get()
	}
	if o.HuaweiVisibility.IsSet() {
		toSerialize["huawei_visibility"] = o.HuaweiVisibility.Get()
	}
	if o.IosBadgeType.IsSet() {
		toSerialize["ios_badgeType"] = o.IosBadgeType.Get()
	}
	if o.IosBadgeCount.IsSet() {
		toSerialize["ios_badgeCount"] = o.IosBadgeCount.Get()
	}
	if o.CollapseId != nil {
		toSerialize["collapse_id"] = o.CollapseId
	}
	if o.WebPushTopic.IsSet() {
		toSerialize["web_push_topic"] = o.WebPushTopic.Get()
	}
	if o.ApnsAlert != nil {
		toSerialize["apns_alert"] = o.ApnsAlert
	}
	if o.DelayedOption.IsSet() {
		toSerialize["delayed_option"] = o.DelayedOption.Get()
	}
	if o.DeliveryTimeOfDay.IsSet() {
		toSerialize["delivery_time_of_day"] = o.DeliveryTimeOfDay.Get()
	}
	if o.Ttl.IsSet() {
		toSerialize["ttl"] = o.Ttl.Get()
	}
	if o.Priority.IsSet() {
		toSerialize["priority"] = o.Priority.Get()
	}
	if o.ApnsPushTypeOverride != nil {
		toSerialize["apns_push_type_override"] = o.ApnsPushTypeOverride
	}
	if o.ThrottleRatePerMinute.IsSet() {
		toSerialize["throttle_rate_per_minute"] = o.ThrottleRatePerMinute.Get()
	}
	if o.AndroidGroup.IsSet() {
		toSerialize["android_group"] = o.AndroidGroup.Get()
	}
	if o.AndroidGroupMessage.IsSet() {
		toSerialize["android_group_message"] = o.AndroidGroupMessage.Get()
	}
	if o.AdmGroup.IsSet() {
		toSerialize["adm_group"] = o.AdmGroup.Get()
	}
	if o.AdmGroupMessage != nil {
		toSerialize["adm_group_message"] = o.AdmGroupMessage
	}
	if o.ThreadId.IsSet() {
		toSerialize["thread_id"] = o.ThreadId.Get()
	}
	if o.SummaryArg != nil {
		toSerialize["summary_arg"] = o.SummaryArg
	}
	if o.SummaryArgCount != nil {
		toSerialize["summary_arg_count"] = o.SummaryArgCount
	}
	if o.EmailSubject.IsSet() {
		toSerialize["email_subject"] = o.EmailSubject.Get()
	}
	if o.EmailBody != nil {
		toSerialize["email_body"] = o.EmailBody
	}
	if o.EmailFromName.IsSet() {
		toSerialize["email_from_name"] = o.EmailFromName.Get()
	}
	if o.EmailFromAddress.IsSet() {
		toSerialize["email_from_address"] = o.EmailFromAddress.Get()
	}
	if o.EmailPreheader.IsSet() {
		toSerialize["email_preheader"] = o.EmailPreheader.Get()
	}
	if o.IncludeUnsubscribed != nil {
		toSerialize["include_unsubscribed"] = o.IncludeUnsubscribed
	}
	if o.SmsFrom.IsSet() {
		toSerialize["sms_from"] = o.SmsFrom.Get()
	}
	if o.SmsMediaUrls != nil {
		toSerialize["sms_media_urls"] = o.SmsMediaUrls
	}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	if o.CustomData != nil {
		toSerialize["custom_data"] = o.CustomData
	}
	if o.SendAfter.IsSet() {
		toSerialize["send_after"] = o.SendAfter.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Notification) UnmarshalJSON(bytes []byte) (err error) {
	varNotification := _Notification{}

	if err = json.Unmarshal(bytes, &varNotification); err == nil {
		*o = Notification(varNotification)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "included_segments")
		delete(additionalProperties, "excluded_segments")
		delete(additionalProperties, "include_player_ids")
		delete(additionalProperties, "include_external_user_ids")
		delete(additionalProperties, "include_email_tokens")
		delete(additionalProperties, "include_phone_numbers")
		delete(additionalProperties, "include_ios_tokens")
		delete(additionalProperties, "include_wp_wns_uris")
		delete(additionalProperties, "include_amazon_reg_ids")
		delete(additionalProperties, "include_chrome_reg_ids")
		delete(additionalProperties, "include_chrome_web_reg_ids")
		delete(additionalProperties, "include_android_reg_ids")
		delete(additionalProperties, "include_aliases")
		delete(additionalProperties, "target_channel")
		delete(additionalProperties, "id")
		delete(additionalProperties, "value")
		delete(additionalProperties, "name")
		delete(additionalProperties, "aggregation")
		delete(additionalProperties, "isIos")
		delete(additionalProperties, "isAndroid")
		delete(additionalProperties, "isHuawei")
		delete(additionalProperties, "isAnyWeb")
		delete(additionalProperties, "isChromeWeb")
		delete(additionalProperties, "isFirefox")
		delete(additionalProperties, "isSafari")
		delete(additionalProperties, "isWP_WNS")
		delete(additionalProperties, "isAdm")
		delete(additionalProperties, "isChrome")
		delete(additionalProperties, "channel_for_external_user_ids")
		delete(additionalProperties, "app_id")
		delete(additionalProperties, "external_id")
		delete(additionalProperties, "idempotency_key")
		delete(additionalProperties, "contents")
		delete(additionalProperties, "headings")
		delete(additionalProperties, "subtitle")
		delete(additionalProperties, "data")
		delete(additionalProperties, "huawei_msg_type")
		delete(additionalProperties, "url")
		delete(additionalProperties, "web_url")
		delete(additionalProperties, "app_url")
		delete(additionalProperties, "ios_attachments")
		delete(additionalProperties, "template_id")
		delete(additionalProperties, "content_available")
		delete(additionalProperties, "mutable_content")
		delete(additionalProperties, "target_content_identifier")
		delete(additionalProperties, "big_picture")
		delete(additionalProperties, "huawei_big_picture")
		delete(additionalProperties, "adm_big_picture")
		delete(additionalProperties, "chrome_big_picture")
		delete(additionalProperties, "chrome_web_image")
		delete(additionalProperties, "buttons")
		delete(additionalProperties, "web_buttons")
		delete(additionalProperties, "ios_category")
		delete(additionalProperties, "android_channel_id")
		delete(additionalProperties, "huawei_channel_id")
		delete(additionalProperties, "existing_android_channel_id")
		delete(additionalProperties, "huawei_existing_channel_id")
		delete(additionalProperties, "android_background_layout")
		delete(additionalProperties, "small_icon")
		delete(additionalProperties, "huawei_small_icon")
		delete(additionalProperties, "large_icon")
		delete(additionalProperties, "huawei_large_icon")
		delete(additionalProperties, "adm_small_icon")
		delete(additionalProperties, "adm_large_icon")
		delete(additionalProperties, "chrome_web_icon")
		delete(additionalProperties, "chrome_web_badge")
		delete(additionalProperties, "firefox_icon")
		delete(additionalProperties, "chrome_icon")
		delete(additionalProperties, "ios_sound")
		delete(additionalProperties, "android_sound")
		delete(additionalProperties, "huawei_sound")
		delete(additionalProperties, "adm_sound")
		delete(additionalProperties, "wp_wns_sound")
		delete(additionalProperties, "android_led_color")
		delete(additionalProperties, "huawei_led_color")
		delete(additionalProperties, "android_accent_color")
		delete(additionalProperties, "huawei_accent_color")
		delete(additionalProperties, "android_visibility")
		delete(additionalProperties, "huawei_visibility")
		delete(additionalProperties, "ios_badgeType")
		delete(additionalProperties, "ios_badgeCount")
		delete(additionalProperties, "collapse_id")
		delete(additionalProperties, "web_push_topic")
		delete(additionalProperties, "apns_alert")
		delete(additionalProperties, "delayed_option")
		delete(additionalProperties, "delivery_time_of_day")
		delete(additionalProperties, "ttl")
		delete(additionalProperties, "priority")
		delete(additionalProperties, "apns_push_type_override")
		delete(additionalProperties, "throttle_rate_per_minute")
		delete(additionalProperties, "android_group")
		delete(additionalProperties, "android_group_message")
		delete(additionalProperties, "adm_group")
		delete(additionalProperties, "adm_group_message")
		delete(additionalProperties, "thread_id")
		delete(additionalProperties, "summary_arg")
		delete(additionalProperties, "summary_arg_count")
		delete(additionalProperties, "email_subject")
		delete(additionalProperties, "email_body")
		delete(additionalProperties, "email_from_name")
		delete(additionalProperties, "email_from_address")
		delete(additionalProperties, "email_preheader")
		delete(additionalProperties, "include_unsubscribed")
		delete(additionalProperties, "sms_from")
		delete(additionalProperties, "sms_media_urls")
		delete(additionalProperties, "filters")
		delete(additionalProperties, "custom_data")
		delete(additionalProperties, "send_after")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNotification struct {
	value *Notification
	isSet bool
}

func (v NullableNotification) Get() *Notification {
	return v.value
}

func (v *NullableNotification) Set(val *Notification) {
	v.value = val
	v.isSet = true
}

func (v NullableNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotification(val *Notification) *NullableNotification {
	return &NullableNotification{value: val, isSet: true}
}

func (v NullableNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


