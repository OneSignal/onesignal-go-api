/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.4.0
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// PlayerSlice struct for PlayerSlice
type PlayerSlice struct {
	TotalCount *int32 `json:"total_count,omitempty"`
	Offset *int32 `json:"offset,omitempty"`
	Limit *int32 `json:"limit,omitempty"`
	Players []Player `json:"players,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PlayerSlice PlayerSlice

// NewPlayerSlice instantiates a new PlayerSlice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerSlice() *PlayerSlice {
	this := PlayerSlice{}
	return &this
}

// NewPlayerSliceWithDefaults instantiates a new PlayerSlice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerSliceWithDefaults() *PlayerSlice {
	this := PlayerSlice{}
	return &this
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *PlayerSlice) GetTotalCount() int32 {
	if o == nil || o.TotalCount == nil {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerSlice) GetTotalCountOk() (*int32, bool) {
	if o == nil || o.TotalCount == nil {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *PlayerSlice) HasTotalCount() bool {
	if o != nil && o.TotalCount != nil {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *PlayerSlice) SetTotalCount(v int32) {
	o.TotalCount = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *PlayerSlice) GetOffset() int32 {
	if o == nil || o.Offset == nil {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerSlice) GetOffsetOk() (*int32, bool) {
	if o == nil || o.Offset == nil {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *PlayerSlice) HasOffset() bool {
	if o != nil && o.Offset != nil {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *PlayerSlice) SetOffset(v int32) {
	o.Offset = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *PlayerSlice) GetLimit() int32 {
	if o == nil || o.Limit == nil {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerSlice) GetLimitOk() (*int32, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *PlayerSlice) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *PlayerSlice) SetLimit(v int32) {
	o.Limit = &v
}

// GetPlayers returns the Players field value if set, zero value otherwise.
func (o *PlayerSlice) GetPlayers() []Player {
	if o == nil || o.Players == nil {
		var ret []Player
		return ret
	}
	return o.Players
}

// GetPlayersOk returns a tuple with the Players field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerSlice) GetPlayersOk() ([]Player, bool) {
	if o == nil || o.Players == nil {
		return nil, false
	}
	return o.Players, true
}

// HasPlayers returns a boolean if a field has been set.
func (o *PlayerSlice) HasPlayers() bool {
	if o != nil && o.Players != nil {
		return true
	}

	return false
}

// SetPlayers gets a reference to the given []Player and assigns it to the Players field.
func (o *PlayerSlice) SetPlayers(v []Player) {
	o.Players = v
}

func (o PlayerSlice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TotalCount != nil {
		toSerialize["total_count"] = o.TotalCount
	}
	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	if o.Players != nil {
		toSerialize["players"] = o.Players
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PlayerSlice) UnmarshalJSON(bytes []byte) (err error) {
	varPlayerSlice := _PlayerSlice{}

	if err = json.Unmarshal(bytes, &varPlayerSlice); err == nil {
		*o = PlayerSlice(varPlayerSlice)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "total_count")
		delete(additionalProperties, "offset")
		delete(additionalProperties, "limit")
		delete(additionalProperties, "players")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePlayerSlice struct {
	value *PlayerSlice
	isSet bool
}

func (v NullablePlayerSlice) Get() *PlayerSlice {
	return v.value
}

func (v *NullablePlayerSlice) Set(val *PlayerSlice) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerSlice) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerSlice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerSlice(val *PlayerSlice) *NullablePlayerSlice {
	return &NullablePlayerSlice{value: val, isSet: true}
}

func (v NullablePlayerSlice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerSlice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


