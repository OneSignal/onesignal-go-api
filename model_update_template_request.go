/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 5.3.0
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// UpdateTemplateRequest struct for UpdateTemplateRequest
type UpdateTemplateRequest struct {
	// Updated name of the template.
	Name *string `json:"name,omitempty"`
	Contents *LanguageStringMap `json:"contents,omitempty"`
	// Set true for an Email template.
	IsEmail *bool `json:"isEmail,omitempty"`
	// Subject of the email.
	EmailSubject NullableString `json:"email_subject,omitempty"`
	// Body of the email (HTML supported).
	EmailBody NullableString `json:"email_body,omitempty"`
	// Set true for an SMS template.
	IsSMS *bool `json:"isSMS,omitempty"`
	// JSON string for dynamic content personalization.
	DynamicContent NullableString `json:"dynamic_content,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateTemplateRequest UpdateTemplateRequest

// NewUpdateTemplateRequest instantiates a new UpdateTemplateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTemplateRequest() *UpdateTemplateRequest {
	this := UpdateTemplateRequest{}
	return &this
}

// NewUpdateTemplateRequestWithDefaults instantiates a new UpdateTemplateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTemplateRequestWithDefaults() *UpdateTemplateRequest {
	this := UpdateTemplateRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateTemplateRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTemplateRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateTemplateRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateTemplateRequest) SetName(v string) {
	o.Name = &v
}

// GetContents returns the Contents field value if set, zero value otherwise.
func (o *UpdateTemplateRequest) GetContents() LanguageStringMap {
	if o == nil || o.Contents == nil {
		var ret LanguageStringMap
		return ret
	}
	return *o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTemplateRequest) GetContentsOk() (*LanguageStringMap, bool) {
	if o == nil || o.Contents == nil {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *UpdateTemplateRequest) HasContents() bool {
	if o != nil && o.Contents != nil {
		return true
	}

	return false
}

// SetContents gets a reference to the given LanguageStringMap and assigns it to the Contents field.
func (o *UpdateTemplateRequest) SetContents(v LanguageStringMap) {
	o.Contents = &v
}

// GetIsEmail returns the IsEmail field value if set, zero value otherwise.
func (o *UpdateTemplateRequest) GetIsEmail() bool {
	if o == nil || o.IsEmail == nil {
		var ret bool
		return ret
	}
	return *o.IsEmail
}

// GetIsEmailOk returns a tuple with the IsEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTemplateRequest) GetIsEmailOk() (*bool, bool) {
	if o == nil || o.IsEmail == nil {
		return nil, false
	}
	return o.IsEmail, true
}

// HasIsEmail returns a boolean if a field has been set.
func (o *UpdateTemplateRequest) HasIsEmail() bool {
	if o != nil && o.IsEmail != nil {
		return true
	}

	return false
}

// SetIsEmail gets a reference to the given bool and assigns it to the IsEmail field.
func (o *UpdateTemplateRequest) SetIsEmail(v bool) {
	o.IsEmail = &v
}

// GetEmailSubject returns the EmailSubject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateTemplateRequest) GetEmailSubject() string {
	if o == nil || o.EmailSubject.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmailSubject.Get()
}

// GetEmailSubjectOk returns a tuple with the EmailSubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateTemplateRequest) GetEmailSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailSubject.Get(), o.EmailSubject.IsSet()
}

// HasEmailSubject returns a boolean if a field has been set.
func (o *UpdateTemplateRequest) HasEmailSubject() bool {
	if o != nil && o.EmailSubject.IsSet() {
		return true
	}

	return false
}

// SetEmailSubject gets a reference to the given NullableString and assigns it to the EmailSubject field.
func (o *UpdateTemplateRequest) SetEmailSubject(v string) {
	o.EmailSubject.Set(&v)
}
// SetEmailSubjectNil sets the value for EmailSubject to be an explicit nil
func (o *UpdateTemplateRequest) SetEmailSubjectNil() {
	o.EmailSubject.Set(nil)
}

// UnsetEmailSubject ensures that no value is present for EmailSubject, not even an explicit nil
func (o *UpdateTemplateRequest) UnsetEmailSubject() {
	o.EmailSubject.Unset()
}

// GetEmailBody returns the EmailBody field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateTemplateRequest) GetEmailBody() string {
	if o == nil || o.EmailBody.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmailBody.Get()
}

// GetEmailBodyOk returns a tuple with the EmailBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateTemplateRequest) GetEmailBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailBody.Get(), o.EmailBody.IsSet()
}

// HasEmailBody returns a boolean if a field has been set.
func (o *UpdateTemplateRequest) HasEmailBody() bool {
	if o != nil && o.EmailBody.IsSet() {
		return true
	}

	return false
}

// SetEmailBody gets a reference to the given NullableString and assigns it to the EmailBody field.
func (o *UpdateTemplateRequest) SetEmailBody(v string) {
	o.EmailBody.Set(&v)
}
// SetEmailBodyNil sets the value for EmailBody to be an explicit nil
func (o *UpdateTemplateRequest) SetEmailBodyNil() {
	o.EmailBody.Set(nil)
}

// UnsetEmailBody ensures that no value is present for EmailBody, not even an explicit nil
func (o *UpdateTemplateRequest) UnsetEmailBody() {
	o.EmailBody.Unset()
}

// GetIsSMS returns the IsSMS field value if set, zero value otherwise.
func (o *UpdateTemplateRequest) GetIsSMS() bool {
	if o == nil || o.IsSMS == nil {
		var ret bool
		return ret
	}
	return *o.IsSMS
}

// GetIsSMSOk returns a tuple with the IsSMS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTemplateRequest) GetIsSMSOk() (*bool, bool) {
	if o == nil || o.IsSMS == nil {
		return nil, false
	}
	return o.IsSMS, true
}

// HasIsSMS returns a boolean if a field has been set.
func (o *UpdateTemplateRequest) HasIsSMS() bool {
	if o != nil && o.IsSMS != nil {
		return true
	}

	return false
}

// SetIsSMS gets a reference to the given bool and assigns it to the IsSMS field.
func (o *UpdateTemplateRequest) SetIsSMS(v bool) {
	o.IsSMS = &v
}

// GetDynamicContent returns the DynamicContent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateTemplateRequest) GetDynamicContent() string {
	if o == nil || o.DynamicContent.Get() == nil {
		var ret string
		return ret
	}
	return *o.DynamicContent.Get()
}

// GetDynamicContentOk returns a tuple with the DynamicContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateTemplateRequest) GetDynamicContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DynamicContent.Get(), o.DynamicContent.IsSet()
}

// HasDynamicContent returns a boolean if a field has been set.
func (o *UpdateTemplateRequest) HasDynamicContent() bool {
	if o != nil && o.DynamicContent.IsSet() {
		return true
	}

	return false
}

// SetDynamicContent gets a reference to the given NullableString and assigns it to the DynamicContent field.
func (o *UpdateTemplateRequest) SetDynamicContent(v string) {
	o.DynamicContent.Set(&v)
}
// SetDynamicContentNil sets the value for DynamicContent to be an explicit nil
func (o *UpdateTemplateRequest) SetDynamicContentNil() {
	o.DynamicContent.Set(nil)
}

// UnsetDynamicContent ensures that no value is present for DynamicContent, not even an explicit nil
func (o *UpdateTemplateRequest) UnsetDynamicContent() {
	o.DynamicContent.Unset()
}

func (o UpdateTemplateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Contents != nil {
		toSerialize["contents"] = o.Contents
	}
	if o.IsEmail != nil {
		toSerialize["isEmail"] = o.IsEmail
	}
	if o.EmailSubject.IsSet() {
		toSerialize["email_subject"] = o.EmailSubject.Get()
	}
	if o.EmailBody.IsSet() {
		toSerialize["email_body"] = o.EmailBody.Get()
	}
	if o.IsSMS != nil {
		toSerialize["isSMS"] = o.IsSMS
	}
	if o.DynamicContent.IsSet() {
		toSerialize["dynamic_content"] = o.DynamicContent.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UpdateTemplateRequest) UnmarshalJSON(bytes []byte) (err error) {
	varUpdateTemplateRequest := _UpdateTemplateRequest{}

	if err = json.Unmarshal(bytes, &varUpdateTemplateRequest); err == nil {
		*o = UpdateTemplateRequest(varUpdateTemplateRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "contents")
		delete(additionalProperties, "isEmail")
		delete(additionalProperties, "email_subject")
		delete(additionalProperties, "email_body")
		delete(additionalProperties, "isSMS")
		delete(additionalProperties, "dynamic_content")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateTemplateRequest struct {
	value *UpdateTemplateRequest
	isSet bool
}

func (v NullableUpdateTemplateRequest) Get() *UpdateTemplateRequest {
	return v.value
}

func (v *NullableUpdateTemplateRequest) Set(val *UpdateTemplateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTemplateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTemplateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTemplateRequest(val *UpdateTemplateRequest) *NullableUpdateTemplateRequest {
	return &NullableUpdateTemplateRequest{value: val, isSet: true}
}

func (v NullableUpdateTemplateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTemplateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


