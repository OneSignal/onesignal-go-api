/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.4.0
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// InvalidIdentifierError struct for InvalidIdentifierError
type InvalidIdentifierError struct {
	// Returned if using include_external_user_ids
	InvalidExternalUserIds []string `json:"invalid_external_user_ids,omitempty"`
	// Returned if using include_player_ids and some were valid and others were not.
	InvalidPlayerIds []string `json:"invalid_player_ids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InvalidIdentifierError InvalidIdentifierError

// NewInvalidIdentifierError instantiates a new InvalidIdentifierError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvalidIdentifierError() *InvalidIdentifierError {
	this := InvalidIdentifierError{}
	return &this
}

// NewInvalidIdentifierErrorWithDefaults instantiates a new InvalidIdentifierError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvalidIdentifierErrorWithDefaults() *InvalidIdentifierError {
	this := InvalidIdentifierError{}
	return &this
}

// GetInvalidExternalUserIds returns the InvalidExternalUserIds field value if set, zero value otherwise.
func (o *InvalidIdentifierError) GetInvalidExternalUserIds() []string {
	if o == nil || o.InvalidExternalUserIds == nil {
		var ret []string
		return ret
	}
	return o.InvalidExternalUserIds
}

// GetInvalidExternalUserIdsOk returns a tuple with the InvalidExternalUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvalidIdentifierError) GetInvalidExternalUserIdsOk() ([]string, bool) {
	if o == nil || o.InvalidExternalUserIds == nil {
		return nil, false
	}
	return o.InvalidExternalUserIds, true
}

// HasInvalidExternalUserIds returns a boolean if a field has been set.
func (o *InvalidIdentifierError) HasInvalidExternalUserIds() bool {
	if o != nil && o.InvalidExternalUserIds != nil {
		return true
	}

	return false
}

// SetInvalidExternalUserIds gets a reference to the given []string and assigns it to the InvalidExternalUserIds field.
func (o *InvalidIdentifierError) SetInvalidExternalUserIds(v []string) {
	o.InvalidExternalUserIds = v
}

// GetInvalidPlayerIds returns the InvalidPlayerIds field value if set, zero value otherwise.
func (o *InvalidIdentifierError) GetInvalidPlayerIds() []string {
	if o == nil || o.InvalidPlayerIds == nil {
		var ret []string
		return ret
	}
	return o.InvalidPlayerIds
}

// GetInvalidPlayerIdsOk returns a tuple with the InvalidPlayerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvalidIdentifierError) GetInvalidPlayerIdsOk() ([]string, bool) {
	if o == nil || o.InvalidPlayerIds == nil {
		return nil, false
	}
	return o.InvalidPlayerIds, true
}

// HasInvalidPlayerIds returns a boolean if a field has been set.
func (o *InvalidIdentifierError) HasInvalidPlayerIds() bool {
	if o != nil && o.InvalidPlayerIds != nil {
		return true
	}

	return false
}

// SetInvalidPlayerIds gets a reference to the given []string and assigns it to the InvalidPlayerIds field.
func (o *InvalidIdentifierError) SetInvalidPlayerIds(v []string) {
	o.InvalidPlayerIds = v
}

func (o InvalidIdentifierError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InvalidExternalUserIds != nil {
		toSerialize["invalid_external_user_ids"] = o.InvalidExternalUserIds
	}
	if o.InvalidPlayerIds != nil {
		toSerialize["invalid_player_ids"] = o.InvalidPlayerIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *InvalidIdentifierError) UnmarshalJSON(bytes []byte) (err error) {
	varInvalidIdentifierError := _InvalidIdentifierError{}

	if err = json.Unmarshal(bytes, &varInvalidIdentifierError); err == nil {
		*o = InvalidIdentifierError(varInvalidIdentifierError)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "invalid_external_user_ids")
		delete(additionalProperties, "invalid_player_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInvalidIdentifierError struct {
	value *InvalidIdentifierError
	isSet bool
}

func (v NullableInvalidIdentifierError) Get() *InvalidIdentifierError {
	return v.value
}

func (v *NullableInvalidIdentifierError) Set(val *InvalidIdentifierError) {
	v.value = val
	v.isSet = true
}

func (v NullableInvalidIdentifierError) IsSet() bool {
	return v.isSet
}

func (v *NullableInvalidIdentifierError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvalidIdentifierError(val *InvalidIdentifierError) *NullableInvalidIdentifierError {
	return &NullableInvalidIdentifierError{value: val, isSet: true}
}

func (v NullableInvalidIdentifierError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvalidIdentifierError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


