/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 5.2.0
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
	"fmt"
)

// FilterExpression - struct for FilterExpression
type FilterExpression struct {
	Filter *Filter
	Operator *Operator
}

// FilterAsFilterExpression is a convenience function that returns Filter wrapped in FilterExpression
func FilterAsFilterExpression(v *Filter) FilterExpression {
	return FilterExpression{
		Filter: v,
	}
}

// OperatorAsFilterExpression is a convenience function that returns Operator wrapped in FilterExpression
func OperatorAsFilterExpression(v *Operator) FilterExpression {
	return FilterExpression{
		Operator: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FilterExpression) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Filter
	err = newStrictDecoder(data).Decode(&dst.Filter)
	if err == nil {
		jsonFilter, _ := json.Marshal(dst.Filter)
		if string(jsonFilter) == "{}" { // empty struct
			dst.Filter = nil
		} else {
			match++
		}
	} else {
		dst.Filter = nil
	}

	// try to unmarshal data into Operator
	err = newStrictDecoder(data).Decode(&dst.Operator)
	if err == nil {
		jsonOperator, _ := json.Marshal(dst.Operator)
		if string(jsonOperator) == "{}" { // empty struct
			dst.Operator = nil
		} else {
			match++
		}
	} else {
		dst.Operator = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Filter = nil
		dst.Operator = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(FilterExpression)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(FilterExpression)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FilterExpression) MarshalJSON() ([]byte, error) {
	if src.Filter != nil {
		return json.Marshal(&src.Filter)
	}

	if src.Operator != nil {
		return json.Marshal(&src.Operator)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FilterExpression) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Filter != nil {
		return obj.Filter
	}

	if obj.Operator != nil {
		return obj.Operator
	}

	// all schemas are nil
	return nil
}

type NullableFilterExpression struct {
	value *FilterExpression
	isSet bool
}

func (v NullableFilterExpression) Get() *FilterExpression {
	return v.value
}

func (v *NullableFilterExpression) Set(val *FilterExpression) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterExpression(val *FilterExpression) *NullableFilterExpression {
	return &NullableFilterExpression{value: val, isSet: true}
}

func (v NullableFilterExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


