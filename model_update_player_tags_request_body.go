/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.4.0
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// UpdatePlayerTagsRequestBody struct for UpdatePlayerTagsRequestBody
type UpdatePlayerTagsRequestBody struct {
	// Custom tags for the device record.  Only support string key value pairs.  Does not support arrays or other nested objects.  Example `{\"foo\":\"bar\",\"this\":\"that\"}`. Limitations: - 100 tags per call - Android SDK users: tags cannot be removed or changed via API if set through SDK sendTag methods. Recommended to only tag devices with 1 kilobyte of ata Please consider using your own Database to save more than 1 kilobyte of data.  See: Internal Database & CRM 
	Tags map[string]interface{} `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdatePlayerTagsRequestBody UpdatePlayerTagsRequestBody

// NewUpdatePlayerTagsRequestBody instantiates a new UpdatePlayerTagsRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePlayerTagsRequestBody() *UpdatePlayerTagsRequestBody {
	this := UpdatePlayerTagsRequestBody{}
	return &this
}

// NewUpdatePlayerTagsRequestBodyWithDefaults instantiates a new UpdatePlayerTagsRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePlayerTagsRequestBodyWithDefaults() *UpdatePlayerTagsRequestBody {
	this := UpdatePlayerTagsRequestBody{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdatePlayerTagsRequestBody) GetTags() map[string]interface{} {
	if o == nil || o.Tags == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePlayerTagsRequestBody) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdatePlayerTagsRequestBody) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *UpdatePlayerTagsRequestBody) SetTags(v map[string]interface{}) {
	o.Tags = v
}

func (o UpdatePlayerTagsRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UpdatePlayerTagsRequestBody) UnmarshalJSON(bytes []byte) (err error) {
	varUpdatePlayerTagsRequestBody := _UpdatePlayerTagsRequestBody{}

	if err = json.Unmarshal(bytes, &varUpdatePlayerTagsRequestBody); err == nil {
		*o = UpdatePlayerTagsRequestBody(varUpdatePlayerTagsRequestBody)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdatePlayerTagsRequestBody struct {
	value *UpdatePlayerTagsRequestBody
	isSet bool
}

func (v NullableUpdatePlayerTagsRequestBody) Get() *UpdatePlayerTagsRequestBody {
	return v.value
}

func (v *NullableUpdatePlayerTagsRequestBody) Set(val *UpdatePlayerTagsRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePlayerTagsRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePlayerTagsRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePlayerTagsRequestBody(val *UpdatePlayerTagsRequestBody) *NullableUpdatePlayerTagsRequestBody {
	return &NullableUpdatePlayerTagsRequestBody{value: val, isSet: true}
}

func (v NullableUpdatePlayerTagsRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePlayerTagsRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


