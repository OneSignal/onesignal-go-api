/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 5.0.1
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
	"fmt"
)

// NotificationTarget struct for NotificationTarget
type NotificationTarget struct {
	SegmentNotificationTarget *SegmentNotificationTarget
	SubscriptionNotificationTarget *SubscriptionNotificationTarget
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *NotificationTarget) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into SegmentNotificationTarget
	err = json.Unmarshal(data, &dst.SegmentNotificationTarget);
	if err == nil {
		jsonSegmentNotificationTarget, _ := json.Marshal(dst.SegmentNotificationTarget)
		if string(jsonSegmentNotificationTarget) == "{}" { // empty struct
			dst.SegmentNotificationTarget = nil
		} else {
			return nil // data stored in dst.SegmentNotificationTarget, return on the first match
		}
	} else {
		dst.SegmentNotificationTarget = nil
	}

	// try to unmarshal JSON data into SubscriptionNotificationTarget
	err = json.Unmarshal(data, &dst.SubscriptionNotificationTarget);
	if err == nil {
		jsonSubscriptionNotificationTarget, _ := json.Marshal(dst.SubscriptionNotificationTarget)
		if string(jsonSubscriptionNotificationTarget) == "{}" { // empty struct
			dst.SubscriptionNotificationTarget = nil
		} else {
			return nil // data stored in dst.SubscriptionNotificationTarget, return on the first match
		}
	} else {
		dst.SubscriptionNotificationTarget = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(NotificationTarget)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *NotificationTarget) MarshalJSON() ([]byte, error) {
	if src.SegmentNotificationTarget != nil {
		return json.Marshal(&src.SegmentNotificationTarget)
	}

	if src.SubscriptionNotificationTarget != nil {
		return json.Marshal(&src.SubscriptionNotificationTarget)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableNotificationTarget struct {
	value *NotificationTarget
	isSet bool
}

func (v NullableNotificationTarget) Get() *NotificationTarget {
	return v.value
}

func (v *NullableNotificationTarget) Set(val *NotificationTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationTarget(val *NotificationTarget) *NullableNotificationTarget {
	return &NullableNotificationTarget{value: val, isSet: true}
}

func (v NullableNotificationTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


