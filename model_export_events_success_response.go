/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.4.0
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// ExportEventsSuccessResponse struct for ExportEventsSuccessResponse
type ExportEventsSuccessResponse struct {
	CsvFileUrl *string `json:"csv_file_url,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExportEventsSuccessResponse ExportEventsSuccessResponse

// NewExportEventsSuccessResponse instantiates a new ExportEventsSuccessResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportEventsSuccessResponse() *ExportEventsSuccessResponse {
	this := ExportEventsSuccessResponse{}
	return &this
}

// NewExportEventsSuccessResponseWithDefaults instantiates a new ExportEventsSuccessResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportEventsSuccessResponseWithDefaults() *ExportEventsSuccessResponse {
	this := ExportEventsSuccessResponse{}
	return &this
}

// GetCsvFileUrl returns the CsvFileUrl field value if set, zero value otherwise.
func (o *ExportEventsSuccessResponse) GetCsvFileUrl() string {
	if o == nil || o.CsvFileUrl == nil {
		var ret string
		return ret
	}
	return *o.CsvFileUrl
}

// GetCsvFileUrlOk returns a tuple with the CsvFileUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportEventsSuccessResponse) GetCsvFileUrlOk() (*string, bool) {
	if o == nil || o.CsvFileUrl == nil {
		return nil, false
	}
	return o.CsvFileUrl, true
}

// HasCsvFileUrl returns a boolean if a field has been set.
func (o *ExportEventsSuccessResponse) HasCsvFileUrl() bool {
	if o != nil && o.CsvFileUrl != nil {
		return true
	}

	return false
}

// SetCsvFileUrl gets a reference to the given string and assigns it to the CsvFileUrl field.
func (o *ExportEventsSuccessResponse) SetCsvFileUrl(v string) {
	o.CsvFileUrl = &v
}

func (o ExportEventsSuccessResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CsvFileUrl != nil {
		toSerialize["csv_file_url"] = o.CsvFileUrl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ExportEventsSuccessResponse) UnmarshalJSON(bytes []byte) (err error) {
	varExportEventsSuccessResponse := _ExportEventsSuccessResponse{}

	if err = json.Unmarshal(bytes, &varExportEventsSuccessResponse); err == nil {
		*o = ExportEventsSuccessResponse(varExportEventsSuccessResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "csv_file_url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExportEventsSuccessResponse struct {
	value *ExportEventsSuccessResponse
	isSet bool
}

func (v NullableExportEventsSuccessResponse) Get() *ExportEventsSuccessResponse {
	return v.value
}

func (v *NullableExportEventsSuccessResponse) Set(val *ExportEventsSuccessResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableExportEventsSuccessResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableExportEventsSuccessResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportEventsSuccessResponse(val *ExportEventsSuccessResponse) *NullableExportEventsSuccessResponse {
	return &NullableExportEventsSuccessResponse{value: val, isSet: true}
}

func (v NullableExportEventsSuccessResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportEventsSuccessResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


