/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.4.0
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// OutcomesData struct for OutcomesData
type OutcomesData struct {
	Outcomes []OutcomeData `json:"outcomes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OutcomesData OutcomesData

// NewOutcomesData instantiates a new OutcomesData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutcomesData() *OutcomesData {
	this := OutcomesData{}
	return &this
}

// NewOutcomesDataWithDefaults instantiates a new OutcomesData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutcomesDataWithDefaults() *OutcomesData {
	this := OutcomesData{}
	return &this
}

// GetOutcomes returns the Outcomes field value if set, zero value otherwise.
func (o *OutcomesData) GetOutcomes() []OutcomeData {
	if o == nil || o.Outcomes == nil {
		var ret []OutcomeData
		return ret
	}
	return o.Outcomes
}

// GetOutcomesOk returns a tuple with the Outcomes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutcomesData) GetOutcomesOk() ([]OutcomeData, bool) {
	if o == nil || o.Outcomes == nil {
		return nil, false
	}
	return o.Outcomes, true
}

// HasOutcomes returns a boolean if a field has been set.
func (o *OutcomesData) HasOutcomes() bool {
	if o != nil && o.Outcomes != nil {
		return true
	}

	return false
}

// SetOutcomes gets a reference to the given []OutcomeData and assigns it to the Outcomes field.
func (o *OutcomesData) SetOutcomes(v []OutcomeData) {
	o.Outcomes = v
}

func (o OutcomesData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Outcomes != nil {
		toSerialize["outcomes"] = o.Outcomes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OutcomesData) UnmarshalJSON(bytes []byte) (err error) {
	varOutcomesData := _OutcomesData{}

	if err = json.Unmarshal(bytes, &varOutcomesData); err == nil {
		*o = OutcomesData(varOutcomesData)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "outcomes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOutcomesData struct {
	value *OutcomesData
	isSet bool
}

func (v NullableOutcomesData) Get() *OutcomesData {
	return v.value
}

func (v *NullableOutcomesData) Set(val *OutcomesData) {
	v.value = val
	v.isSet = true
}

func (v NullableOutcomesData) IsSet() bool {
	return v.isSet
}

func (v *NullableOutcomesData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutcomesData(val *OutcomesData) *NullableOutcomesData {
	return &NullableOutcomesData{value: val, isSet: true}
}

func (v NullableOutcomesData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutcomesData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


