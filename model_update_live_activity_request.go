/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.4.0
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// UpdateLiveActivityRequest struct for UpdateLiveActivityRequest
type UpdateLiveActivityRequest struct {
	// Type of live activity
	Name string `json:"name"`
	Event string `json:"event"`
	EventUpdates map[string]interface{} `json:"event_updates"`
	// Timestamp; only allowed if event is \"end\"
	DismissAt *float32 `json:"dismiss_at,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateLiveActivityRequest UpdateLiveActivityRequest

// NewUpdateLiveActivityRequest instantiates a new UpdateLiveActivityRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLiveActivityRequest(name string, event string, eventUpdates map[string]interface{}) *UpdateLiveActivityRequest {
	this := UpdateLiveActivityRequest{}
	this.Name = name
	this.Event = event
	this.EventUpdates = eventUpdates
	return &this
}

// NewUpdateLiveActivityRequestWithDefaults instantiates a new UpdateLiveActivityRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLiveActivityRequestWithDefaults() *UpdateLiveActivityRequest {
	this := UpdateLiveActivityRequest{}
	return &this
}

// GetName returns the Name field value
func (o *UpdateLiveActivityRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateLiveActivityRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateLiveActivityRequest) SetName(v string) {
	o.Name = v
}

// GetEvent returns the Event field value
func (o *UpdateLiveActivityRequest) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *UpdateLiveActivityRequest) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *UpdateLiveActivityRequest) SetEvent(v string) {
	o.Event = v
}

// GetEventUpdates returns the EventUpdates field value
func (o *UpdateLiveActivityRequest) GetEventUpdates() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.EventUpdates
}

// GetEventUpdatesOk returns a tuple with the EventUpdates field value
// and a boolean to check if the value has been set.
func (o *UpdateLiveActivityRequest) GetEventUpdatesOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventUpdates, true
}

// SetEventUpdates sets field value
func (o *UpdateLiveActivityRequest) SetEventUpdates(v map[string]interface{}) {
	o.EventUpdates = v
}

// GetDismissAt returns the DismissAt field value if set, zero value otherwise.
func (o *UpdateLiveActivityRequest) GetDismissAt() float32 {
	if o == nil || o.DismissAt == nil {
		var ret float32
		return ret
	}
	return *o.DismissAt
}

// GetDismissAtOk returns a tuple with the DismissAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLiveActivityRequest) GetDismissAtOk() (*float32, bool) {
	if o == nil || o.DismissAt == nil {
		return nil, false
	}
	return o.DismissAt, true
}

// HasDismissAt returns a boolean if a field has been set.
func (o *UpdateLiveActivityRequest) HasDismissAt() bool {
	if o != nil && o.DismissAt != nil {
		return true
	}

	return false
}

// SetDismissAt gets a reference to the given float32 and assigns it to the DismissAt field.
func (o *UpdateLiveActivityRequest) SetDismissAt(v float32) {
	o.DismissAt = &v
}

func (o UpdateLiveActivityRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["event"] = o.Event
	}
	if true {
		toSerialize["event_updates"] = o.EventUpdates
	}
	if o.DismissAt != nil {
		toSerialize["dismiss_at"] = o.DismissAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UpdateLiveActivityRequest) UnmarshalJSON(bytes []byte) (err error) {
	varUpdateLiveActivityRequest := _UpdateLiveActivityRequest{}

	if err = json.Unmarshal(bytes, &varUpdateLiveActivityRequest); err == nil {
		*o = UpdateLiveActivityRequest(varUpdateLiveActivityRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "event")
		delete(additionalProperties, "event_updates")
		delete(additionalProperties, "dismiss_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateLiveActivityRequest struct {
	value *UpdateLiveActivityRequest
	isSet bool
}

func (v NullableUpdateLiveActivityRequest) Get() *UpdateLiveActivityRequest {
	return v.value
}

func (v *NullableUpdateLiveActivityRequest) Set(val *UpdateLiveActivityRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLiveActivityRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLiveActivityRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLiveActivityRequest(val *UpdateLiveActivityRequest) *NullableUpdateLiveActivityRequest {
	return &NullableUpdateLiveActivityRequest{value: val, isSet: true}
}

func (v NullableUpdateLiveActivityRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLiveActivityRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


