/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 5.0.1
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// SubscriptionBody struct for SubscriptionBody
type SubscriptionBody struct {
	Subscription *Subscription `json:"subscription,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SubscriptionBody SubscriptionBody

// NewSubscriptionBody instantiates a new SubscriptionBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionBody() *SubscriptionBody {
	this := SubscriptionBody{}
	return &this
}

// NewSubscriptionBodyWithDefaults instantiates a new SubscriptionBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionBodyWithDefaults() *SubscriptionBody {
	this := SubscriptionBody{}
	return &this
}

// GetSubscription returns the Subscription field value if set, zero value otherwise.
func (o *SubscriptionBody) GetSubscription() Subscription {
	if o == nil || o.Subscription == nil {
		var ret Subscription
		return ret
	}
	return *o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionBody) GetSubscriptionOk() (*Subscription, bool) {
	if o == nil || o.Subscription == nil {
		return nil, false
	}
	return o.Subscription, true
}

// HasSubscription returns a boolean if a field has been set.
func (o *SubscriptionBody) HasSubscription() bool {
	if o != nil && o.Subscription != nil {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given Subscription and assigns it to the Subscription field.
func (o *SubscriptionBody) SetSubscription(v Subscription) {
	o.Subscription = &v
}

func (o SubscriptionBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Subscription != nil {
		toSerialize["subscription"] = o.Subscription
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SubscriptionBody) UnmarshalJSON(bytes []byte) (err error) {
	varSubscriptionBody := _SubscriptionBody{}

	if err = json.Unmarshal(bytes, &varSubscriptionBody); err == nil {
		*o = SubscriptionBody(varSubscriptionBody)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "subscription")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubscriptionBody struct {
	value *SubscriptionBody
	isSet bool
}

func (v NullableSubscriptionBody) Get() *SubscriptionBody {
	return v.value
}

func (v *NullableSubscriptionBody) Set(val *SubscriptionBody) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionBody) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionBody(val *SubscriptionBody) *NullableSubscriptionBody {
	return &NullableSubscriptionBody{value: val, isSet: true}
}

func (v NullableSubscriptionBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


