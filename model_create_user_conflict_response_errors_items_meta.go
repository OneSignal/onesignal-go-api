/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.4.0
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// CreateUserConflictResponseErrorsItemsMeta struct for CreateUserConflictResponseErrorsItemsMeta
type CreateUserConflictResponseErrorsItemsMeta struct {
	ConflictingAliases map[string]interface{} `json:"conflicting_aliases,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateUserConflictResponseErrorsItemsMeta CreateUserConflictResponseErrorsItemsMeta

// NewCreateUserConflictResponseErrorsItemsMeta instantiates a new CreateUserConflictResponseErrorsItemsMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserConflictResponseErrorsItemsMeta() *CreateUserConflictResponseErrorsItemsMeta {
	this := CreateUserConflictResponseErrorsItemsMeta{}
	return &this
}

// NewCreateUserConflictResponseErrorsItemsMetaWithDefaults instantiates a new CreateUserConflictResponseErrorsItemsMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserConflictResponseErrorsItemsMetaWithDefaults() *CreateUserConflictResponseErrorsItemsMeta {
	this := CreateUserConflictResponseErrorsItemsMeta{}
	return &this
}

// GetConflictingAliases returns the ConflictingAliases field value if set, zero value otherwise.
func (o *CreateUserConflictResponseErrorsItemsMeta) GetConflictingAliases() map[string]interface{} {
	if o == nil || o.ConflictingAliases == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.ConflictingAliases
}

// GetConflictingAliasesOk returns a tuple with the ConflictingAliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserConflictResponseErrorsItemsMeta) GetConflictingAliasesOk() (map[string]interface{}, bool) {
	if o == nil || o.ConflictingAliases == nil {
		return nil, false
	}
	return o.ConflictingAliases, true
}

// HasConflictingAliases returns a boolean if a field has been set.
func (o *CreateUserConflictResponseErrorsItemsMeta) HasConflictingAliases() bool {
	if o != nil && o.ConflictingAliases != nil {
		return true
	}

	return false
}

// SetConflictingAliases gets a reference to the given map[string]interface{} and assigns it to the ConflictingAliases field.
func (o *CreateUserConflictResponseErrorsItemsMeta) SetConflictingAliases(v map[string]interface{}) {
	o.ConflictingAliases = v
}

func (o CreateUserConflictResponseErrorsItemsMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConflictingAliases != nil {
		toSerialize["conflicting_aliases"] = o.ConflictingAliases
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CreateUserConflictResponseErrorsItemsMeta) UnmarshalJSON(bytes []byte) (err error) {
	varCreateUserConflictResponseErrorsItemsMeta := _CreateUserConflictResponseErrorsItemsMeta{}

	if err = json.Unmarshal(bytes, &varCreateUserConflictResponseErrorsItemsMeta); err == nil {
		*o = CreateUserConflictResponseErrorsItemsMeta(varCreateUserConflictResponseErrorsItemsMeta)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "conflicting_aliases")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateUserConflictResponseErrorsItemsMeta struct {
	value *CreateUserConflictResponseErrorsItemsMeta
	isSet bool
}

func (v NullableCreateUserConflictResponseErrorsItemsMeta) Get() *CreateUserConflictResponseErrorsItemsMeta {
	return v.value
}

func (v *NullableCreateUserConflictResponseErrorsItemsMeta) Set(val *CreateUserConflictResponseErrorsItemsMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserConflictResponseErrorsItemsMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserConflictResponseErrorsItemsMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserConflictResponseErrorsItemsMeta(val *CreateUserConflictResponseErrorsItemsMeta) *NullableCreateUserConflictResponseErrorsItemsMeta {
	return &NullableCreateUserConflictResponseErrorsItemsMeta{value: val, isSet: true}
}

func (v NullableCreateUserConflictResponseErrorsItemsMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserConflictResponseErrorsItemsMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


