/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.4.0
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// SegmentNotificationTarget struct for SegmentNotificationTarget
type SegmentNotificationTarget struct {
	// The segment names you want to target. Users in these segments will receive a notification. This targeting parameter is only compatible with excluded_segments. Example: [\"Active Users\", \"Inactive Users\"] 
	IncludedSegments []string `json:"included_segments,omitempty"`
	// Segment that will be excluded when sending. Users in these segments will not receive a notification, even if they were included in included_segments. This targeting parameter is only compatible with included_segments. Example: [\"Active Users\", \"Inactive Users\"] 
	ExcludedSegments []string `json:"excluded_segments,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SegmentNotificationTarget SegmentNotificationTarget

// NewSegmentNotificationTarget instantiates a new SegmentNotificationTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSegmentNotificationTarget() *SegmentNotificationTarget {
	this := SegmentNotificationTarget{}
	return &this
}

// NewSegmentNotificationTargetWithDefaults instantiates a new SegmentNotificationTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSegmentNotificationTargetWithDefaults() *SegmentNotificationTarget {
	this := SegmentNotificationTarget{}
	return &this
}

// GetIncludedSegments returns the IncludedSegments field value if set, zero value otherwise.
func (o *SegmentNotificationTarget) GetIncludedSegments() []string {
	if o == nil || o.IncludedSegments == nil {
		var ret []string
		return ret
	}
	return o.IncludedSegments
}

// GetIncludedSegmentsOk returns a tuple with the IncludedSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentNotificationTarget) GetIncludedSegmentsOk() ([]string, bool) {
	if o == nil || o.IncludedSegments == nil {
		return nil, false
	}
	return o.IncludedSegments, true
}

// HasIncludedSegments returns a boolean if a field has been set.
func (o *SegmentNotificationTarget) HasIncludedSegments() bool {
	if o != nil && o.IncludedSegments != nil {
		return true
	}

	return false
}

// SetIncludedSegments gets a reference to the given []string and assigns it to the IncludedSegments field.
func (o *SegmentNotificationTarget) SetIncludedSegments(v []string) {
	o.IncludedSegments = v
}

// GetExcludedSegments returns the ExcludedSegments field value if set, zero value otherwise.
func (o *SegmentNotificationTarget) GetExcludedSegments() []string {
	if o == nil || o.ExcludedSegments == nil {
		var ret []string
		return ret
	}
	return o.ExcludedSegments
}

// GetExcludedSegmentsOk returns a tuple with the ExcludedSegments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentNotificationTarget) GetExcludedSegmentsOk() ([]string, bool) {
	if o == nil || o.ExcludedSegments == nil {
		return nil, false
	}
	return o.ExcludedSegments, true
}

// HasExcludedSegments returns a boolean if a field has been set.
func (o *SegmentNotificationTarget) HasExcludedSegments() bool {
	if o != nil && o.ExcludedSegments != nil {
		return true
	}

	return false
}

// SetExcludedSegments gets a reference to the given []string and assigns it to the ExcludedSegments field.
func (o *SegmentNotificationTarget) SetExcludedSegments(v []string) {
	o.ExcludedSegments = v
}

func (o SegmentNotificationTarget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IncludedSegments != nil {
		toSerialize["included_segments"] = o.IncludedSegments
	}
	if o.ExcludedSegments != nil {
		toSerialize["excluded_segments"] = o.ExcludedSegments
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SegmentNotificationTarget) UnmarshalJSON(bytes []byte) (err error) {
	varSegmentNotificationTarget := _SegmentNotificationTarget{}

	if err = json.Unmarshal(bytes, &varSegmentNotificationTarget); err == nil {
		*o = SegmentNotificationTarget(varSegmentNotificationTarget)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "included_segments")
		delete(additionalProperties, "excluded_segments")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSegmentNotificationTarget struct {
	value *SegmentNotificationTarget
	isSet bool
}

func (v NullableSegmentNotificationTarget) Get() *SegmentNotificationTarget {
	return v.value
}

func (v *NullableSegmentNotificationTarget) Set(val *SegmentNotificationTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableSegmentNotificationTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableSegmentNotificationTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSegmentNotificationTarget(val *SegmentNotificationTarget) *NullableSegmentNotificationTarget {
	return &NullableSegmentNotificationTarget{value: val, isSet: true}
}

func (v NullableSegmentNotificationTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSegmentNotificationTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


