/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.4.0
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// PlayerNotificationTargetIncludeAliases struct for PlayerNotificationTargetIncludeAliases
type PlayerNotificationTargetIncludeAliases struct {
	AliasLabel []string `json:"alias_label,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PlayerNotificationTargetIncludeAliases PlayerNotificationTargetIncludeAliases

// NewPlayerNotificationTargetIncludeAliases instantiates a new PlayerNotificationTargetIncludeAliases object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerNotificationTargetIncludeAliases() *PlayerNotificationTargetIncludeAliases {
	this := PlayerNotificationTargetIncludeAliases{}
	return &this
}

// NewPlayerNotificationTargetIncludeAliasesWithDefaults instantiates a new PlayerNotificationTargetIncludeAliases object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerNotificationTargetIncludeAliasesWithDefaults() *PlayerNotificationTargetIncludeAliases {
	this := PlayerNotificationTargetIncludeAliases{}
	return &this
}

// GetAliasLabel returns the AliasLabel field value if set, zero value otherwise.
func (o *PlayerNotificationTargetIncludeAliases) GetAliasLabel() []string {
	if o == nil || o.AliasLabel == nil {
		var ret []string
		return ret
	}
	return o.AliasLabel
}

// GetAliasLabelOk returns a tuple with the AliasLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerNotificationTargetIncludeAliases) GetAliasLabelOk() ([]string, bool) {
	if o == nil || o.AliasLabel == nil {
		return nil, false
	}
	return o.AliasLabel, true
}

// HasAliasLabel returns a boolean if a field has been set.
func (o *PlayerNotificationTargetIncludeAliases) HasAliasLabel() bool {
	if o != nil && o.AliasLabel != nil {
		return true
	}

	return false
}

// SetAliasLabel gets a reference to the given []string and assigns it to the AliasLabel field.
func (o *PlayerNotificationTargetIncludeAliases) SetAliasLabel(v []string) {
	o.AliasLabel = v
}

func (o PlayerNotificationTargetIncludeAliases) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AliasLabel != nil {
		toSerialize["alias_label"] = o.AliasLabel
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PlayerNotificationTargetIncludeAliases) UnmarshalJSON(bytes []byte) (err error) {
	varPlayerNotificationTargetIncludeAliases := _PlayerNotificationTargetIncludeAliases{}

	if err = json.Unmarshal(bytes, &varPlayerNotificationTargetIncludeAliases); err == nil {
		*o = PlayerNotificationTargetIncludeAliases(varPlayerNotificationTargetIncludeAliases)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "alias_label")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePlayerNotificationTargetIncludeAliases struct {
	value *PlayerNotificationTargetIncludeAliases
	isSet bool
}

func (v NullablePlayerNotificationTargetIncludeAliases) Get() *PlayerNotificationTargetIncludeAliases {
	return v.value
}

func (v *NullablePlayerNotificationTargetIncludeAliases) Set(val *PlayerNotificationTargetIncludeAliases) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerNotificationTargetIncludeAliases) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerNotificationTargetIncludeAliases) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerNotificationTargetIncludeAliases(val *PlayerNotificationTargetIncludeAliases) *NullablePlayerNotificationTargetIncludeAliases {
	return &NullablePlayerNotificationTargetIncludeAliases{value: val, isSet: true}
}

func (v NullablePlayerNotificationTargetIncludeAliases) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerNotificationTargetIncludeAliases) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


