/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.4.0
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// OutcomeData struct for OutcomeData
type OutcomeData struct {
	Id string `json:"id"`
	Value int32 `json:"value"`
	Aggregation string `json:"aggregation"`
	AdditionalProperties map[string]interface{}
}

type _OutcomeData OutcomeData

// NewOutcomeData instantiates a new OutcomeData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutcomeData(id string, value int32, aggregation string) *OutcomeData {
	this := OutcomeData{}
	this.Id = id
	this.Value = value
	this.Aggregation = aggregation
	return &this
}

// NewOutcomeDataWithDefaults instantiates a new OutcomeData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutcomeDataWithDefaults() *OutcomeData {
	this := OutcomeData{}
	return &this
}

// GetId returns the Id field value
func (o *OutcomeData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OutcomeData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OutcomeData) SetId(v string) {
	o.Id = v
}

// GetValue returns the Value field value
func (o *OutcomeData) GetValue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *OutcomeData) GetValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *OutcomeData) SetValue(v int32) {
	o.Value = v
}

// GetAggregation returns the Aggregation field value
func (o *OutcomeData) GetAggregation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value
// and a boolean to check if the value has been set.
func (o *OutcomeData) GetAggregationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aggregation, true
}

// SetAggregation sets field value
func (o *OutcomeData) SetAggregation(v string) {
	o.Aggregation = v
}

func (o OutcomeData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["aggregation"] = o.Aggregation
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OutcomeData) UnmarshalJSON(bytes []byte) (err error) {
	varOutcomeData := _OutcomeData{}

	if err = json.Unmarshal(bytes, &varOutcomeData); err == nil {
		*o = OutcomeData(varOutcomeData)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "value")
		delete(additionalProperties, "aggregation")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOutcomeData struct {
	value *OutcomeData
	isSet bool
}

func (v NullableOutcomeData) Get() *OutcomeData {
	return v.value
}

func (v *NullableOutcomeData) Set(val *OutcomeData) {
	v.value = val
	v.isSet = true
}

func (v NullableOutcomeData) IsSet() bool {
	return v.isSet
}

func (v *NullableOutcomeData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutcomeData(val *OutcomeData) *NullableOutcomeData {
	return &NullableOutcomeData{value: val, isSet: true}
}

func (v NullableOutcomeData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutcomeData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


