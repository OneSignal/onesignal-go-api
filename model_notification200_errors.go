/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 1.4.0
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
	"fmt"
)

// Notification200Errors - struct for Notification200Errors
type Notification200Errors struct {
	InvalidIdentifierError *InvalidIdentifierError
	ArrayOfString *[]string
}

// InvalidIdentifierErrorAsNotification200Errors is a convenience function that returns InvalidIdentifierError wrapped in Notification200Errors
func InvalidIdentifierErrorAsNotification200Errors(v *InvalidIdentifierError) Notification200Errors {
	return Notification200Errors{
		InvalidIdentifierError: v,
	}
}

// []stringAsNotification200Errors is a convenience function that returns []string wrapped in Notification200Errors
func ArrayOfStringAsNotification200Errors(v *[]string) Notification200Errors {
	return Notification200Errors{
		ArrayOfString: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Notification200Errors) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into InvalidIdentifierError
	err = newStrictDecoder(data).Decode(&dst.InvalidIdentifierError)
	if err == nil {
		jsonInvalidIdentifierError, _ := json.Marshal(dst.InvalidIdentifierError)
		if string(jsonInvalidIdentifierError) == "{}" { // empty struct
			dst.InvalidIdentifierError = nil
		} else {
			match++
		}
	} else {
		dst.InvalidIdentifierError = nil
	}

	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfString = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.InvalidIdentifierError = nil
		dst.ArrayOfString = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(Notification200Errors)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(Notification200Errors)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Notification200Errors) MarshalJSON() ([]byte, error) {
	if src.InvalidIdentifierError != nil {
		return json.Marshal(&src.InvalidIdentifierError)
	}

	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Notification200Errors) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.InvalidIdentifierError != nil {
		return obj.InvalidIdentifierError
	}

	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	// all schemas are nil
	return nil
}

type NullableNotification200Errors struct {
	value *Notification200Errors
	isSet bool
}

func (v NullableNotification200Errors) Get() *Notification200Errors {
	return v.value
}

func (v *NullableNotification200Errors) Set(val *Notification200Errors) {
	v.value = val
	v.isSet = true
}

func (v NullableNotification200Errors) IsSet() bool {
	return v.isSet
}

func (v *NullableNotification200Errors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotification200Errors(val *Notification200Errors) *NullableNotification200Errors {
	return &NullableNotification200Errors{value: val, isSet: true}
}

func (v NullableNotification200Errors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotification200Errors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


