/*
OneSignal

A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com

API version: 5.1.0
Contact: devrel@onesignal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onesignal

import (
	"encoding/json"
)

// PropertiesBody struct for PropertiesBody
type PropertiesBody struct {
	Properties *PropertiesObject `json:"properties,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PropertiesBody PropertiesBody

// NewPropertiesBody instantiates a new PropertiesBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertiesBody() *PropertiesBody {
	this := PropertiesBody{}
	return &this
}

// NewPropertiesBodyWithDefaults instantiates a new PropertiesBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertiesBodyWithDefaults() *PropertiesBody {
	this := PropertiesBody{}
	return &this
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *PropertiesBody) GetProperties() PropertiesObject {
	if o == nil || o.Properties == nil {
		var ret PropertiesObject
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertiesBody) GetPropertiesOk() (*PropertiesObject, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *PropertiesBody) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given PropertiesObject and assigns it to the Properties field.
func (o *PropertiesBody) SetProperties(v PropertiesObject) {
	o.Properties = &v
}

func (o PropertiesBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PropertiesBody) UnmarshalJSON(bytes []byte) (err error) {
	varPropertiesBody := _PropertiesBody{}

	if err = json.Unmarshal(bytes, &varPropertiesBody); err == nil {
		*o = PropertiesBody(varPropertiesBody)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "properties")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePropertiesBody struct {
	value *PropertiesBody
	isSet bool
}

func (v NullablePropertiesBody) Get() *PropertiesBody {
	return v.value
}

func (v *NullablePropertiesBody) Set(val *PropertiesBody) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertiesBody) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertiesBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertiesBody(val *PropertiesBody) *NullablePropertiesBody {
	return &NullablePropertiesBody{value: val, isSet: true}
}

func (v NullablePropertiesBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertiesBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


